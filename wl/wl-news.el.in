;;; wl-news.el --- Create notification from NEWS(.ja) for Wanderlust.

;; Copyright (C) 2002 Yoichi NAKAYAMA <yoichi@eken.phys.nagoya-u.ac.jp>
;; Copyright (C) 2002 Kenichi OKADA <okada@opaopa.org>

;; Author: Yoichi NAKAYAMA <yoichi@eken.phys.nagoya-u.ac.jp>
;;	Kenichi OKADA <okada@opaopa.org>
;; Keywords: mail, net news

;; This file is part of Wanderlust (Yet Another Message Interface on Emacsen).

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.
;;

;;; Commentary:
;;

;;; Code:
;;

(require 'elmo)
(require 'wl-vars)
(require 'wl-util)
(require 'wl-address)
(require 'wl-folder)

(defvar wl-news-version-file-name "previous-version")
(defvar wl-news-default-previous-version '(2 0 0))

(defvar wl-news-send-to-address nil
  "*The recipient address to send NEWS.")

(defun wl-news-check ()
  (let* ((previous-version (wl-news-previous-version-load))
	 (current-version (product-version (product-find 'wl-version)))
	 (updated (< 0 (product-version-compare
			current-version previous-version))))
    (when updated
      (and wl-news-lang
	   wl-news-send-to-address
	   (wl-news-send-news previous-version))
      (wl-news-previous-version-save current-version))
    updated))

;;; -*- news-list -*-


;;; -*- news-list-end -*-

(defun wl-news-previous-version-load ()
  (save-excursion
    (let ((filename (expand-file-name
		     wl-news-version-file-name
		     elmo-msgdb-directory))
	  (tmp-buffer (get-buffer-create " *wl-news-version-tmp*"))
	  insert-file-contents-pre-hook
	  insert-file-contents-post-hook
	  ret-val)
      (if (not (file-readable-p filename))
	  wl-news-default-previous-version
	(set-buffer tmp-buffer)
	(insert-file-contents filename)
	(setq ret-val
	      (condition-case nil
		  (read (current-buffer))
		(error nil nil)))
	(kill-buffer tmp-buffer)
	ret-val))))

(defun wl-news-previous-version-save (version)
  (save-excursion
    (let ((filename (expand-file-name
		     wl-news-version-file-name
		     elmo-msgdb-directory))
	  (tmp-buffer (get-buffer-create " *wl-news-version-tmp*")))
      (set-buffer tmp-buffer)
      (erase-buffer)
      (prin1 version tmp-buffer)
      (princ "\n" tmp-buffer)
      (if (file-writable-p filename)
	  (write-region (point-min) (point-max)
			filename nil 'no-msg)
	(message "%s is not writable." filename))
      (kill-buffer tmp-buffer))))

(defun wl-news-append-news (lang previous-version &optional no-mime-tag)
  (require 'wl-mime)
  (let* ((news-list (cdr (assoc lang wl-news-news-alist))))
    (if no-mime-tag
	(insert "\n")
      (mime-edit-insert-tag "text" "plain" "" ""))
    (while (< 0
	      (product-version-compare
	       (car (car news-list))
	       previous-version))
      (insert (cdr (car news-list)) "\n\n")
      (setq news-list (cdr news-list)))))

(defun wl-news-send-news (previous-version)
  (require 'wl-draft)
  (let ((lang (if (listp wl-news-lang)
		  wl-news-lang
		(list wl-news-lang)))
	wl-fcc wl-bcc)
    (save-window-excursion
      (wl-draft-create-buffer)
      (wl-draft-create-contents
	   (list (cons 'From "WL Release 'Bot <wl@lists.airs.net>")
		 (cons 'To (wl-draft-eword-encode-address-list
			    wl-news-send-to-address))
		 (cons 'Subject "Wanderlust NEWS")
		 (cons 'Date (wl-make-date-string))
		 (cons 'User-Agent wl-generate-mailer-string-function)))
      (wl-draft-insert-mail-header-separator)
      (wl-draft-prepare-edit)
      (goto-char (point-max))
      (insert "\nThis message is automatically generated by Wanderlust.\n\n")
      ;; insert news
      (while (car lang)
	(wl-news-append-news
	 (car lang) previous-version)
	(setq lang (cdr lang)))
      ;; send
      (let (wl-interactive-send)
	(wl-draft-send 'kill-when-done)))))

;;; wl-news-mode

(defvar wl-news-buf-name "NEWS")
(defvar wl-news-mode-map nil)
(defvar wl-news-winconf nil)

(unless wl-news-mode-map
  (setq wl-news-mode-map (make-sparse-keymap))
  (define-key wl-news-mode-map "q"    'wl-news-exit)
  (define-key wl-news-mode-map "\C-m" 'wl-news-next-line)
  (define-key wl-news-mode-map " "    'wl-news-next-page))

(defun wl-news-mode ()
  "Mode for Wanderlust NEWS(.ja)."
  (interactive)
  (kill-all-local-variables)
  (use-local-map wl-news-mode-map)
  (setq major-mode 'wl-news-mode)
  (setq mode-name "NEWS")
  (setq buffer-read-only t))

(defun wl-news ()
  (interactive)
  (setq wl-news-winconf (current-window-configuration))
  (let* ((previous-version (wl-news-previous-version-load))
	 (lang wl-news-lang)
	 window-lines lines)
    (set-buffer (get-buffer-create wl-news-buf-name))
    (wl-news-mode)
    (buffer-disable-undo (current-buffer))
    ;; insert news
    (let ((buffer-read-only nil))
      (insert "--- Wanderlust NEWS ---  press 'q' for exit\n\n")
      (while (car lang)
	(wl-news-append-news
	 (car lang) previous-version t)
	(setq lang (cdr lang))))
    (switch-to-buffer wl-news-buf-name)
    (delete-other-windows)
    (goto-char (point-min))))

(defun wl-news-next-line ()
  (interactive)
  (scroll-up 1))

(defun wl-news-next-page ()
  (interactive)
  (scroll-up))

(defun wl-news-exit ()
  (interactive)
  (unless (y-or-n-p "Do you want to look at this message again? ")
    (wl-news-previous-version-save
     (product-version (product-find 'wl-version))))
  (kill-buffer (current-buffer))
  (if wl-news-winconf
      (set-window-configuration wl-news-winconf)))

(require 'product)
(product-provide (provide 'wl-news) (require 'wl-version))

;;; wl-news.el ends here
