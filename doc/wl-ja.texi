\input texinfo @c -*-texinfo -*- coding: iso-2022-jp -*-
@c %**start of header
@setfilename wl-ja.info
@settitle Wanderlust -- Yet Another Message Interface On Emacsen --
@c %**end of header
@documentlanguage ja
@documentencoding iso-2022-jp
@include version.texi
@synindex pg cp
@finalout

@dircategory GNU Emacs Lisp
@direntry
* Wanderlust-ja: (wl-ja).  Yet Another Message Interface On Emacsen
@end direntry

@c permissions text appears in an Info file before the first node.
@ifinfo
This file documents Wanderlust,
Yet another message interface on Emacsen.

このファイルは Emacs で動くメール/ニュース管理システム Wanderlust に関す
る説明書です。

Copyright @copyright{} 1998, 1999, 2000, 2001 @w{Yuuichi Teranishi},
@w{Fujikazu Okunishi}, @w{Masahiro Murata},
@w{Kenichi Okada} and @w{Kaoru Takahashi}.

This edition is for Wanderlust version @value{VERSION}.

この版は Wanderlust version @value{VERSION} に対応します。

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

著作権表示とこの許可文がすべての複製に存在する限り、この説明書のまったく
同一の複製を作り、配布することを許可する。

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

この段落が取り除かれているのを除き、これと同じ複製に関する許可文が表示さ
れている限り、このファイルを TeX にかけて、その結果を印刷することを許可
する(この段落は印刷されたマニュアルでは参照されません)。

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

同一複製の条件の下で、それによって得られた結果もこの許可文の表示と同一の
条件のもとで配布する限り、この説明書の修正版の複製をし、配布することを許
可する。

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.

上記の修正版に関する条件の下で、この説明書の翻訳の複製を作り、配布するこ
とを許可する。
@end ifinfo

@titlepage
@sp 10
@title Wanderlust ユーザマニュアル
@subtitle Yet another message interface on Emacsen
@subtitle for Wanderlust version @value{VERSION}
@author 寺西裕一
@author 奥西藤和
@author 村田全寛
@author 岡田健一
@author 高橋  郁
@page

@vskip 0pt plus 1filll
Copyright @copyright{} 1998, 1999, 2000, 2001 @w{Yuuichi Teranishi},
@w{Fujikazu Okunishi}, @w{Masahiro Murata}, @w{Kenichi Okada}, and
@w{Kaoru Takahashi}.

This manual is for Wanderlust version @value{VERSION}.

このマニュアルは Wanderlust version @value{VERSION} に対応します。

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

著作権表示とこの許可文がすべての複製に存在する限り、この説明書のまったく
同一の複製を作り、配布することを許可する。

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

同一複製の条件の下で、それによって得られた結果をこの許可文の表示と同一の
条件のもとで配布する限り、この説明書の修正版の複製をし、配布することを許
可する。

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.

上記の修正版に関する条件の下で、この説明書の翻訳の複製を作り、配布するこ
とを許可する。
@end titlepage


@ifinfo
@node Top, Introduction, (dir), (dir)
@top Wanderlust ユーザマニュアル

@flushright
寺西裕一
奥西藤和
村田全寛
岡田健一
高橋  郁
@end flushright

この文書は Wanderlust @value{VERSION} に対応します。

@end ifinfo

@menu
* Introduction::             はじめに
* Start Me Up::              Wanderlust を起動する
* Folders::                  Wanderlust で扱えるフォルダたち
* Folder::                   フォルダモード
* Summary::                  サマリモード
* Message::                  メッセージバッファ
* Draft::                    ドラフトバッファ
* Disconnected Operations::  オフライン処理
* Expire and Archive::       メッセージの自動削除とアーカイブ
* Scoring::                  メッセージのスコア
* Customization::            カスタマイズ
* Mailing List::             メーリングリスト
* Addition::                 おまけ
* Index::                    索引
@end menu


@node Introduction, Start Me Up, Top, Top
@chapter はじめに
@cindex Introduction

Wanderlust は Emacs で動くメール/ニュース管理システムです。
IMAP4rev1(RFC2060), NNTP, POP およびローカルのメッセージに対応しています。

Wanderlust の主な特徴/特長は以下の通りです。

@itemize @minus
@item elisp のみによる実装。
@item IMAP4rev1, NNTP, POP(POP3/APOP), MH, Maildir 形式のサポート。
@item Mew っぽい Folder Specification に基づくメッセージへの統一的アクセス。
@item Mew っぽいキーバインドとマーク処理。
@item 未読管理。
@item インタラクティブなスレッド表示。
@item 購読フォルダの一覧を表示するフォルダモード。
@item メッセージキャッシュ、Disconnected Operation (現在は表示のみ)。
@item MH 的 FCC。(@samp{FCC: %Backup} や @samp{FCC: $Backup} も可)。
@item MIME 対応 (by SEMI or tm)。
@item ニュース/メールの送信を統合したメッセージ送信ドラフト。
@item フォルダ一覧のアイコン表示 (XEmacs と Emacs 21)。
@item 大きなパートを取り寄せずに表示(IMAP4)。
@item メッセージの検索をサーバ側で実行(IMAP4)。日本語検索も可。
@item 仮想フォルダ。
@item 多い日も安心の、マルチアーカイバ対応圧縮フォルダ。
@item フォルダ中の古い記事を自動的にアーカイブ/削除して整理する expire 機能。
@item 自動リファイル。
@item 定型メッセージの送信に便利なテンプレート機能。
@end itemize


@section 動作環境

Wanderlust は以下の Emacsen で動作することが確認されています。
@c さらに Nemacs 3.3.2 上でも、(使える機能は限定されるものの) 動作すること
@c が確認されています。

@itemize @bullet
@item Nemacs 3.3.2 (注: 使える機能は限定されます)
@item Mule 2.3 based on Emacs 19.28
@item Mule 2.3 based on Emacs 19.34
@item Emacs 20.2 以降
@item XEmacs 20.4 以降
@item Meadow 1.00 以降
@item Mule for Windows v1.22
@item NTEmacs 20.4 以降
@item PMMule
@end itemize

Wanderlust が接続して動作することが確認されている IMAP サーバは以下の通
りです。

@itemize @bullet
@item UW imapd 4.1〜4.7, 4.7a, 4.7b, 4.7c, 2000 以降
@item Cyrus imapd 1.4, 1.5.19, 1.6.22, 2.0.5 以降
@item AIR MAIL (AIRC imapd release 2.00)
@item Express Mail
@item Microsoft Exchange Server 5.5
@item Sun Internet Mail Server 4.0
@end itemize

@c Wanderlust が接続して動作することが確認されている LDAP サーバは以下の通
@c りです。


@node Start Me Up, Folders, Introduction, Top
@chapter Wanderlust を起動する
@cindex Start up

Wanderlust を起動するまでに必要な手順を順番に説明します。

(当然のことながら、これらよりも先に、メール/ニュースを読むことのできる環境があらかじめ必要です。)

@menu
* MIME Modules::      MIME 用モジュールのインストール
* Download::          パッケージの入手と展開
* Install::           バイトコンパイルとインストール
* Minimal Settings::  @file{.emacs} の設定
* Mail Addresses::    アドレス帳の定義
* Folder Definition:: 購読するフォルダの定義
* Start Wanderlust::  Wanderlust の起動
@end menu


@node MIME Modules, Download, Start Me Up, Start Me Up
@section MIME 用モジュールのインストール
@cindex MIME modules
@pindex APEL
@pindex FLIM
@pindex SEMI
@pindex tm

Wanderlust を正常に動作させるには、まず、SEMI もしくは tm がインス
トールされている必要があります。

Emacs19.28 以前をベースとした Mule をお使いの場合は SEMI が動かないはず
@footnote{Emacs 19.34 ベースの Mule では SEMI を動作させることも可能です。@*
@uref{http://www.jpl.org/elips/INSTALL-SEMI-ja.html} が参考になります。}
なので tm をインストールします。
(tm はバージョン 8.7 以降をご利用ください。)

SEMI が使える Emacsen では、tm よりも機能の充実した SEMI をインストールす
ることをお勧めします。

インストールの方法は各パッケージに添付されているドキュメントを参照して
ください。

SEMI, tm は以下の場所からダウンロードできます。

@example
@group
SEMI:   ftp://ftp.m17n.org/pub/mule/semi/
tm:     http://cvs.m17n.org/tomo/comp/emacsen/tm/tm-8/
@end group
@end example

SEMI には APEL, FLIM と呼ばれるパッケージも必要です。
APEL, FLIM は以下の場所からダウンロードできます。

@example
@group
APEL:   ftp://ftp.m17n.org/pub/mule/apel/
FLIM:   ftp://ftp.m17n.org/pub/mule/flim/
@end group
@end example

APEL, FLIM, SEMI の順にインストールしてください。
基本的にすべて @samp{make install} の実行で済むはずです
(XEmacs 21 では @samp{make install-package})。

推奨される APEL, FLIM, SEMI のバージョンの組合せは、以下の通りです。

@itemize @minus
@item APEL 10.3, FLIM 1.14.2, SEMI 1.14.3
@end itemize

その他、FLIM, SEMI にはいろいろな変形バージョンが存在しますが、
それらのいずれも利用することが可能です。
基本的に最新版の組合せなら動作するはずです。
例えば、以下の組合せの動作が確認されています。

@itemize @minus
@item APEL 10.2, Chao 1.14.1, REMI 1.14.2
@item APEL 10.2, SLIM 1.14.3, EMY 1.13.9
@end itemize

APEL, FLIM, SEMI か tm のバージョンアップを行った場合は、Wanderlust をイ
ンストールし直してください。


@node Download, Install, MIME Modules, Start Me Up
@section パッケージの入手と展開
@cindex Download

Wanderlust 本体は以下の場所からダウンロードできます。

一次配布元:

@example
ftp://ftp.gohome.org/wl/
@end example

ミラーしていただいている ftp, http サイト:

@example
@group
ftp://ftp.jaist.ac.jp/pub/GNU/elisp/ftp.gohome.org/wl/
http://www.jpl.org/elips/wl/
http://www.ring.gr.jp/archives/text/elisp/wl/
ftp://ftp.ring.gr.jp/pub/text/elisp/wl/
ftp://opaopa.org/pub/mirror/elisp/wl/
@c ftp://roguelife.org/pub/tsumura/wl/
@end group
@end example

入手したパッケージは適当な作業ディレクトリに展開しましょう。

@example
@group
% cd ~/work
% tar zxvf wl-@var{version}.tar.gz
% cd wl-@var{version}
@end group
@end example

@subsection SSL (Secure Socket Layer) の利用
@cindex SSL
@pindex OpenSSL
@pindex starttls

Wanderlust では、SMTP, IMAP, NNTP, POP のコネクションにおいて、SSL
(Secure Socket Layer) を用いることができます。

SSL の利用形態には2種類あり、コネクションと同時に SSL negotiation を始め
るものと、@command{STARTTLS} command の後に SSL negotiation を始めるもの
があります。

通常の SSL を利用するには 本パッケージの @file{utils} ディレクトリにある
@file{ssl.el} をインストールする必要があります。なおかつ、OpenSSL に含ま
れる @command{openssl} にパスが通っている必要があります。

STARTTLS を利用するには、さらに、starttls パッケージをインストール
する必要があります。

starttls パッケージは以下の場所から入手できます。

@example
ftp://opaopa.org/pub/elisp/
@end example

@node Install, Minimal Settings, Download, Start Me Up
@section バイトコンパイルとインストール
@cindex Bytecompile
@cindex Compile
@cindex Install
@cindex Makefile
@cindex Make

@subsection 通常のインストール

@file{Makefile} は @code{LISPDIR}, @code{EMACS} のあたりを編集します。
@code{LISPDIR} にはパッケージのインストール先、
@code{EMACS} には利用する Emacs のコマンド名を指定します。

@example
@group
% make
% make install
@end group
@end example

@file{Makefile} 中の @code{LISPDIR} を変更せず、
そのまま(@samp{NONE} のままでも)インストールした場合、
自動的にインストール先を適当に検出します。
実際のインストール先については後述します。

Mule 2.3 など、@file{subdirs.el} が無く、@code{load-path} にサブディレクトリが
自動的に加わらない Emacs では、

@example
Cannot open load file: mime-setup
@end example

@noindent
というエラーが出ることがあります。この場合は、custom, APEL, FLIM, SEMI 
のインストール先を環境変数 @env{EMACSLOADPATH} に加えるか、展開ディレクト
リの @file{WL-CFG} というファイル中で@code{load-path} を通しておくと良い
でしょう。

また、BBDB を利用したい場合、BBDB へも @code{load-path} を通しておくと必
要なモジュールがバイトコンパイル/インストールされます。@xref{BBDB}.

@subsection @file{WL-CFG}

@file{WL-CFG} というファイルが展開ディレクトリに存在すると、
インストール時に読み込まれるようになっています。
インストールで SEMI 等の @code{load-path} の設定が必要であれば、
@file{WL-CFG} に設定してください。

インストール先は @file{Makefile} 中の @code{LISPDIR} で指定しますが、
実際に @file{*.el}, @file{*.elc} が入るディレクトリ
(@code{LISPDIR} からの相対パス)は
 @file{WL-CFG} 中の変数 @code{WL_PREFIX}, @code{ELMO_PREFIX} で指定します。

@table @code
@item WL_PREFIX
WL モジュールをインストールするディレクトリを指定します。
これは @code{LISPDIR} からの相対パスです。
WL モジュールにはファイル @file{wl*.el} @file{wl*.elc} が含まれます。
@c  必要に応じて @file{util/} 以下のファイルもインストールされます。

@item ELMO_PREFIX
ELMO モジュールをインストールするディレクトリを指定します。
これは  @code{LISPDIR} からの相対パスです。
ELMO モジュールにはファイル @file{elmo*.el} @file{elmo*.elc} が含まれます。
@c  @file{utf7.el}, @file{utf7.elc} も ELMO モジュールに含まれます。
@end table
  
@noindent
@code{WL_PREFIX}, @code{ELMO_PREFIX}
 のデフォルトはいずれも @file{wl} です。

@file{elmo*} (ELMO モジュール) を @file{elmo} 配下にインストールしたければ、

@lisp
(setq ELMO_PREFIX "elmo")
@end lisp

@noindent
とします。

@subsection XEmacs package としてインストール
@cindex XEmacs package
@cindex XEmacs package install
@cindex Package, XEmacs
@cindex Package install, XEmacs
@c @cindex install-package

Wanderlust は XEmacs (21.0 〜) の package のひとつとしてインストールする
ことも可能です。package としてインストールすると、autoload の設定、
アイコンのパス設定を個人の @file{~/.emacs} に記述しなくても Wanderlust
を正常に起動できるようになります。

XEmacs の package としてインストールするには以下のようにします。

@example
@group
% vi Makefile
% make package
% make install-package
@end group
@end example

package のディレクトリは SEMI がインストールされていれば自動検出されます。
(@file{Makefile} 中の @code{PACKAGEDIR} でも設定可)

@subsection インストールしないで利用

Wanderlust はバイトコンパイル、インストールしなくても、@file{wl},
@file{elmo} のディレクトリに @code{load-path} が設定されていれば起動する
ことができます。例えば @file{~/work} にパッケージを展開した場合、
@file{~/.emacs} に以下の設定をすると起動できます。

@lisp
@group
(add-to-list 'load-path "~/work/wl-@var{version}/wl")
(add-to-list 'load-path "~/work/wl-@var{version}/elmo")
@end group
@end lisp

@subsection マニュアルについて

マニュアルは Info 形式です。
インストールするには下記を実行してください。

@example
@group
% make info
% make install-info
@end group
@end example

XEmacs の package としてインストールした場合は自動的に Info ファイルも
インストールされるのでこれらの操作は必要ありません。

また、下記にもマニュアルがあります。

@example
http://www.gohome.org/wl/doc/wl-euc_toc.html
@end example


@node Minimal Settings, Mail Addresses, Install, Start Me Up
@section @file{.emacs}, @file{.wl} の設定
@cindex Minimal Settings
@cindex Settings
@cindex Configuration
@cindex .emacs
@cindex .wl

Wanderlust のパッケージには大きく分けて二つのモジュール群が含まれています。

@table @samp
@item ELMO (elmo-*.el)
すべてをフォルダに見せるモジュール群です。WL のバックエンドです。
@item WL (wl-*.el)
Wanderlust 本体の動作を決めるモジュール群です。ELMO のフロントエンドです。
@end table

ユーザは @code{elmo-}, @code{wl-} で始まる変数の設定を変えることによって
Wanderlust の動作をカスタマイズできます。

最低限必要な設定は以下の通りです。

@lisp
@group
;; @r{SEMI/tm を使うための設定}
(load "mime-setup")

;; @r{autoload の設定}
;; @r{(XEmacs の package としてインストールされている場合、必要ありません)}
(autoload 'wl "wl" "Wanderlust" t)
(autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)

;; @r{アイコンを置くディレクトリ (XEmacs と Emacs 21)。初期設定は @code{nil}。}
;; @r{(XEmacs の package としてインストールされている場合、必要ありません)}
(setq wl-icon-dir "~/work/wl/etc")

;; @r{メールを送信する SMTP サーバ。 初期設定は @code{nil}。}
(setq wl-smtp-posting-server "your.smtp.example.com")
;; @r{ニュース投稿用の NNTP サーバ。 初期設定は @code{nil}。}
(setq wl-nntp-posting-server "your.nntp.example.com")
@end group
@end lisp

Wanderlust 起動後、@file{~/.wl} が存在すればロードされますので、
Wanderlust に固有の設定は @file{~/.wl} に記述しておけば整理しやすいでしょ
う。face の設定は @file{~/.emacs} に書くことはできないので@file{~/.wl} 
に書いてください。@xref{Highlights}.

上記のうち、@samp{(load "mime-setup")} と @code{autoload} の設定は
@file{~/.emacs} に書く必要があります。それ以外の設定は @file{~/.wl} に記
述できます。

@subsection @code{mail-user-agent}
@cindex Default Mailer
@cindex Mailer, Default
@vindex mail-user-agent
@findex compose-mail

以下のような設定を @file{.emacs} 等にしておくと、@kbd{C-x m}
(@code{compose-mail}) 等によって Wanderlust のドラフトモードが起動される
ようになります。Wanderlust を Emacs 上の標準メーラとして使いたい場合は設
定しておくと良いでしょう。ただし、これは @code{mail-user-agent} の定義が
可能な Emacsen の場合のみ有効です。
@xref{Mail Methods, , ,emacs-ja, The Emacs Editor}.

@lisp
@group
(autoload 'wl-user-agent-compose "wl-draft" nil t)
(if (boundp 'mail-user-agent)
    (setq mail-user-agent 'wl-user-agent))
(if (fboundp 'define-mail-user-agent)
    (define-mail-user-agent
      'wl-user-agent
      'wl-user-agent-compose
      'wl-draft-send
      'wl-draft-kill
      'mail-send-hook))
@end group
@end lisp


@node Mail Addresses, Folder Definition, Minimal Settings, Start Me Up
@section アドレス帳の定義
@cindex Address book Definition
@cindex .addresses
@cindex Alias, Address

アドレス補完やサマリの表示に凝る必要がない場合は、この項は読み飛ばしても構い
ません。

アドレスファイル @file{~/.addresses} を作成し、自分用に編集します。
@file{~/.addresses} に書かれたデータは、ドラフト作成時のアドレス補完デー
タとして利用されるほか、サマリ表示での名前表示等にも用いられます。なお、
起動した状態でサマリバッファから @file{~/.addresses} にアドレスを追加/
変更/削除することも可能です。

書き方はとても単純です。こんな感じです。

@example
@group
#
# @r{@samp{#} で始まる行はコメント。}
# @r{空行は無視。}
#
# @var{メールアドレス}  "@var{あだ名}"  "@var{本名}"
#
teranisi@@gohome.org            "てらにし"      "寺西裕一"
foo@@bar.gohome.org             "Foo さん"      "John Foo"
bar@@foo.gohome.org             "Bar さん"      "Michael Bar"
@end group
@end example

@noindent
一行が一人分の定義です。

実際には(デフォルト設定では)サマリ表示で@var{あだ名}、ドラフト作成時のア
ドレス情報として@var{本名}が使われます。試してみて、確認してからの方が
わかりやすいと思われます。ちょっと書いて試してみてから、またアドレス帳の
定義をやり直すのが良いでしょう。

また、変数 @code{wl-alias-file} に MH の alias file が指定されていれば、
ドラフト作成時のアドレス情報として使われます。

さらに、変数 @code{wl-use-ldap} (初期設定は @code{nil}) を non-nil に設
定すると、LDAP サーバの情報をドラフト作成時のアドレス情報として利用しま
す。

LDAP を利用する場合は、@code{wl-ldap-server}、@code{wl-ldap-port},
@code{wl-ldap-base} も適切に設定して下さい。また、LDAP 対応の XEmacs 以
外では、外部プログラムとして @command{ldapsearch} を利用しますので、
@command{ldapsearch} へあらかじめコマンド実行パスを設定しておく必要があ
ります。

@node Folder Definition, Start Wanderlust, Mail Addresses, Start Me Up
@section 購読するフォルダの定義
@cindex Folder Definition
@cindex .folders

購読するフォルダをファイル @file{~/.folders} に定義します。
@file{~/.folders} に書かれた内容がそのままあなたの購読するフォルダとなります。

起動した状態でフォルダ一覧のバッファから購読フォルダを追加/編集すること
も可能ですので、この項は読み飛ばしても構いません。
@xref{Folder Manager}.

@file{~/.folders} の書き方はとても単純です。こんな感じです。

@example
@group
#
# @r{@samp{#} で始まる行はコメント。}
# @r{空行は無視。}
#
# @var{フォルダ}  "@var{あだ名}"
# @r{(あだ名は無くてもよい)}
#
%inbox  "受信箱"
+trash  "ゴミ箱"
+draft  "草稿"
%#mh/Backup@@my.imap.example.com "送信済み"
# グループの定義
Emacsen@{
    %#mh/spool/wl            "Wanderlust ML"
    %#mh/spool/elips         "ELIPS ML"
    %#mh/spool/apel-ja       "APEL (日本語) ML"
    %#mh/spool/xemacs-beta   "XEmacs ベータ"
    -fj.news.reader.gnus@@other.nntp.example.com
    *-fj.editor.xemacs,-fj.editor.mule,-fj.editor.emacs "fj の Emacsen"
@}
#
# @r{行末に @samp{/} がつくと、そのフォルダに含まれるサブフォルダ全てが}
# @r{ひとつのグループとなる。}
#
%#mh/expire@@localhost /
# @r{MH のフォルダ全てをひとつのグループにする例。}
+ /
@end group
@end example

一行にひとつ、読みたいフォルダを書きます。
各フォルダの定義については次の章で詳しく説明します。

@samp{@var{グループ名}@{} と @samp{@}} で囲まれた部分は一つのグループと
なります。ひとつのグループはフォルダモードでは開閉できるディレクトリのよ
うに見えます。いくつかのフォルダをまとめて整理するのに便利です。

注意すべきなのは、@samp{@var{グループ名}@{} と @samp{@}} は１行を占領し
て書く必要があることです(これはパーサがダサいからです)。

グループには、２つの種類があります。一つは、上の例の @samp{Emacsen} のよ
うに直接自分で好きなフォルダをグループとして定義するタイプです。

もう一つは、上の例の @samp{+} のような @dfn{アクセスグループ} です。これ
は、あるフォルダに含まれるサブフォルダ全てを一つのグループとするものです。
(これはフォルダのタイプによって違います。例えば @samp{+} なら MH のサブ
ディレクトリすべてがひとつのグループとなります。)

実際に試してみて、確認してからの方がわかりやすいと思われます。
ちょっと書いて試してみてから、またフォルダの定義をやり直すのがよいでしょう。


@node Start Wanderlust,  , Folder Definition, Start Me Up
@section Wanderlust の起動
@cindex Start Wanderlust

インストール、および設定がうまくいっていれば、

@example
M-x wl
@end example

@noindent
で起動できます。
初期化の後、フォルダ一覧を表示するフォルダモードが現れます。

@kbd{C-u M-x wl} のように prefix argument つきで実行すると、
フォルダのチェックを省略して起動します。


@node Folders, Folder, Start Me Up, Top
@chapter Wanderlust で扱えるフォルダたち
@cindex Folder Type

以下では Wanderlust で扱えるフォルダについて説明します。

Wanderlust は ELMO のインタフェースを利用しているため、ELMO モジュールに
よってサポートされていれば、どんなフォルダでも利用することができます。

バージョン @value{VERSION} 現在、用意されているフォルダは、IMAP, NNTP,
LocalDir(MH), Maildir, News Spool, Archive, POP, Multi, Filter, Pipe,
Internal の 11 種類です。

@menu
* IMAP Folder::              @samp{%} -- IMAP フォルダ
* NNTP Folder::              @samp{-} -- NNTP フォルダ
* MH Folder::                @samp{+} -- MH フォルダ
* Maildir Folder::           @samp{.} -- Maildir フォルダ
* News Spool Folder::        @samp{=} -- News Spool フォルダ
* Archive Folder::           @samp{$} -- アーカイブフォルダ
* POP Folder::               @samp{&} -- POP フォルダ
* Multi Folder::             @samp{*} -- マルチフォルダ
* Filter Folder::            @samp{/} -- フィルタフォルダ
* Pipe Folder::              @samp{|} -- パイプフォルダ
* Internal Folder::          @samp{'} -- 内部フォルダ
@end menu


@node IMAP Folder, NNTP Folder, Folders, Folders
@section IMAP フォルダ
@cindex IMAP Folder
@cindex @samp{%}
@cindex RFC 2060
@cindex IMAP4rev1

RFC 2060 で規定された IMAP4rev1 を利用してメールを読むためのフォルダです。

書式:

@example
@group
@samp{%} @var{メールボックス名} [@samp{:} @var{ユーザ名} [@samp{/} @var{認証法}]][@samp{@@} @var{ホスト名}][@samp{:} @var{ポート番号}][@samp{!}]
@end group
@end example

@example
@var{認証法}には @code{login} (エンコードしてパスワードを送信)か
           @code{cram-md5} (CRAM-MD5 による認証)か
           @code{digest-md5} (DIGEST-MD5 による認証)か
           @code{clear} (または @code{nil}。生パスワードを送信) のいずれかを指定。
@end example

(1.14.0 より以前のバージョンの FLIM で CRAM-MD5 や DIGEST-MD5 による認証を行なうには 本パッケージの @file{utils/sasl} をインストールする必要があります。1.14.0 以降のバージョンの FLIM であれば、本パッケージの @file{utils/sasl} をインストールする必要はありません。)

default 値:

@example
ユーザ名  -> 変数 @code{elmo-default-imap4-user} の値。
             初期設定は 環境変数 @env{USER} か、@env{LOGNAME} か、
             @code{(user-login-name)} の返り値。
認証法    -> 変数 @code{elmo-default-imap4-authenticate-type} の値。
             初期設定は @code{login}。
ホスト名  -> 変数 @code{elmo-default-imap4-server} の値。
             初期設定は @samp{localhost}。
ポート番号-> 変数 @code{elmo-default-imap4-port} の値。
             初期設定は 143。
@end example

メインで使用する IMAP サーバを変数 @code{elmo-default-imap4-server} 
に指定すると、いちいちフォルダ名にホスト名を書かずに済みます。例えばファ
イアウォールを越えなければならない場合でも @samp{foo%imap@@gateway} のよ
うに指定できます。

@lisp
;; 例: imap4.exaple.org をメインで使用する IMAP サーバとして設定
(setq elmo-default-imap4-server "imap4.example.org")
@end lisp

フォルダ名の最後に @samp{!} が付いていると、SSL (Secure Socket Layer)を
利用してコネクションを張ります。@samp{!!} だと、STARTTLS によりSSL コネク
ションを張ります。変数 @code{elmo-default-imap4-stream-type} の値が 
@code{ssl} なら、@samp{!} を付けなくても SSL を使います。@code{starttls} 
なら @samp{!!} を意味します。

@lisp
;; 例: SSL を利用してコネクションを張る
(setq elmo-default-imap4-stream-type 'ssl) 
@end lisp

(SSL を利用するには 本パッケージの @file{utils/ssl.el} をインストールす
る必要があります。なおかつ、OpenSSL に含まれる @command{openssl} にパスが
通っている必要があります。STARTTLS を利用するには、さらに、starttls パッ
ケージをインストールする必要があります。)

認証法として、@code{login}、@code{cram-md5} もしくは @code{digest-md5} 
を指定した場合、パスワードをエンコードして送信します。ただし、サーバ側が
パスワードをエンコードして受け取る能力が無い場合は、確認の後、
@code{clear} (生パスワードを送る) に切替えます。変数 
@code{elmo-imap4-force-login} が non-nil ならば、確認無しに @code{clear} 
に切替えます(初期設定は @code{nil})。

@lisp
;; 例: 生パスワードで認証
(setq elmo-default-imap4-authenticate-type 'clear) 
@end lisp

例:

@example
@group
%inbox     -> IMAP のメールボックス、"inbox"
%#mh/inbox -> IMAP のメールボックス、"#mh/inbox"

%inbox:hoge -> IMAP のメールボックス、"inbox" へユーザ "hoge" でアクセス。
%inbox:hoge/clear@@server1
            -> server1 上の IMAP のメールボックス "inbox" へ
               ユーザ "hoge" で、生パスワードを送って('clear で)
               アクセス。
@end group
@end example

@subsection 日本語メールボックス名の扱い(Modified UTF7)
@cindex Modified UTF7
@cindex UTF7
@cindex UTF8
@cindex Unicode
@pindex Mule-UCS
@pindex ucs-conv

使用している Emacs がユニコードに対応しており，かつ、変数 
@code{elmo-imap4-use-modified-utf7} に non-nil の値を設定している場合(デ
フォルトは @code{nil})、日本語(やその他の英語以外の言語)でメールボックス
名を指定することができます。

ユニコードを扱える Emacs には以下があります。

@itemize @bullet
@item Emacs 20.3 以降 + Mule-UCS

Emacs 20 では、Mule-UCS がインストールされていればユニコードを扱えます。
Mule-UCS は以下の URL から入手可能です。

@example
ftp://ftp.m17n.org/pub/mule/Mule-UCS/
@end example

@item XEmacs 21.2.13 以降

現状、XEmacs 21.2 でユニコード(UTF-8)を扱うには、ucs-conv パッケージが必
要です。ucs-conv は以下の anonymous cvs 経由で入手可能です。

@example
@group
cvs -d :pserver:anonymous@@cvs.m17n.org:/cvs/root login
Password: @var{NULL} (改行を入力)
cvs -d :pserver:anonymous@@cvs.m17n.org:/cvs/root checkout ucs-conv
@end group
@end example

また，XEmacs で日本語フォルダ名を扱うには、さらに、コマンド 
@command{u7tou8}, @command{u8tou7} がインストールされている必要がありま
す。これらのコマンドは以下から入手できる UTF7 パッケージに含まれています。

@example
ftp://ftp.ifcss.org/pub/software/unix/convert/utf7.tar.gz
@end example
@end itemize

@node NNTP Folder, MH Folder, IMAP Folder, Folders
@section NNTP フォルダ
@cindex NNTP Folder
@cindex @samp{-}

ネットニュースを読むためのフォルダです。
一つのニュースグループが一つのフォルダとして扱われます。

書式:

@example
@group
@samp{-} @var{ニュースグループ名} [[@samp{:} @var{ユーザ名}][@samp{@@} @var{ホスト名}][@samp{:} @var{ポート番号}]][@samp{!}]
@end group
@end example

default 値:
@example
ホスト名  -> 変数 @code{elmo-default-nntp-server} の値。初期設定は "localhost"。
ユーザ名  -> 変数 @code{elmo-default-nntp-user} の値。初期設定は @code{nil}。
ポート番号-> 変数 @code{elmo-default-nntp-port} の値。
             初期設定は 119。
@end example

@var{ユーザ名}が non-nil の場合は AUTHINFO による認証を行ないます。
フォルダ名の最後に @samp{!} が付いていると、SSL を利用してコネクションを張ります。
@samp{!!} だと、STARTTLS により SSL コネクションを張ります。
変数 @code{elmo-default-nntp-stream-type} の値が non-nil なら、@samp{!} を付け
なくても SSL を使います。@code{starttls} なら @samp{!!} を意味します。

(SSL を利用するには 本パッケージの @file{utils/ssl.el} をインストールす
る必要があります。なおかつ、OpenSSL に含まれる @command{openssl} にパスが
通っている必要があります。STARTTLS を利用するには、さらに、starttls パッ
ケージをインストールする必要があります。)

例:

@example
@group
-fj.rec.tv            -> ニュースグループ、@samp{fj.rec.tv}。
-fj.rec.tv@@newsserver -> @samp{newsserver} 上のニュースグループ、@samp{fj.rec.tv}。
@end group
@end example


@node MH Folder, Maildir Folder, NNTP Folder, Folders
@section MH フォルダ
@cindex MH Folder
@cindex @samp{+}
@pindex MH
@cindex Maildir

MH 形式(1ファイル1メール)で保存されたメールを読むためのフォルダです。

書式:

@example
@samp{+} @var{ディレクトリ名}
@end example

@var{ディレクトリ名}は、通常、変数 @code{elmo-localdir-folder-path}
(初期設定は @file{~/Mail}) からの相対パスですが、
@samp{/} や @samp{~} で始まっていれば絶対パスと見做します
(ドライブレターも同様です)。

メッセージが保存されるファイルのファイル名には、メッセージ番号が使用されます。

例:

@example
@group
+inbox         -> @file{~/Mail/inbox}
+from/teranisi -> @file{~/Mail/from/teranisi}
+~/test        -> @file{~/test}
@end group
@end example


@node Maildir Folder, News Spool Folder, MH Folder, Folders
@section Maildir フォルダ
@cindex Maildir Folder
@cindex @samp{.}
@pindex Maildir

Maildir 形式(1ファイル1メール)で保存されたメールを読むためのフォルダです。

書式:

@example
@samp{.} @var{ディレクトリ名}
@end example

@var{ディレクトリ名}は、通常、変数 @code{elmo-maildir-folder-path} (初期
設定は @file{~/Maildir}) からの相対パスですが、@samp{/} や @samp{~} で始
まっていれば絶対パスと見做します(ドライブレターも同様です)。

Maildir は、@file{cur}, @file{new}, @file{tmp} のディレクトリを含んでい
ます。実際にメッセージが含まれるのは、指定ディレクトリ直下の @file{cur} 
ディレクトリです。指定ディレクトリ直下の @file{new} ディレクトリに含まれ
るメッセージファイルは、アクセス時に @file{cur} ディレクトリへ移動されま
す。また、@file{tmp} ディレクトリに含まれ、36 時間以上アクセスが無いメッ
セージファイルは削除されます。

この動作は @uref{http://cr.yp.to/proto/maildir.html} に従っています。@*
(日本語訳は @uref{http://www.jp.qmail.org/q103/jman5/maildir.html})

例:

@example
@group
.              -> @file{~/Maildir}
.inbox         -> @file{~/Maildir/inbox}
.from/teranisi -> @file{~/Maildir/from/teranisi}
.~/test        -> @file{~/test}
@end group
@end example


@node News Spool Folder, Archive Folder, Maildir Folder, Folders
@section News Spool フォルダ
@cindex News spool Folder
@cindex @samp{=}
@pindex gnspool

Mew/IM が提唱する、ローカルに保存されたニュース記事を読み書きするための
フォルダです。NNTP 経由ではなく、@command{gnspool} などを使って取り寄せ
ているような場合にそのスプールを直接読む、という使い方も想定しています。

書式:

@example
@samp{=} @var{ディレクトリ名}
@end example

@var{ディレクトリ名}は、変数 @code{elmo-localnews-folder-path} (初期設定
は @file{~/News})で指定されたディレクトリのサブディレクトリを指します。
ディレクトリの区切りは @samp{.} でも可です。

例:

@example
@group
=fj/os/os2         -> @file{~/News/fj/os/os2}
=fj.os.bsd.freebsd -> @file{~/News/fj/os/bsd/freebsd}
@end group
@end example


@node Archive Folder, POP Folder, News Spool Folder, Folders
@section アーカイブフォルダ
@cindex Archive Folder
@cindex @samp{$}
@c @pindex ange-ftp

Info-ZIP や LHA などで圧縮されたアーカイブファイルを一つのフォルダとし
て扱います。

書式:

@example
@group
@samp{$} @var{ディレクトリ名} [@samp{;} @var{アーカイバタイプ} @samp{;} @var{プレフィクス}]
@end group
@end example

@var{ディレクトリ名}は、通常、変数 @code{elmo-archive-folder-path}
(初期設定は @file{~/Mail}) からの相対パスですが、
@samp{/} や @samp{~} で始まっていれば絶対パスと見做します
(ドライブレターも OK)。
ange-ftp 表記も ange-ftp, efs が使える環境では OK です。

フォルダの実体としての書庫ファイルは、上述のディレクトリにある
@code{elmo-archive-basename}(初期値は @file{elmo-archive})になります。
ただし、ディレクトリでなくファイルであった場合、そのファイルをフォルダ
と見做します。
拡張子はアーカイバ毎に自動的に(動的に)選択されます。

@var{アーカイバタイプ}を省略した場合、変数 @code{elmo-archive-default-type}
(初期設定は @code{zip})が参照されます。

@var{プレフィクス}は、書庫がディレクトリ構造を持っている場合に、そのディ
レクトリ部分を指定します。これは主にアーカイブサービスや @command{tar} +
@command{gzip} + @command{uuencode} によるダイジェスト配送を提供している 
ML の書庫ファイルを展開することなくマウントするためのもの、つまり閲覧時
の便宜のためのものです。

例えば ML サーバが fml の場合、@file{msend.tar.gz} は @file{spool/1} の
ような構造なので、@samp{spool} を指定します。

例:

@example
@group
$teranisi         -> @file{~/Mail/teranisi/elmo-archive.zip}
$bsd/freebsd;lha  -> @file{~/Mail/bsd/freebsd/elmo-archive.lzh}
$/foo@@server:~/bar;zoo     -> @samp{server} 上の @file{~/bar/elmo-archive.zoo}
$d:/msend.tar.gz;tgz;spool -> @file{d:/msend.tar.gz}
@end group
@end example

@menu
* Archiver::     対応(可能)アーカイバ
* Archive Tips:: TIPS
* Archive Vars:: カスタマイズ変数
@end menu


@node Archiver, Archive Tips, Archive Folder, Archive Folder
@subsection アーカイブフォルダが対応している(対応可能な)アーカイバ
@cindex Archiver
@pindex LHA
@pindex Info-ZIP
@pindex UNZIP
@pindex ZOO
@pindex RAR
@pindex TAR
@pindex GNU TAR

デフォルトで以下のアーカイバに対応します。

@example
@group
        LHA, Info-ZIP/UNZIP, ZOO, RAR  ;; フルスペック
        GNU TAR(@code{tgz}, @code{tar}) ;; デフォルトでは閲覧専用
@end group
@end example

複数ファイルを１プロセスで一つの書庫へまとめることができるアーカイバであ
れば、必要な変数を追加定義するだけで使える可能性があります(ARJ/UNARJ,
ARC は、手許で使ってないので定義していません。TAR は元ファイルを消す
(@code{mv}) ことができない点で真面目にサポートしていません)。複数ファイ
ルを一つにまとめられない点で @command{gzip}, @command{bzip},
@command{bzip2} は使えません。標準出力へ解凍できないアーカイバにも標準で
は対応しません。

@subsection 各 OS でのアーカイバに関する特記事項

フルスペックで読み書き可能なことが確認されているアーカイバは、以下のとお
りです(@samp{*} 印のものは処理速度などの点で最も適しているもの)。

@example
[OS/2]  Warp4.0J(w/o VoiceType)+Fx00505/emx0.9c(fix04)/PMMule,EmacsPM
         LHA  OS/2 version Rel.2.06b    Feb 18, 1998
        *UnZip 5.32 of 3 November 1997, by Info-ZIP.
        *Zip 2.2 (November 3rd 1997).
         Zoo archiver, zoo 2.1 $@asis{}Date: 91/07/09 02:10:34 $
         GNU tar version 1.10 - AK 2.58 (DBCS/SJIS) 981216(homy)版
         gzip 1.2.4 (18 Aug 93) + bzip2 パッチ(by 飯田さん)

[UN|X]  FreeBSD 2.2.7-RELEASE, Linux 2.0.30, Solaris2.6, HP-UX 9.07
         LHa for UNIX  V 1.14c
         UnZip 5.32 of 3 November 1997
         Zip 2.2 (November 3rd 1997)
         GNU tar 1.12 (1.11.x は不可)
         gzip 1.2.4 (18 Aug 93)

[Win32] Win.98/Meadow
         Lha32 version 1.28
         Zip 2.2
         UnZip 5.40
         GNU tar 1.11.8 + 1.5(WIN32)
         GZIP 1.2.4
         RAR 2.06
@end example

※ LHA に関する注意

OS/2 の場合、Peter Fitzsimmons 氏作の LH/2 には対応しません。平松版をお
使いください。
Win32 では DOS 版でなく、LHa32 でないと動かないとのことです。

※ GNU tar に関する注意

GNU tar は書庫からの削除に問題があるものが多いので、特に注意してください。
書庫が破壊される危険性が高いので、フルスペックで読み書きする前に
@option{--delete} @option{-f} を充分テストしておいてください。なお、上記
のものでは今のところ問題は報告されていません。


@node Archive Tips, Archive Vars, Archiver, Archive Folder
@subsection TIPS
@cindex Archive Tips

快適に移行するには、@code{wl-summary-archive} を実行する 
(@pxref{Archive}) か、Expire 機能 (@pxref{Expire}) と組み合わせると良い
でしょう。ただし、Expire 機能で作成したアーカイブフォルダを扱う場合は、
変数 @code{elmo-archive-treat-file} を non-nil に設定する必要があります。
なお、OS/2 上でのテストでは、Mule2.3(19.28) と Emacs20.2 では処理速度に
圧倒的な違いがあります。快適に使うには Emacs20 をお勧めします(re-search 
の速度の問題だとすると 19.3x 以上かどうかが境になるでしょう)。

また、一つの書庫ファイルに多くのファイルが含まれているとアーカイバ起動時
のオーバーヘッドが加速度的に増加する(特に LHA の場合)ため、150 通程度、
最大でも 200 通までにしておくと、ストレスなく読み書きできるでしょう。

なお、当然のことながら

@lisp
@group
(setq wl-fcc "$backup")
(setq wl-trash-folder "$trash;lha")
@end group
@end lisp

@noindent
も可能です@t{:-)}。


@node Archive Vars,  , Archive Tips, Archive Folder
@subsection アーカイブフォルダに関する変数
@cindex Archive variables

@table @code
@item elmo-archive-default-type
@vindex elmo-archive-default-type
デフォルトのアーカイバタイプをシンボルで指定します。初期値は @code{zip} です。

@item elmo-archive-@var{type}-method-alist
@vindex elmo-archive-TYPE-method-alist
アーカイバの @var{type} (実際には @samp{lha}, @samp{zip}, @samp{zoo},
@samp{tgz} などの文字列が入る)毎の、各種メソッドを記述します。連想リスト
の各要素は以下のようになります。

@example
@group
(@var{action} . (@var{exec-name} @var{options}))   ;; 外部プログラムとオプション
(@var{action} . @var{function})              ;; 関数
@end group
@end example

現在のところ、有効な @var{action} は

@example
@group
'ls, 'cat ('cat-headers)        ;; 最低限必要(閲覧のみ)
'mv ('mv-pipe), 'rm ('rm-pipe)  ;; 上とセットでフルスペック
'cp ('cp-pipe)                  ;;
@end group
@end example

@noindent
です。括弧内のものは、無くても構いません(あれば優先的に使います)。

@item elmo-archive-suffix-alist
@vindex elmo-archive-suffix-alist
アーカイバタイプ(シンボル) 毎に対応する書庫の拡張子を記述します。

@item elmo-archive-file-regexp-alist
@vindex elmo-archive-file-regexp-alist
書庫のリスト閲覧時の出力からファイル名を取得するための正規表現を、アー
カイバタイプ (シンボル) 毎に記述します。

@item elmo-archive-method-list
@vindex elmo-archive-method-list
有効にしたい @var{type} の elmo-archive-@var{type}-method-alist
(@var{type} はアーカイバのシンボル)をリストで記述します。

@item elmo-archive-lha-dos-compatible
@vindex elmo-archive-lha-dos-compatible
この変数が non-nil であれば DOS 版(吉崎氏オリジナル)の LHA とオプション
互換と見做します。初期値では OS/2 と Win32 のみ @code{t} です。

@item elmo-archive-cmdstr-max-length
@vindex elmo-archive-cmdstr-max-length
elmo-archive からは(標準状態では)アーカイバをシェルを経由せずに起動し
ます。elisp レベルでのコマンド文字列の総バイト数には制限はないとのことな
ので、多くのパラメータを一度に与えて動かせるかどうかは OS レベルの問題に
なります。これは、例えば数百通単位のメッセージを一度に消去できるかどうか
の問題、と読み替えてください。

OS/2 ではシェルを介さずに発行できるコマンド文字列は 8190 バイトまでなの
で、余裕を見てデフォルトを 8000 にしています。OS/2 REXX やシェルスクリプ
トなどを噛ます場合、シェルの実装に依存することに注意してください。

なお、アーカイバが処理対象となるファイルのリストを標準入力から受け付ける
(前述の @code{rm-pipe}, @code{mv-pipe}, @code{cat-headers} action
が指定されている)場合、1プロセスで処理することができます。
@end table


@node POP Folder, Multi Folder, Archive Folder, Folders
@section POP フォルダ
@cindex POP Folder
@cindex @samp{&}
@cindex RFC 1939
@cindex POP3
@cindex APOP

RFC 1939 で規定された POP3 を利用してメールを読むためのフォルダです。

書式:

@example
@group
@samp{&} [@var{ユーザ名}][[@samp{/} @var{認証法}][@samp{@@} @var{ホスト名}][@samp{:} @var{ポート番号}]][@samp{!}]
@end group
@end example

@var{認証法}には、@samp{user} (生パスワードを送信して認証) と
@samp{apop} (APOP で認証) の 2 種類があります。

default 値:

@example
ユーザ名   -> 変数 @code{elmo-default-pop3-user} の値。
              初期設定は 環境変数 @env{USER} か、@env{LOGNAME} か、
              @code{(user-login-name)} の返り値。
認証法     -> 変数 @code{elmo-default-pop3-authenticate-type} の値。
              初期設定は "user"。
ホスト名   -> 変数 @code{elmo-default-pop3-server} の値。
              初期設定は "localhost"。
ポート番号 -> 変数 @code{elmo-default-pop3-port} の値。
              初期設定は 110。
@end example

例:

@example
@group
&hoge@@localhost -> localhost へユーザ @samp{hoge} でアクセス。
&hoge@@popserver:109 -> ホスト @samp{popserver} のポート 109 番へ
                        ユーザ @samp{hoge} でアクセス。
@end group
@end example

APOP を利用するには、@file{md5.el} が必要です。(XEmacs では必要ありません。
) @file{md5.el} は 本パッケージの @file{utils/sasl/lisp/} か Emacs/W3 パッ
ケージ (@uref{http://www.cs.indiana.edu/elisp/w3/docs.html})、または LCD
archive から入手可能です(GPL2)。

フォルダ名の最後に @samp{!} が付いていると、SSL を利用してコネクションを張ります。
変数 @code{elmo-default-pop3-stream-type} の値が non-nil なら、@samp{!} を付け
なくても SSL を使います。@code{starttls} なら @samp{!!} を意味します。
(SSL を利用するには 本パッケージの @file{utils/ssl.el} をインストールする
必要があります。なおかつ、OpenSSL に含まれる @file{openssl} にパスが通っている
必要があります。
STARTTLS を利用するには、さらに、starttls パッケージをインストール
する必要があります。)

@node Multi Folder, Filter Folder, POP Folder, Folders
@section マルチフォルダ
@cindex Multi Folder
@cindex @samp{*}
@cindex Folder, Multiple
@cindex Folder, Marge

複数のフォルダを仮想的に一つに見えるようにするフォルダです。

書式:

@example
@group
@samp{*} @var{フォルダ1} [@samp{,} @var{フォルダ2}] @dots{} [@samp{,} @var{フォルダN}]
@end group
@end example

@samp{*} の後に、@samp{@var{フォルダ1},@var{フォルダ2},@dots{},@var{フォ
ルダN}}のように @samp{,} (コンマ)で区切って、一つに見えるようにしたいフォ
ルダ群を指定します。

例:

@example
@group
*-fj.editor.xemacs,-fj.editor.mule,-fj.editor.emacs
-> -fj.editor.xemacs, -fj.editor.mule, -fj.editor.emacs が一つの
   フォルダとして見える。

*+inbox,-fj.rec.tv,%inbox
-> +inbox, -fj.rec.tv, %inbox が一つのフォルダとして見える。
@end group
@end example


@node Filter Folder, Pipe Folder, Multi Folder, Folders
@section フィルタフォルダ
@cindex Filter Folder
@cindex @samp{/}
@cindex Folder, Filtering
@cindex Folder, Virtual

指定した条件を満たすメッセージのみを含む仮想的なフォルダです。

書式:

@example
@samp{/} @var{条件} @samp{/} @var{フォルダ}
@end example

@var{条件}には、以下を書けます。

@enumerate
@item
部分フィルタ： @samp{first:@var{数字}}, @samp{last:@var{数字}}

first: 全メッセージの先頭から@var{数字}の数だけメッセージを切り出します。
last: 全メッセージの末尾から@var{数字}の数だけメッセージを切り出します。

例:

@example
@group
/last:10/-fj.os.linux -> -fj.os.linux の最近の 10 個のメッセージ
                         のみを表示するフォルダ
/first:20/%inbox      -> %inbox の最初の 20 個を表示するフォルダ
@end group
@end example

@item
日付フィルタ： @samp{since:@var{日付}}, @samp{before:@var{日付}}

since: @var{日付}より最近のメッセージのみを取り出します。
before: @var{日付}より以前のメッセージのみを取り出します。

@var{日付}には以下が書けます。

@example
@group
yesterday ->  昨日
lastweek  ->  先週の今日
lastmonth ->  先月の今日
lastyear  ->  去年の今日
@var{数字}daysago -> @var{数字} 日前 (e.x. 3daysago)
@var{日}-@var{月の略名}-@var{年} ->  日付そのものの指定 (ex. 1-Nov-1998)
@end group
@end example

例:

@example
@group
/since:3daysago/+inbox → 最近３日間の +inbox 中のメッセージ。
/before:yesterday/+inbox → 昨日より以前の +inbox 中のメッセージ。
@end group
@end example

@item
フィールドフィルタ： @samp{@var{フィールド名}:@var{文字列}}

メッセージの@var{フィールド}の中身が@var{文字列}にマッチするメッセージを取り出します。
@var{フィールド名}、@var{文字列}に大文字小文字の区別はありません。

例:

@example
@group
/from:teranisi/+inbox -> +inbox で、From: フィールドに
                         "teranisi" という文字列を含むメッセージのフォルダ
/body:なんとか/%inbox -> %inbox で、本文に "なんとか"
                         という文字列を含むメッセージのフォルダ
@end group
@end example

@item
複合条件

条件部分が @samp{!} で始まると否定の条件指定となります。複数の条件を 
@samp{|} で区切って指定すると、OR 条件となります。同様に、@samp{&} で区
切ると AND 条件を指定できます(AND 条件は OR 条件よりも優先して評価されま
す)。さらに、@samp{(}, @samp{)}, で囲うと条件式をグルーピング指定できます。

また、条件の省略記法として @samp{tocc} が用意されています。
@samp{/tocc:xxxx/} は、@samp{/to:xxxx|cc:xxxx/} に展開されます。
@samp{/!tocc:xxxx/} は、@samp{/!to:xxxx&!cc:xxxx/} に展開されます。

例:

@example
@group
/from:teranisi&!to:teranisi/+inbox
                      -> +inbox で From: フィールドに "teranisi" を含み、
                        To: フィールドに "teranisi" を含まない
                        メッセージのフォルダ

/tocc:"Yuuichi Teranishi"/+inbox -> +inbox で、To: フィールドか
                         Cc: フィールドに "Yuuichi Teranishi" を含む
                         メッセージのフォルダ

/(from:yt|from:teranisi)&subject:報告/+inbox
                      -> +inbox で、From: フィールドが "yt" か
                        "teranisi" を含み、かつ Subject が "報告" を含む
                        メッセージのフォルダ
@end group
@end example
@end enumerate

@noindent
注意

文字列部分に、空白文字、@samp{"}、@samp{/}、@samp{)}、@samp{|}、@samp{&} 
を含みたい場合は、文字列全体を @samp{"} で括る必要があります。(@samp{"}
で括られている文字列中に @samp{"} を含む場合は、@samp{\} でエスケープす
る必要があります)。これらの文字を含まない場合でも @samp{"} で括るのは問
題ありません。

@noindent
応用編

@example
*%inbox,/from:teranisi/%inbox@@server
       -> %inbox、および、
          %inbox@@server の中で From フィールドが "teranisi" のメッセージ群、
          をいっぺんに表示するフォルダ。

/last:100//to:teranisi/*+inbox,%inbox
       -> +inbox と %inbox 中のメッセージのうち、
          To: フィールドが "teranisi" にマッチする
          メッセージの最近の 100 個を表示するフォルダ。

/from:hogehoge//last:20//tocc:teranisi/%#mh/inbox@@localhost
       -> %#mh/inbox@@localhost の中で、To か Cc に "teranisi" が含まれる
          メッセージの最近の 20 個のうち、From が "hogehoge" のものを
          表示するフォルダ。
@end example


@node Pipe Folder, Internal Folder, Filter Folder, Folders
@section パイプフォルダ
@cindex Pipe Folder
@cindex @samp{|}
@cindex Get Message
@cindex Download Message
@cindex Incorporate Message

フォルダ閲覧時に、自動的にメッセージの取り込みを実行するフォルダです。

書式:

@example
@samp{|} @var{取り込み元} @samp{|} @var{取り込み先}
@end example

フォルダ閲覧時、@var{取り込み元}から@var{取り込み先}へ自動的にメッセージ
が移動します。POP を利用してメッセージをローカルにダウンロードして閲覧し
たい場合は、

@example
|&username@@popserver|+inbox
@end example

@noindent
のように指定すると、フォルダの表示を更新するときに
@samp{&username@@popserver} から @samp{+inbox} へ、メッセージが自動的に
取り込まれます。

例:

@example
@group
%inbox|%myinbox   -> %inbox から %myinbox へメッセージを取り込んで
                       閲覧するフォルダ。
*&user@@popserver1,&user@@popserver2|+inbox
  -> &user@@popserver1 と &user@@popserver2 から +inbox へメッセージを
  取り込んで閲覧するフォルダ。
@end group
@end example

メッセージが移動した後、フック @code{elmo-pipe-drained-hook} が呼ばれ
ますので、ダウンロード後に実行したい関数を登録しておくと良いでしょう。

@node Internal Folder,  , Pipe Folder, Folders
@section 内部フォルダ
@cindex Internal Folder
@cindex @samp{'}
@cindex Folder, @samp{$} mark
@cindex Cache

Wanderlust の内部で保持されたメッセージを閲覧するためのフォルダです。

書式:

@example
@group
'mark
@r{もしくは}
'cache/00〜1F
@end group
@end example

@samp{'mark} というフォルダは、後述の重要マーク(@samp{$})がついたメッセー
ジを扱う特別な仮想フォルダです。重要マークをメッセージにつけておいて、
あとから見直したいときなどに便利です。

このフォルダでメッセージを削除すると、そのメッセージについていた 
@samp{$}マークが削除されます。また、このフォルダにメッセージを追加すると、
そのメッセージには @samp{$} マークが付けられます。

(現在、@samp{'mark} フォルダからは IMAP サーバ上のマークを消せません。
IMAP フォルダで直接消した場合だけサーバ上のマークが消えます。)

@samp{'cache/00} 〜 @samp{'cache/1F} はネットワーク経由で読んだメッセー
ジのキャッシュにアクセスするためのフォルダです。00 〜 1F には、キャッシュ
ディレクトリ (@file{~/.elmo/cache})のサブディレクトリ名を指定します。


@node Folder, Summary, Folders, Top
@chapter フォルダモード
@cindex Folder

起動して最初に現れるのがフォルダモード(フォルダの一覧表示)です。

フォルダモードでは、読みたいフォルダの選択、購読フォルダの編集を行ないます。

@menu
* Selecting Folder:: 読みたいフォルダの選択
* Folder Manager::   購読フォルダの編集
@end menu


@node Selecting Folder, Folder Manager, Folder, Folder
@section 読みたいフォルダの選択
@cindex Selecting Folder

@subsection 使用方法(TIPS)

@subsubsection 新規数、未読数のチェック

フォルダモードの見ためはこんな感じになるはずです。
(XEmacs ではもうちょっとかっこよく見えるはずです @t{;-)})

@example
@group
[-]Desktop:14186/35580/67263
   受信箱:3/10/10
   ゴミ箱:2/7/10
   草稿:0/0/3
   送信済み:0/9/348
   [-]Emacsen:0/34/4837
     Wanderlust ML:0/0/558
     ELIPS ML:0/0/626
     tm (日本語) ML:0/0/821
     XEmacs ベータ:0/29/255
     Mew:0/0/998
     Mule-Win32:0/0/1491
     fj の Emacsen:0/5/88
@end group
@end example

各行に表示されるのは、

@example
@var{フォルダ名}:@var{未同期}(@var{新規})@var{数}/@var{未読数}/@var{総数}
@end example

@noindent
です。
チェックしたいフォルダの上にカーソルを合わせて @kbd{s} を押すと、
これらの数が最新のものに更新されます。
たくさん新規メッセージがあると色が変わります。

フォルダモード全体は @samp{Desktop} というグループフォルダになります。
グループフォルダはリターンキーで開閉できます。
グループフォルダに対する操作は、そのグループフォルダに属する全ての子
フォルダに対する一括した操作として扱われます。
例えば、@samp{[-]Emacsen} のところにカーソルを合わせて @kbd{s} を押すと、
これに含まれる６つのフォルダの表示を最新のものに更新します。

@subsubsection フォルダの選択
フォルダの行にカーソルを置いてリターン(スペース)キーを押すとそのフォルダの内容を表示するサマリモードに移動します。

このとき、変数 @code{wl-stay-folder-window} が non-nil ならサマリに移動したときにフォルダバッファの右にサマリのバッファが現れます。

@subsection キーバインド

フォルダモードでのフォルダ選択に関するコマンドのキーバインドは以下の通りです。

@table @kbd
@item @key{SPC}
@itemx @key{RET}
@kindex @key{SPC} (Folder)
@kindex @key{RET} (Folder)
@findex wl-folder-jump-to-current-entity
現在カーソルがある行のフォルダのサマリ表示へ移動します。
グループフォルダにカーソルがある場合は、グループフォルダの開閉を行ないます。
アクセスグループでは、prefix argument つきでグループフォルダを開くと、
内容を最新のリストに更新します。
アクセスグループが階層構造になっている場合は再帰的に更新します。
(@code{wl-folder-jump-to-current-entity})

@item M-@key{RET}
@kindex M-@key{RET} (Folder)
@findex wl-folder-update-recursive-current-entity
現在カーソルがあるアクセスグループの内容を最新のリストに更新します。
アクセスグループが階層構造になっている場合は再帰的に更新します。
(@code{wl-folder-update-recursive-current-entity})

@item w
@kindex w (Folder)
@findex wl-draft
新規ドラフトを用意します。
(@code{wl-draft})

@item W
@kindex W (Folder)
@findex wl-folder-write-current-folder
現在カーソルがあるフォルダが NNTP フォルダなら、@samp{Newsgroups:} フィー
ルドを補ってドラフトを用意します。メーリングリストのリファイル先なら、メー
リングリストのアドレスを推測して、@samp{To:} フィールドを補ってドラフト
を用意します。変数 @code{wl-subscribed-mailing-list} を設定しておく必要
があります。
(@code{wl-folder-write-current-folder})

@item C-c C-o
@kindex C-c C-o (Folder)
@findex wl-jump-to-draft-buffer
ドラフトバッファがあれば移動します。 複数のドラフトバッファが存在する場合は、
次々と切り替えていきます。また、prefix argument をつけることにより、
バッファが存在していない場合は、ドラフトフォルダからファイルを(存在すれば)
読み込みます。
(@code{wl-jump-to-draft-buffer})

@item s
@kindex s (Folder)
@findex wl-folder-check-current-entity
現在カーソルがある行のフォルダの未同期メッセージ数を更新します。
(@code{wl-folder-check-current-entity})

@item S
@kindex S (Folder)
@findex wl-folder-sync-current-entity
現在カーソルがある行のフォルダのサマリを更新します。
(@code{wl-folder-sync-current-entity})

@item r s
@kindex r s (Folder)
@findex wl-folder-check-region
リージョンにあるフォルダの未同期メッセージ数を更新します。
(@code{wl-folder-check-region})

@item r S
@kindex r S (Folder)
@findex wl-folder-sync-region
リージョンにあるフォルダのサマリを更新します。
(@code{wl-folder-sync-region})

@item Z
@kindex Z (Folder)
@findex wl-status-update
@file{~/.addresses} 等の状態を最新のものに更新します。
(@code{wl-status-update})

@item P
@kindex P (Folder)
@findex wl-folder-prev-unread
ひとつ上の未読があるフォルダ(もしくはグループ)に移動します。
(@code{wl-folder-prev-unread})

@item N
@kindex N (Folder)
ひとつ下の未読があるフォルダ(もしくはグループ)に移動します。
(@code{wl-folder-next-unread})

@item p
@kindex p (Folder)
ひとつ上のフォルダへ移動します。
(@code{wl-folder-prev-entity})

@item n
@kindex n (Folder)
ひとつ下のフォルダへ移動します。
(@code{wl-folder-next-entity})

@item J
@kindex J (Folder)
指定したフォルダへカーソルを移動します。
(@code{wl-folder-jump-folder})

@item I
@kindex I (Folder)
@findex wl-folder-prefetch-current-entity
現在カーソルがある行のフォルダに対して、
@code{wl-summary-incorporate}により、
新着記事をプリフェッチします。
グループフォルダにカーソルがある場合は、
再帰的に実行します。
(@code{wl-folder-prefetch-current-entity})

@item c
@kindex c (Folder)
@findex wl-folder-mark-as-read-all-current-entity
現在カーソルがある行のフォルダの
メッセージを全て読んだことにします。
グループフォルダにカーソルがある場合は、
再帰的に実行します。
(@code{wl-folder-mark-as-read-all-current-entity})

@item f
@kindex f (Folder)
@findex wl-folder-goto-first-unread-folder
最初の未読があるフォルダのサマリへ移動します。
(@code{wl-folder-goto-first-unread-folder})

@item E
@kindex E (Folder)
@findex wl-folder-empty-trash
ゴミ箱を空にします。
(@code{wl-folder-empty-trash})

@item o
@kindex o (Folder)
@findex wl-folder-open-all-unread-folder
全ての未読があるフォルダが含まれるグループを開きます。
(@code{wl-folder-open-all-unread-folder})

@item /
@kindex / (Folder)
@findex wl-folder-open-close
カーソル行のグループの開閉をトグルします。
(@code{wl-thread-open-close})

@item [
@kindex [ (Folder)
全てのグループを開きます。
(@code{wl-folder-open-all})

@item ]
@kindex ] (Folder)
全てのグループを閉じます。
(@code{wl-folder-close-all})

@item q
@kindex q (Folder)
Wanderlust を終了します。
(@code{wl-exit})

@item z
@kindex z (Folder)
Wanderlust をサスペンドします。
(@code{wl-folder-suspend})

@item M-s
@itemx C-x C-s
@kindex M-s (Folder)
@kindex C-x C-s (Folder)
現在のフォルダの状態をセーブします。
(@code{wl-save})

@item M-t
@kindex M-t (Folder)
Wanderlust のオフラインモード/オンラインモードをトグルします。
(@code{wl-toggle-plugged})

@item C-t
@kindex C-t (Folder)
Wanderlust のサーバ・ポート別のオフライン/オンラインを変更します。
(@code{wl-plugged-change})
@end table

@subsection カスタマイズ変数

@table @code
@item wl-folders-file
@vindex wl-folders-file
初期設定は @file{~/.folders}。
購読するフォルダを記述するファイルの名前です。

@item wl-folder-info-save
@vindex wl-folder-info-save
初期設定は @code{t}。
次に立ち上げ直したときに前回の未読数などの結果を使い回しするかどうか、です。

@item wl-stay-folder-window
@vindex wl-stay-folder-window
初期設定は @code{nil}。
Non-nil ならサマリに移動したときにフォルダバッファの右にサマリのバッファが現れます。

@item wl-folder-window-width
@vindex wl-folder-window-width
初期設定は 20。
@code{wl-stay-folder-window} が non-nil のときに残すフォルダバッファのウィンドウの幅です。

@item wl-folder-many-unsync-threshold
@vindex wl-folder-many-unsync-threshold
初期設定は 70。
未同期数がたくさんかどうかの閾値。この値を越えると色が変わります。

@item wl-highlight-folder-by-numbers
@vindex wl-highlight-folder-by-numbers
フォルダバッファにおける各行のハイライトの形式を指定します。初期値は
@code{t} で、行全体にメッセージ数に応じた色を付けます。@code{nil} ではフォ
ルダの状態に応じた色を付けます。また、数字 (例えば 1) にしておくと、メッ
セージ数とフォルダの状態の両方に応じたハイライトが行なわれます。

@item wl-folder-desktop-name
@vindex wl-folder-desktop-name
初期設定は @samp{Desktop}。
トップのグループの名前です。

@item wl-folder-petname-alist
@vindex wl-folder-petname-alist
初期設定は @code{nil}。
フォルダの本名とあだ名の cons のリストです。

@item wl-folder-access-subscribe-alist
@vindex wl-folder-access-subscribe-alist
初期設定は @code{nil}。
アクセスグループのリスト取得で自動的に subscribe、もしくは unsubscribe
するフォルダを指定します。

リストの各要素は

@example
(@var{アクセスグループの正規表現} . (@var{購読フラグ} @var{フォルダの正規表現} @dots{}))
@end example

@noindent
となっています。@var{購読フラグ}が non-nil の場合は@var{フォルダの正規表
現}にマッチしたフォルダのみ表示し、@var{購読フラグ}が @code{nil} の場合
は@var{フォルダの正規表現}にマッチしたフォルダは表示されなくなります。た
だし、@var{購読フラグ}が non-nil でも既に unsubscribe されているフォルダ
は表示されません。また、@var{フォルダの正規表現}は複数個記述できます。

例:

@lisp
@group
'(("^-fj$" . (t   "^-fj\\.\\(comp\\|editor\\|mail\\)"
                  "^-fj\\.\\(net\\|news\\|os\\|rec\\)"))
  ("^-$" . (t   "^-\\(fj\\|tnn\\|japan\\|gnu\\|comp\\)"))
  ("^\\+ml$" . (nil "^\\+ml$" "^\\+ml/tmp")))
@end group
@end lisp

@item wl-folder-hierarchy-access-folders
@vindex wl-folder-hierarchy-access-folders
初期設定は以下のリスト。

@lisp
@group
("-" "-alt")
@end group
@end lisp

@noindent
階層構造に作成するアクセスグループフォルダのリスト。

例えば、以下のように 
@code{wl-folder-hierarchy-access-folders} を設定すると、

@lisp
@group
(setq wl-folder-hierarchy-access-folders
     '("-" "-alt" "-japan" "-comp" "-comp.unix"))
@end group
@end lisp

@noindent
次のような階層構造になったアクセスグループが作られます。

@example
@group
   [-]-:912/912/3011
     [-]-fj:674/674/1314
       -fj.comp.announce:0/0/2
       -fj.comp.dev.cdrom:0/0/0
       @dots{}
     [+]-japan:238/238/1688
     [-]-comp:0/0/4
       [-]-comp.unix:0/0/0
         -comp.unix.admin:0/0/0
         -comp.unix.dos-under-unix:0/0/0
         -comp.unix.programmer:0/0/0
         [-]-comp.unix.bsd:0/0/23
           -comp.unix.bsd.freebsd.announce:0/0/0
     @dots{}
@end group
@end example

ただし、@samp{-} を開いただけでは1つ目の階層
(@samp{-fj}, @samp{-japan}, @samp{-tnn}, @dots{}) が作られるだけで、
2つ目の階層(@samp{-fj.comp.announce}, @dots{}, @samp{-comp.unix}, @dots{})
以下のフォルダはあらためてそのグループを開くまで作られません。
@end table


@node Folder Manager,  , Selecting Folder, Folder
@section 購読フォルダの編集
@cindex Folder Manager
@cindex Folder, Edit
@cindex Folder, Subscribe
@cindex Folder, Unsubscribe

前に述べた通り、購読するフォルダは @file{~/.folders} に保持されますが、
@file{~/.folders} を直接編集するまでもなく、フォルダモードからもフォルダ
の追加/削除/グループの定義などの編集が可能となっています。


@subsection 使用方法(TIPS)

@subsubsection フォルダの追加

@kbd{m a} で新規に購読するフォルダを追加します。
@kbd{m g} でグループが追加されます。
このグループにフォルダを追加するには、まずこのグループを開いた状態にします。
そして次の行で挿入のコマンドを実行するとグループに追加されるようになります。

@subsubsection フォルダの編集

@kbd{C-k} でカット(切り取り)、@kbd{C-y} でペースト(張り付け)ができます。
つまり、通常の文書編集の行編集と同じようにフォルダの位置を変更可能です。

@subsubsection マルチフォルダの作成方法

@enumerate
@item
@kbd{m q}で @code{wl-fldmgr-cut-entity-list} を消します。
@item
@kbd{C-k} でフォルダを切り取り、または @kbd{M-c} でフォルダをコピーします。
@item
@kbd{m m} を実行するとマルチフォルダが作成されます。
@end enumerate

@subsubsection あだ名(petname)やフィルタの削除

あだ名やフィルタの設定では、ミニバッファで ``''(@var{NULL}) を入力すると
あだ名やフィルタが削除されます。

@subsubsection 空グループへの追加

@kbd{m g} などでグループを作成した後、このグループにフォルダを追加するに
は、まずこのグループを開いた状態にします。そして次の行で追加や挿入のコ
マンドを実行するとグループに追加されます。閉じた状態ではそのグループと
同じレベルに挿入されます。言葉で説明するのは難しいので実際に実行してみ
ると良いでしょう。つまり、カーソル位置より上にあるグループの開閉状態に
より挿入される位置が異なるのです。

@subsubsection セーブ時の言語コード

@code{wl-folders-file} をセーブするときは @code{wl-mime-charset} の言語
コードになります。

@subsubsection フィルタフォルダの作成

フィルタフォルダの作成コマンドはカーソル上のフォルダをフィルタ付きに変更
します。もしカーソル上のフォルダを残したまま新たにフィルタフォルダを作成
する場合は、まずコピーしてからフィルタを作成し、その後コピーしたフォルダ
を挿入します。
フィルタフォルダ作成時には一度に複数の(多段の)フィルタが指定できます。
``''(@var{NULL})を入力すれば、先頭のフィルタは全て削除されます。

@subsubsection フォルダの並び替え

グループ内のフォルダを並び替えする際、@code{wl-fldmgr-sort-func} に指定
された関数を用います。初期設定では @code{wl-fldmgr-sort-standard} が指定
されており、これはアルファベット順に並び替えグループは最初にする関数です。
並び替えは指定したグループのみ行い、下位のグループまで並び替えはしません。
つまり、再帰的には行いません。

@subsubsection アクセスグループ内の表示しないフォルダの指定

アクセスグループを開くと通常全てのフォルダが表示されますが、
表示しないフォルダを指定することもできます。
以下の操作はアクセスグループ内でのみ有効です。

コマンド @code{wl-fldmgr-unsubscribe} (@kbd{u}) はカーソル位置のフォルダの
表示(subscribe)・非表示(unsubscribe)設定をトグルします。それに対して
@code{wl-fldmgr-unsubscribe-region} (@kbd{U}) は指定範囲のフォルダを非表示に
します。

@code{wl-fldmgr-unsubscribe} はトグルしますが、
@code{wl-fldmgr-unsubscribe-region} だと通常トグルにならないことに注意下
さい。リージョンの場合トグルにするよりどちらかに設定させる方が使いやすい
と考えこのようにしています。
しかし、上記2つの関数とも prefix argument の値が正ならフォルダを非表示、
負なら表示、0ならトグルさせます。

またキーには割り当てていませんが、フォルダを表示に設定するだけの
@code{wl-fldmgr-subscribe} と @code{wl-fldmgr-subscribe-region} も用意して
います。使用する場合は適当なキーに割り当ててください。

さらに、アクセスグループ内で @code{wl-fldmgr-cut} と 
@code{wl-fldmgr-cut-region} を実行すると、それぞれ 
@code{wl-fldmgr-unsubscribe} と @code{wl-fldmgr-unsubscribe-region} を実
行したのと同じ効果が得られます。違いは cut の場合は画面からも消去するこ
とです。

@subsubsection アクセスグループ内の操作

アクセスグループ内でも削除や挿入が行えます。といっても実際には 
unsubscribe するかどうかを設定しているだけですので、当然そのアクセスグルー
プに属しているフォルダのみ変更が可能です。つまり、挿入は subscribe し、
削除は unsubscribe したことと同じになります。
@footnote{現在は、指定範囲を表示しないフォルダにするとき、
指定範囲の削除を行った方が高速です。}
従って、Wanderlust 以外でフォルダが変更された場合、
そのフォルダを実際に追加したり削除したりするには、
アクセスグループを @kbd{C-u @key{RET}} で更新してください。
@xref{Selecting Folder}.

また、挿入/削除/並び替えなどを行ったあとのフォルダの並びは保持されます。
もし @code{wl-force-fetch-folders} を設定するか、
@kbd{C-u @key{RET}} でグループを開くかすると、
存在しないフォルダは削除され、
新たに作成されたフォルダは先頭に追加されます。

@subsection キーバインド
@cindex Keybind, Folder Mode
@cindex Keybind, Folder Buffer

フォルダの編集に関する主なコマンドのキーバインドは以下の通りです。一応 
@kbd{m} で始まるキーに全て割り当てて、主な機能のみ1ストロークで使用できるよ
うにしています。

@table @kbd
@item m a
@kindex m a (Folder)
@findex wl-fldmgr-add
フォルダを作成します。
(@code{wl-fldmgr-add})

@item +
@itemx m g
@kindex + (Folder)
@kindex m g (Folder)
@findex wl-fldmgr-make-group
グループを作成します。
(@code{wl-fldmgr-make-group})

@itemx m A
@kindex m A (Folder)
@findex wl-fldmgr-make-access-group
アクセスグループを作成します。
(@code{wl-fldmgr-make-access-group})

@item m d
@kindex m d (Folder)
@findex wl-fldmgr-delete
フォルダの実体とその msgdb を削除します。
nntp などの削除できないフォルダでは msgdb のみ削除します。
(@code{wl-fldmgr-delete})

@item R
@itemx m R
@kindex R (Folder)
@kindex m R (Folder)
@findex wl-fldmgr-rename
フォルダ、もしくはグループ名を変更します。
フォルダを変更する場合は msgdb のパスも変更します。
(@code{wl-fldmgr-rename})

@item *
@itemx m m
@kindex * (Folder)
@kindex m m(Folder)
@findex wl-fldmgr-make-multi
マルチフォルダを作成します (コピー、削除されたフォルダを結合します)。
(@code{wl-fldmgr-make-multi})

@item |
@itemx m f
@kindex | (Folder)
@kindex m f (Folder)
@findex wl-fldmgr-make-filter
フィルタフォルダを作成します (選択したフォルダに filter を付けます)。
(@code{wl-fldmgr-make-filter})

@item M-c
@itemx m c
@kindex M-c (Folder)
@kindex m c (Folder)
@findex wl-fldmgr-copy
フォルダをコピーする (グループはコピー不可)。
(@code{wl-fldmgr-copy})

@item M-w
@itemx m W
@kindex M-w (Folder)
@kindex m W (Folder)
@findex wl-fldmgr-copy-region
指定範囲のフォルダのコピー。
(@code{wl-fldmgr-copy-region})

@item C-k
@itemx m k
@kindex C-k (Folder)
@kindex m k (Folder)
@findex wl-fldmgr-cut
フォルダの削除 (切り取り)。フォルダの実体は削除しません。
(@code{wl-fldmgr-cut})

@item C-w
@itemx m C-w
@kindex C-w (Folder)
@kindex m C-w (Folder)
@findex wl-fldmgr-cut-region
指定範囲のフォルダの削除 (切り取り)。
(@code{wl-fldmgr-cut-region})

@item C-y
@itemx m y
@kindex C-y (Folder)
@kindex m y (Folder)
@findex wl-fldmgr-yank
コピー、削除したフォルダ(cut-list)を挿入する(ペースト、貼り付け)。
(@code{wl-fldmgr-yank})

@item m p
@kindex m p (Folder)
@findex wl-fldmgr-set-petname
フォルダにあだ名(petname)を付ける。
(@code{wl-fldmgr-set-petname})

@item m q
@kindex m q (Folder)
@findex wl-fldmgr-clear-cut-entity-list
コピー、削除したフォルダ情報(cut-list)を消す。
(@code{wl-fldmgr-clear-cut-entity-list})

@item m s
@kindex m s (Folder)
@findex wl-fldmgr-sort
グループ内のフォルダを並び替える (そのグループ階層のみ)。
(@code{wl-fldmgr-sort})

@item m C-s
@kindex m C-s (Folder)
@findex wl-fldmgr-save
wl-folders-file にセーブする。
(@code{wl-fldmgr-save})
@end table

[以下の操作はアクセスグループに対してのみ有効]

@table @kbd
@item u
@itemx m u
@kindex u (Folder)
@kindex m u (Folder)
@findex wl-fldmgr-unsubscribe
フォルダの表示/非表示の設定。
(@code{wl-fldmgr-unsubscribe})

@item U
@itemx r u
@kindex U (Folder)
@kindex r u (Folder)
@findex wl-fldmgr-unsubscribe-region
指定範囲にあるフォルダの表示/非表示の設定。
(@code{wl-fldmgr-unsubscribe-region})

@item l
@itemx m l
@kindex l (Folder)
@kindex m l (Folder)
@findex wl-fldmgr-access-display-normal
現在有効なフォルダのみ一覧表示する。
(@code{wl-fldmgr-access-display-normal})

@item L
@itemx m L
@kindex L (Folder)
@kindex m L (Folder)
@findex wl-fldmgr-access-display-all
非表示のフォルダも含めて全てのフォルダを一覧表示する。
(@code{wl-fldmgr-access-display-all})
@end table


@subsection カスタマイズ変数

@table @code
@item  wl-interactive-save-folders
@vindex wl-interactive-save-folders
初期設定は @code{t}。フォルダ変更の操作を行った場合、Wanderlust 終了時も
しくは Emacs 終了時にセーブするか確認を行います。@code{nil} だと確認なし
でセーブします。

@item wl-fldmgr-make-backup
@vindex wl-fldmgr-make-backup
初期設定は @code{t}。Non-nil なら、セーブする際に @file{~/.folders.bak} 
にバックアップを取ります。

@item wl-fldmgr-sort-func
@vindex wl-fldmgr-sort-func
初期設定は @code{wl-fldmgr-sort-standard}。sort 時に使用する関数を指定し
ます。初期設定は、アルファベット順に並べグループは最初にする関数です。
(@code{wl-fldmgr-sort-group-first} が non-nil の場合)。

@item wl-fldmgr-sort-group-first
@vindex wl-fldmgr-sort-group-first
初期設定は @code{t}。
Non-nil なら、@code{wl-fldmgr-sort-standard} で並び替えるときグループを最
初にする。@code{nil} なら、グループも含めてアルファベット順に並び替えます。

@item wl-folder-check-async
@vindex wl-folder-check-async
初期設定は @code{t}。
Non-nil の場合、フォルダの新規メッセージ数のチェックを非同期に行ないます。
ニュースグループのチェックが大幅に速くなります。

@item wl-folder-check-fast
@vindex wl-folder-check-fast
初期設定は @code{nil}。
Non-nil の場合、フォルダの新規メッセージ数のチェックを行うたびに
フォルダの表示を更新しません。

@item wl-folder-notify-deleted
@vindex wl-folder-notify-deleted
初期設定は @code{nil}。
@c  nil means?
Non-nil ならメッセージが削除されたときにフォルダモードで未読数をチェック
すると負の値が表示されます。値が @code{sync} ならば、メッセージが削除さ
れていたときにフォルダの内容と同期を取ります。
@end table

@subsection その他

フォルダの編集に関して、以下のような仕掛けや制限があります。

@enumerate
@item
削除やコピーを行うと、スタックのように変数 
@code{wl-fldmgr-cut-entity-list} にたまっていきます。ペースト(張り付け)
は削除やコピーした単位で(リージョンでコピーしたなら、そのリージョン内の
フォルダが一度に) 吐き出されます。

@item
@samp{Desktop} グループの削除、コピーはできません。
また、@samp{Desktop} 外への挿入はできません。

@item
グループのコピーはできません。

@item
アクセスグループの操作はアクセスグループに属しているフォルダのみ対象
となります。

@item
全体で同じ名前のグループは複数作れません。

@item
同じグループ(階層)に同じフォルダは作れません。階層が違えば複数作れます。
異なるフォルダに同じあだ名は指定できません。
@end enumerate


@node Summary, Message, Folder, Top
@chapter サマリモード

フォルダモードで読みたいフォルダを選択すると、サマリモードに移動します。
サマリモードにはメッセージの一覧が表示されます。

@menu
* Usage of Summary mode::       使用方法
* Thread Operations::           スレッドの操作
* Cache::                       キャッシュと先読み機能
* Auto Refile::                 自動リファイル
* Sticky Summary::              スティッキーサマリ
* Key Bindings of Summary::     キーバインド
* Variables of Summary::        カスタマイズ変数
@end menu


@node Usage of Summary mode, Thread Operations, Summary, Summary
@section 使用方法(TIPS)

@subsection サマリの表示内容

サマリモードには、以下のようにメッセージの一覧が表示されます。

@example
@group
  377  09/16(水)11:57 [+1: 北目さん       ] Bug?
  381  09/17(木)00:16 [+3: 奥西さん       ] elmo-lha.el -- LHA interface
  384  09/17(木)01:32 [+1: てらにし       ] wl-0.6.2
  389 N09/18(金)01:07 [+2: てらにし       ] wl-0.6.3
@end group
@end example

各メッセージは、一行に

@example
@var{メッセージ番号}、@var{一時的マーク}、@var{永続的マーク}、@var{日付け}、@var{差出人}、@var{サブジェクト}
@end example

@noindent
の順に表示されます。現在のバージョンでは表示を変更することはできません。

@var{メッセージ番号}はそのフォルダ中にあるメッセージにつけられた番号です。
News フォルダでは article 番号、IMAP フォルダでは UID、MH フォルダではファ
イル名です。

@var{一時的マーク}/@var{永続的マーク}については、あとで詳しく説明します。

@var{日付け}は、@samp{@var{月}/@var{日}(@var{曜日})@var{時}:@var{分}} の
ように表示されます。曜日を日本語ではなく英語表記したい場合は、
@code{wl-summary-weekday-name-lang} を @samp{en} に設定してください。

@var{差出人}は、スレッドの深さ分インデントされて表示されます。@var{差出
人}は、アドレス帳にあだ名があればあだ名で表示します。あだ名表記を止めた
い場合は、@code{wl-use-petname} を @code{nil} に設定してください。

@var{差出人}の部分にある @samp{+2} のような数字の表示は、そのメッセージ
に対する返事の数を表します。例えば @samp{+2} なら 2 通あったことを示しま
す。

@var{サブジェクト}は、メッセージの @samp{Subject:} フィールドです。同じ
スレッドで、かつ親と同じ @samp{Subject:} を持つメッセージなら表示されま
せん。メーリングリストなどの通し番号表示は無視されます。 @samp{Subject:} 
が無い場合、変数 @code{wl-summary-no-subject-message} の内容が表示されま
す。

@subsection 一時的マーク
@cindex Mark, Temporary

一時的マークは、メッセージを操作するためマークです。

一時的マークには、@samp{*}, @samp{D}, @samp{o}, @samp{O} があります。

@table @samp
@item *
まとめ処理用マークです。
@kbd{m} で始まるコマンドで @samp{*}マークのついたメッセージ対して一括した処理
ができます。

@item D
削除するメッセージに付くマークです。@kbd{d} を押すと付きます。

@item o
リファイルするメッセージに付くマークです。
@kbd{o}を押すと、リファイル先を聞いて来るので答えると、リファイル先のフォルダ情報とともに付けられます。

@item O
コピーするメッセージに付くマークです。
@kbd{O}を押すと、コピー先を聞いて来るので答えると、コピー先のフォルダ情報とともに付けられます。
@end table

@kbd{x} を押すことにより、@samp{D}, @samp{o}, @samp{O} のマークがつけられたメッセージの削除、リファイル、コピーが実行されます。

@subsection 永続的マーク

永続的マークは、メッセージの状態を示すマークです。

永続的マークには、@samp{N}, @samp{U}, @samp{!}, @samp{u}, @samp{$} があります。


@table @samp
@item N
新規メッセージに付きます。
@item U
未読メッセージに付きます。
@item !
未読メッセージに付きます。@samp{U} との違いは、@samp{!} のメッセージは
キャッシュされていることです。
@item u
既読メッセージに付きます。マーク無しとの違いは、@samp{u} のメッセージは
キャッシュされていないことです。
@item $
@kbd{$} キーを押すと、@samp{$} マークが付きます。このマークは Emacs を終了
しても保存されるため、あとで返事を書きたい場合など、覚えておきたい重要な
メッセージに付けておくと便利です。@samp{$} の付いたメッセージは、ニュー
ス記事やサーバ上の IMAP フォルダのメッセージが expire されるなどして消え
た場合も残ります。
@item なし
既読メッセージにはマークが存在しません。
@end table

@samp{N}, @samp{U}, @samp{u} は、そのメッセージがキャッシュされていない
ことを示しています。これらのマークが付いていない場合、つまり、そのメッ
セージがキャッシュされている場合は、ネットワークに接続されていなくても
IMAP フォルダのメッセージや NNTP フォルダのニュース記事を読むことができ
ます。

@subsection メッセージの読み進めかた

基本的にスペースキーを押すだけで読み進めることができます。
サマリの表示内容をフォルダの最新の状態に合わせる(同期する)には、
@kbd{s} を押します。

@kbd{N} で次の未読、@kbd{n} で次のメッセージを表示します。
@kbd{j} を押すと現在表示中のメッセージのバッファに移動します。
マルチパートの操作はメッセージバッファに移動してから行います。
@xref{Message}.

@subsection メッセージ番号を詰める
サマリで @kbd{M-x wl-summary-pack-number} とすることで
メッセージ番号を詰めることができます。ただし対応しているフォルダの種類は
MH Folder, News Spool Folder, Maildir Folder のみです。


@node Thread Operations, Cache, Usage of Summary mode, Summary
@section スレッドの操作

例えば、

@example
  384  09/17(木)01:32 [+1: てらにし       ] wl-0.6.2
@end example

@noindent
は一つのスレッド(一つの話題の流れ)を示しています。
この行で、@kbd{/} を押すとこのスレッドが開かれ、次のような表示になります。

@example
@group
  384  09/17(木)01:32 [ てらにし          ] wl-0.6.2
  388  09/17(木)22:34 └[ 村田さん          ]
@end group
@end example

(388 番のメッセージは 384 番のメッセージに対する返事です。)
もう一回 @kbd{/} を押すと、スレッドを閉じます。
prefix argument つきで @kbd{/} を押すと、全ての子スレッドを開きます。

@kbd{[} でサマリの全てのスレッドを開き、@kbd{]}で全てのスレッドを閉じま
す。

@kbd{t} から始まるコマンドで、そのスレッドに属するメッセージに対して一括
して処理を行うことができます。
@xref{Key Bindings of Summary}.


@subsection スレッドの繋ぎなおし

手動でスレッドの繋ぎなおしができます。サマリで該当するメッセージにカーソ
ルを合わせて @kbd{M-w} (@code{wl-summary-save-current-message}) し、新し
い親メッセージのところで @kbd{C-y}
(@code{wl-summary-yank-saved-message})するとスレッドが繋ぎなおされます。


@node Cache, Auto Refile, Thread Operations, Summary
@section キャッシュ

@subsection キャッシュファイル

ネットワーク経由のメッセージはキャッシュされます。キャッシュは、ディレク
トリ @file{~/.elmo/cache} に保持されます。キャッシュをクリアするには、
@kbd{M-x elmo-cache-expire-by-size} と入力してください。最近使われてない
キャッシュから順に、一定のディスク容量になるまで消します。

@subsection バッファキャッシュと先読み機能

@code{elmo-use-buffer-cache} が non-nil であれば、一度読んだメッセージが
一定数バッファに保持されます。保持するバッファの数は 
@code{elmo-buffer-cache-size} で指定します。

また、メッセージを読んでいる間に次のメッセージを取得しておく先読み機能が
あります。これは先読みしたメッセージをバッファキャッシュに溜めておくため、
@code{elmo-use-buffer-cache} が non-nil であることが必要です。

この先読みするフォルダは次の2つの変数により指定できます。

@table @code
@item wl-cache-prefetch-folder-type-list
@vindex wl-cache-prefetch-folder-type-list
初期設定は以下のリスト。
@lisp
@group
(nntp imap4)
@end group
@end lisp

@noindent
先読み機能を有効にするフォルダを種別のリストで指定します。初期設定の場合、
もし localdir と IMAP フォルダが混在したマルチフォルダでは IMAP のメッセー
ジだけが先読みされます。この変数は @code{wl-cache-prefetch-folder-list} 
よりも優先されます。

もし、localdir と localnews フォルダも先読みする場合は次のように指定します。

@lisp
@group
(setq wl-cache-prefetch-folder-type-list
      '(nntp imap4 localdir localnews))
@end group
@end lisp

@item wl-cache-prefetch-folder-list
@vindex wl-cache-prefetch-folder-list
初期設定は @code{nil}。
先読み機能を有効にするフォルダをフォルダ名(正規表現)のリストで指定します。
@end table


@node Auto Refile, Sticky Summary, Cache, Summary
@section 自動リファイル
@vindex elmo-msgdb-extra-fields
@vindex wl-refile-rule-alist
@findex wl-summary-auto-refile

メッセージのヘッダ情報から任意のフォルダへ振り分ける自動リファイル機能が
@kbd{C-o} (@code{wl-summary-auto-refile}) で使用できます。自動リファイル
は msgdb の overview 情報を元に振り分けします。標準では @samp{From:}
@samp{Subject:} @samp{To:} @samp{Cc:} が含まれています。これ以外の拡張項
目で振り分けしたいときには、

@lisp
@group
(setq elmo-msgdb-extra-fields
      '("x-ml-name"
        "reply-to"
        "sender"
        "mailing-list"
        "newsgroups"))
@end group
@end lisp

@noindent
として拡張項目が msgdb に含まれるようにしてください。既に取得したメッ
セージの拡張項目を取り込むには @kbd{s all} などで msgdb を再作成する必要
があります。

次に振り分けするルールを設定します。
自動振り分けは，変数 @code{wl-refile-rule-alist} の値に基づいて行われます。
@code{wl-refile-rule-alist} は、

@example
@group
(@var{フィールド} (@var{正規表現} . @var{振り分け先})
            (@var{正規表現} . @var{振り分け先})
            @dots{})
@end group
@end example

のようなルールのリストとなっています。各ルールは、『@var{フィールド}』の値が
『@var{正規表現}』にマッチするときに『@var{振り分け先}』に振り分けるという意味を持ち
ます。前方に指定されたルールが優先されます。

『@var{フィールド}』部分には、フィールド名の文字列を指定します。また、フィール
ド名の文字列のリストを指定することもできます。この場合、リストのいずれか
のフィールドの値がマッチしたときに発火します(OR 条件となります)。

『@var{正規表現}』にはフィールドの値にマッチさせる正規表現文字列を指定します。
『@var{振り分け先}』には振り分け先のフォルダ名の文字列を指定します。
『@var{振り分け先}』部分には、再びルールを書くこともでき、その場合
そのルールのフィールドの値の条件と現在のルールのフィールドの値の条件が
満たされたときに発火します(AND 条件となります)。

また、『@var{正規表現}』でマッチした部分文字列は、『@var{振り分け先}』に以下の
指定をすることで参照できます。

@table @samp
@item \&
マッチした文字列全体を参照します。

@item \@var{N}
@var{N} 番目の @samp{\(@dots{}\)} にマッチした文字列を参照します。
(@var{N} は数字)
@end table

以下は @code{wl-refile-rule-alist} の一例です。

@lisp
@group
(setq wl-refile-rule-alist
      '(("x-ml-name"
         ("^Wanderlust" . "+wl")
         ("^Elisp" . "+elisp"))
        (("To" "Cc")
         ("\\([a-z]+\\)@@gohome.org" . "+\\1"))
        ("From"
         ("me@@gohome.org" . ("To" ("you@@gohome.org" . 
                                    "+from-me-to-you"))))))
@end group
@end lisp

@kbd{C-o} (@code{wl-summary-auto-refile}) で条件にマッチしたメッセージに
リファイルマークが付加されます。@kbd{x} でリファイルを実行します。

@code{wl-summary-auto-refile-skip-marks} を設定することにより、
自動リファイルの対象とするメッセージを変更することができます。
標準では @samp{N} @samp{U} @samp{!} が設定されており、
これらの永続的マークのついたメッセージは、自動リファイルしません。
つまり標準では未読のメッセージを自動リファイルしないことになります。
すべてのメッセージを自動リファイルの対象にするには、

@lisp
(setq wl-summary-auto-refile-skip-marks nil)
@end lisp

@noindent
の様に @code{wl-summary-auto-refile-skip-marks} を @code{nil} にします。


@node Sticky Summary, Key Bindings of Summary, Auto Refile, Summary
@section スティッキーサマリ
@cindex Summary, Sticky
@cindex Sticky Summary

スティッキーサマリは、@kbd{q} で現在のサマリを終了してもバッファが消えな
い、その名の通りスティッキー(しつこい)サマリです。

@kbd{C-u g} でフォルダ移動するか、通常のサマリで @kbd{M-s}
(@code{wl-summary-stick}) を実行するとステッィキーサマリになります。スティッ
キーサマリのバッファ名は、@samp{Summary:@var{フォルダ名}} となります。
@kbd{C-x b} (@code{switch-to-buffer}) などで、適当に切替えればいつでも参
照できます。スティッキーサマリを終了するには @kbd{C-u q} です。その他の
操作に関しては通常のサマリと同様です。

変数 @code{wl-summary-always-sticky-folder-list} にフォルダ名(正規表現)
のリストを設定することにより、フォルダ移動時に自動的にスティッキーサマリ
とすることもできます。


@node Key Bindings of Summary, Variables of Summary, Sticky Summary, Summary
@section キーバインド
@cindex Keybind, Summary Mode
@cindex Keybind, Summary Buffer

サマリモードのキーバインドは以下の通りです。

@table @kbd
@item @key{SPC}
@kindex @key{SPC} (Summary)
@findex wl-summary-read
現在カーソルがある行のメッセージをメッセージバッファに表示します。
(@code{wl-summary-read})

@item .
@kindex . (Summary)
@findex wl-summary-redisplay
現在カーソルがある行のメッセージを再表示します。
prefix argument つきならばキャッシュが存在しても無視して再読み込みし直します。
(@code{wl-summary-redisplay})

@item <
@kindex < (Summary)
@findex wl-summary-display-top
最初のメッセージを表示します。
(@code{wl-summary-display-top})

@item >
@kindex > (Summary)
@findex wl-summary-display-bottom
最後尾のメッセージを表示します。
(@code{wl-summary-display-bottom})

@item @key{BS}
@itemx @key{DEL}
@kindex @key{BS} (Summary)
@kindex @key{DEL} (Summary)
前のページを表示します。
@findex wl-summary-prev-page
(@code{wl-summary-prev-page})

@item @key{RET}
@kindex @key{RET} (Summary)
@findex wl-summary-next-line-content
カーソル行のメッセージが表示中であればメッセージを一行上にスクロールします。
表示中でなければ、表示します。
(@code{wl-summary-next-line-content})

@item -
@itemx M-@key{RET}
@kindex - (Summary)
@kindex M-@key{RET} (Summary)
@findex wl-summary-prev-line-content
カーソル行のメッセージが表示中であればメッセージを一行下にスクロールします。
表示中でなければ、表示します。
(@code{wl-summary-prev-line-content})

@item /
@kindex / (Summary)
@findex wl-thread-open-close
カーソル行のスレッドの開閉をトグルします。
(@code{wl-thread-open-close})

@item [
@kindex [ (Summary)
全てのスレッドを開きます。
@findex wl-thread-open-all
(@code{wl-thread-open-all})

@item ]
@kindex ] (Summary)
全てのスレッドを閉じます。
@findex wl-thread-close-all
(@code{wl-thread-close-all})

@item g
@kindex g (Summary)
@findex wl-summary-goto-folder
違うフォルダに移動します。
(@code{wl-summary-goto-folder})

@item c
@kindex c (Summary)
全てのメッセージを読んだことにします。
@findex wl-summary-mark-as-read-all
(@code{wl-summary-mark-as-read-all})

@item a
@kindex a (Summary)
@findex wl-summary-reply
現在カーソルがある行のメッセージへの返事用のドラフトを用意します。
(@code{wl-summary-reply})

@item A
@kindex A (Summary)
@findex wl-summary-reply-with-citation
現在カーソルがある行のメッセージへの返事用のドラフトを本文を引用して用意します。
(@code{wl-summary-reply-with-citation})

@item C
@kindex C (Summary)
@findex wl-summary-cancel-message
現在のカーソルがある行のメッセージが自分が出したニュース記事の場合、その投稿をキャンセルします。
(@code{wl-summary-cancel-message})

@item E
@kindex E (Summary)
@findex wl-summary-reedit
現在カーソルがある行のメッセージの内容を持つドラフトを用意します。
もし、prefix argument つきで実行すれば Supersedes メッセージを作成します。
ただし、NNTP フォルダでかつ自分が投稿したメッセージに限ります。
(@code{wl-summary-reedit})

@item M-e
@kindex M-e (Summary)
@findex wl-summary-resend-bounced-mail
カーソル行のメッセージが、自分のところに返ってきたエラーメッセージならば、
もう一回送るためのドラフトを用意します。
(@code{wl-summary-resend-bounced-mail})

@item f
@kindex f (Summary)
@findex wl-summary-forward
現在カーソルがある行のメッセージを他の人に転送するドラフトを用意します。
(@code{wl-summary-forward})

@item $
@kindex $ (Summary)
@findex wl-summary-mark-as-important
@samp{$} マークをつけます。既に @samp{$} マークがあれば削除します。
(@code{wl-summary-mark-as-important})

@item y
@itemx e
@kindex y (Summary)
@kindex e (Summary)
現在カーソルがある行のメッセージを保存します。
@findex wl-summary-save
(@code{wl-summary-save})

@item n
@kindex n (Summary)
@findex wl-summary-next
一つ下のメッセージへ移動します。
@code{wl-summary-skip-mark-list} にある一時マークが付いたメッセージへは
移動しません。オフラインモードのときには、
キャッシュされていないメッセージにも移動しません。
(@code{wl-summary-next})

@item p
@kindex p (Summary)
@findex wl-summary-prev
一つ上のメッセージへ移動します。
@code{wl-summary-skip-mark-list} にある一時マークが付いたメッセージへは
移動しません。オフラインモードのときには、
キャッシュされていないメッセージにも移動しません。
(@code{wl-summary-prev})

@item N
@kindex N (Summary)
@findex wl-summary-down
下方向にある未読もしくは @samp{$}マークつきのメッセージへ移動します。
オフラインモードのときには、キャッシュされていないメッセージに移動しません。
ただし、まとめ処理マーク @samp{*} がついたメッセージがある場合は、
まとめ処理マーク @samp{*} がついたメッセージに優先的に移動します。
この挙動は @code{wl-summary-move-order}の値に応じて変わります。
(@code{wl-summary-down})

@item P
@kindex P (Summary)
@findex wl-summary-up
上方向にある未読もしくは @samp{$}マークつきのメッセージへ移動します。
オフラインモードのときには、キャッシュされていないメッセージに移動しません。
ただし、まとめ処理マーク @samp{*} がついたメッセージがある場合は、
まとめ処理マーク @samp{*} がついたメッセージに優先的に移動します。
この挙動は @code{wl-summary-move-order}の値に応じて変わります。
(@code{wl-summary-up})

@item w
@kindex w (Summary)
@findex wl-summary-write
新規ドラフトを用意します。
(@code{wl-summary-write})

@item W
@kindex W (Summary)
@findex wl-summary-write-current-folder
現在のサマリがニュースグループの場合、@samp{Newsgroups:} フィールドを補っ
てドラフトを用意します。
現在のサマリがメーリングリストの場合、メーリングリストのアドレスを推測し
て @samp{To:} フィールドを補ってドラフトを用意します。
@code{wl-subscribed-mailing-list} を設定しておく必要があります。
(@code{wl-summary-write-current-folder})

@item H
@kindex H (Summary)
@findex wl-summary-redisplay-all-header
現在カーソルがある行のメッセージを、すべてのヘッダ情報とともに表示します。
(@code{wl-summary-redisplay-all-header})

@item M
@kindex M (Summary)
@findex wl-summary-redisplay-no-mime
現在カーソルがある行のメッセージを、MIME 解析することなく表示します。
(@code{wl-summary-redisplay-no-mime})

@item B
@kindex B (Summary)
@findex wl-summary-burst
現在カーソルがある行のメッセージが
MIME でカプセル化された複数のメッセージ含む場合、
それらを現在のフォルダにほどきます。
(@code{wl-summary-burst})

@item @@
@kindex @@ (Summary)
@findex wl-summary-edit-petname
サマリ行のメールの @samp{From:} (発信者)を @file{~/.addresses} にインタ
ラクティブに追加します。既に登録されている場合は変更/削除もできます。
prefix argument つきで実行すると、任意の入力アドレスを登録/変更/削除でき
ます。(@code{wl-summary-edit-petname})

@item Z
@kindex Z (Summary)
@findex wl-status-update
@file{~/.addresses} 等の状態を最新のものに更新します。
(@code{wl-status-update})

@item |
@kindex | (Summary)
@findex wl-summary-pipe-message
現在のメッセージの内容を他のプロセスにパイプ経由で引き渡します。
(@code{wl-summary-pipe-message})

@item #
@kindex # (Summary)
@findex wl-summary-print-message
現在のメッセージの内容を印刷します。Emacs 20以降 では @code{ps-print} を
使います。白黒プリンタでは、@code{wl-ps-print-buffer-func} を
@code{ps-print-buffer} に設定したほうが良いかもしれません。

@lisp
(setq wl-ps-print-buffer-func 'ps-print-buffer)
@end lisp

@noindent
(@code{wl-summary-print-message})

@item q
@kindex q (Summary)
@findex wl-summary-exit
現在のフォルダを脱出します。
(@code{wl-summary-exit})

@item j
@kindex j (Summary)
@findex wl-summary-jump-to-current-message
現在表示中のメッセージのバッファに移動します。
(@code{wl-summary-jump-to-current-message})

@item J
@kindex J (Summary)
他のメッセージにジャンプします。
@findex wl-summary-jump-to-msg
(@code{wl-summary-jump-to-msg})

@item I
@kindex I (Summary)
サマリの表示を更新した後、
@code{wl-summary-incorporate-marks} に含まれるマークを持つメッセージを
プリフェッチします。
@findex wl-summary-incorporate
(@code{wl-summary-incorporate})

@item M-j
@kindex M-j (Summary)
@findex wl-summary-jump-to-msg-by-message-id
入力した @samp{Message-ID:} を持つメッセージの行にジャンプします。
@code{elmo-use-database} が non-nilなら、現在のサマリ以外からも候補を検
索します。(@code{wl-summary-jump-to-msg-by-message-id})

@item ^
@kindex ^ (Summary)
現在のメッセージの親メッセージに移動します。
@findex wl-summary-jump-to-parent-message
(@code{wl-summary-jump-to-parent-message})

@item !
@kindex ! (Summary)
@findex wl-summary-mark-as-unread
カーソルがある行のメッセージを読まなかったことにします。
(@code{wl-summary-mark-as-unread})

@item s
@kindex s (Summary)
@findex wl-summary-sync
メッセージの一覧表示の更新レンジ(@samp{all}, @samp{update},
@samp{rescan}, @samp{first}, @samp{last})の入力を受け付けた後、それに
基づいてメッセージの一覧表示を更新します。

@example
@group
all            ...すべて更新
update         ...現在の表示を更新
rescan         ...現在の msgdb の内容を再表示
rescan-noscore ...現在の msgdb の内容を再表示(スコアなし)
first, last    ...フィルタフォルダに移動
@end group
@end example

@noindent
(@code{wl-summary-sync})

@item S
@kindex S (Summary)
@findex wl-summary-sort
サマリの表示順序を並び替えます。@samp{date} (日付)、@samp{from}(発信者)、
@samp{number}(メッセージ番号)、@samp{subject}(サブジェクト) のいずれかを
元に並び替えます。(@code{wl-summary-sort})

@item T
@kindex T (Summary)
@findex wl-summary-toggle-thread
スレッド表示をトグルします。
現在のスレッド表示状態はモードラインに表示されます．
@samp{@{S@}} はスレッド・オフ(Sequence)の状態，
@samp{@{T@}} はスレッド・オン(Thread)の状態を示します．
(@code{wl-summary-toggle-thread})

@item l
@kindex l (Summary)
@findex wl-summary-toggle-disp-folder
フォルダモードのバッファの表示をトグルします。
(@code{wl-summary-toggle-disp-folder})

@item v
@kindex v (Summary)
メッセージのバッファの表示をトグルします。
@findex wl-summary-toggle-disp-msg
(@code{wl-summary-toggle-disp-msg})

@item V
@kindex V (Summary)
与えられた条件を持つメッセージのみを持つ仮想フォルダへ移動します。
prefix argument つきで実行すると仮想フォルダから脱出します。
@findex wl-summary-virtual
(@code{wl-summary-virtual})

@item @key{TAB}
@kindex @key{TAB} (Summary)
@findex wl-summary-goto-last-displayed-msg
さっき表示したメッセージに飛びます。
(@code{wl-summary-goto-last-displayed-msg})

@item ?
@kindex ? (Summary)
与えられた条件を持つメッセージにまとめ処理マーク @samp{*} をつけます。
@findex wl-summary-pick
(@code{wl-summary-pick})

@item R
@kindex R (Summary)
@findex wl-summary-mark-as-read
カーソル行のメッセージを読んだことにします。
(@code{wl-summary-mark-as-read})

@item i
@kindex i (Summary)
カーソル行のメッセージをプリフェッチします。
prefix argument つきならば既にキャッシュされているメッセージも
再度プリフェッチします。
@findex wl-summary-prefetch
(@code{wl-summary-prefetch})

@item x
@kindex x (Summary)
すべての @samp{D}, @samp{o}, @samp{O} マークを実行します。
@findex wl-summary-exec
(@code{wl-summary-exec})

@item *
@kindex * (Summary)
@findex wl-summary-target-mark-line
カーソル行のメッセージにまとめ処理用マークをつけます。
(@code{wl-summary-target-mark-line})

@item o
@kindex o (Summary)
カーソル行のメッセージにリファイルマークをつけます。
@findex wl-summary-refile
(@code{wl-summary-refile})

@item C-o
@kindex C-o (Summary)
自動リファイルを実行します。
@findex wl-summary-auto-refile
(@code{wl-summary-auto-refile})

@item O
@kindex O (Summary)
カーソル行のメッセージにコピーマークをつけます。
@findex wl-summary-copy
(@code{wl-summary-copy})

@item M-o
@kindex M-o (Summary)
カーソル行のメッセージに、直前にリファイルしたフォルダと同じフォルダ宛に、
リファイルマークをつけます。
@findex wl-summary-refile-prev-destination
(@code{wl-summary-refile-prev-destination})

@item d
@kindex d (Summary)
@findex wl-summary-delete
カーソル行のメッセージに削除マークをつけます。
(@code{wl-summary-delete})

@item u
@kindex u (Summary)
@findex wl-summary-unmark
カーソル行のメッセージにマークがあれば削除します。
(@code{wl-summary-unmark})

@item U
@kindex U (Summary)
指定したマークをすべて削除します。
@findex wl-summary-unmark-all
(@code{wl-summary-unmark-all})

@item r R
@kindex r R (Summary)
@findex wl-summary-mark-as-read-region
指定リージョンにあるメッセージを全て読んだことにします。
(@code{wl-summary-mark-as-read-region})

@item r $
@kindex r $ (Summary)
@findex wl-summary-mark-as-important-region
指定リージョンにあるメッセージ全てに @samp{$} マークをつけます。
すでに @samp{$} マークがあれば削除します。
(@code{wl-summary-mark-as-important-region})

@item r !
@kindex r ! (Summary)
@findex wl-summary-mark-as-unread-region
指定リージョンにあるメッセージを全て読まなかったことにします。
(@code{wl-summary-mark-as-unread-region})

@item r i
@kindex r i (Summary)
@findex wl-summary-prefetch-region
指定リージョンにあるメッセージを全てプリフェッチします。
(@code{wl-summary-prefetch-region})

@item r x
@kindex r x (Summary)
@findex wl-summary-exec-region
指定リージョンにあるメッセージについた @samp{D}, @samp{o}, @samp{O} マークを実行します。
(@code{wl-summary-exec-region})

@item r *
@kindex r * (Summary)
@findex wl-summary-target-mark-region
指定リージョンにあるメッセージにまとめ処理用マークをつけます。
(@code{wl-summary-target-mark-region})

@item r o
@kindex r o (Summary)
@findex wl-summary-refile-region
指定リージョンにあるメッセージにリファイルマークをつけます。
(@code{wl-summary-refile-region})

@item r O
@kindex r O (Summary)
@findex wl-summary-copy-region
指定リージョンにあるメッセージにコピーマークをつけます。
(@code{wl-summary-copy-region})

@item r d
@kindex r d (Summary)
@findex wl-summary-delete-region
指定リージョンにあるメッセージに削除マークをつけます。
(@code{wl-summary-delete-region})

@item r u
@kindex r u (Summary)
@findex wl-summary-unmark-region
指定リージョンにあるメッセージにマークがあれば削除します。
(@code{wl-summary-unmark-region})

@item r y
@kindex r y (Summary)
指定リージョンにあるメッセージを保存します。
@findex wl-summary-save-region
(@code{wl-summary-save-region})

@item t R
@kindex t R (Summary)
@findex wl-thread-mark-as-read
カーソル行があるメッセージを先頭とするスレッドを読んだことにします。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てを読んだことにします。
(@code{wl-thread-mark-as-read})

@item t $
@kindex t $ (Summary)
@findex wl-thread-mark-as-important
カーソル行があるメッセージを先頭とするスレッドに @samp{$} マークをつけます。
既に @samp{$} マークがあれば削除します。
prefix argument つきならばカーソル行があるメッセージを含むスレッドに
@samp{$} マークをつけるか削除するかします。
(@code{wl-thread-mark-as-important})

@item t !
@kindex t ! (Summary)
@findex wl-thread-mark-as-unread
カーソル行があるメッセージを先頭とするスレッドを読まなかったことにします。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てを読まなかったことにします。
(@code{wl-thread-mark-as-unread})

@item t i
@kindex t i (Summary)
@findex wl-thread-prefetch
カーソル行があるメッセージを先頭とするスレッドをプリフェッチします。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てをプリフェッチします。
(@code{wl-thread-prefetch})

@item t x
@kindex t x (Summary)
@findex wl-thread-exec
カーソル行があるメッセージを先頭とするスレッドについた @samp{D}, @samp{o}, @samp{O} マークを実行します。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てについた @samp{D}, @samp{o}, @samp{O} マークを実行します。
(@code{wl-thread-exec})

@item t *
@kindex t * (Summary)
@findex wl-thread-target-mark
カーソル行があるメッセージを先頭とするスレッドにまとめ処理用マークをつけます。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てにまとめ処理用マークをつけます。
(@code{wl-thread-target-mark})

@item t o
@kindex t o (Summary)
@findex wl-thread-refile
カーソル行があるメッセージを先頭とするスレッドにリファイルマークをつけます。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てにリファイルマークをつけます。
(@code{wl-thread-refile})

@item t O
@kindex t O (Summary)
@findex wl-thread-copy
カーソル行があるメッセージを先頭とするスレッドにコピーマークをつけます。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てにコピーマークをつけます。
(@code{wl-thread-copy})

@item t d
@kindex t d (Summary)
@findex wl-thread-delete
カーソル行があるメッセージを先頭とするスレッドに削除マークをつけます。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てに削除マークをつけます。
(@code{wl-thread-delete})

@item t u
@kindex t u (Summary)
@findex wl-thread-unmark
カーソル行があるメッセージを先頭とするスレッドのメッセージにマークがあれば削除します。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全体のメッセージにマークがあれば削除します。
(@code{wl-thread-unmark})

@item t y
@kindex t y (Summary)
@findex wl-thread-save
カーソル行があるメッセージを先頭とするスレッドを保存します。
prefix argument つきならばカーソル行があるメッセージを含むスレッド全てを保存します。
(@code{wl-thread-save})

@item m i
@kindex m i (Summary)
@findex wl-summary-target-mark-prefetch
まとめ処理用マーク @samp{*} のついたメッセージを全てプリフェッチします。
(@code{wl-summary-target-mark-prefetch})

@item m R
@kindex m R (Summary)
@findex wl-summary-target-mark-mark-as-read
まとめ処理用マーク @samp{*} のついたメッセージを読んだことにします。
(@code{wl-summary-target-mark-mark-as-read})

@item m $
@kindex m $ (Summary)
@findex wl-summary-target-mark-mark-as-important
まとめ処理用マーク @samp{*} のついたメッセージに @samp{$} マークをつけます。
すでに @samp{$} マークがあれば削除します。
(@code{wl-summary-target-mark-mark-as-important})

@item m !
@kindex m ! (Summary)
@findex wl-summary-target-mark-mark-as-unread
まとめ処理用マーク @samp{*} のついたメッセージを読まなかったことにします。
(@code{wl-summary-target-mark-mark-as-unread})

@item m o
@kindex m o (Summary)
@findex wl-summary-target-mark-refile
まとめ処理用マーク @samp{*} のついたメッセージにリファイルマークをつけます。
(@code{wl-summary-target-mark-refile})

@item m O
@kindex m O (Summary)
@findex wl-summary-target-mark-copy
まとめ処理用マーク @samp{*} のついたメッセージにコピーマークをつけます。
(@code{wl-summary-target-mark-copy})

@item m d
@kindex m d (Summary)
@findex wl-summary-target-mark-delete
まとめ処理用マーク @samp{*} のついたメッセージに削除マークをつけます。
(@code{wl-summary-target-mark-delete})

@item m y
@kindex m y (Summary)
@findex wl-summary-target-mark-save
まとめ処理用マーク @samp{*} のついたメッセージを保存します。
(@code{wl-summary-target-mark-save})

@item m u
@kindex m u (Summary)
全ての一時的マークを消します。
(@code{wl-summary-delete-all-temp-marks})
@findex wl-summary-delete-all-temp-marks

@item m a
@kindex m a (Summary)
全てにまとめ処理用マーク @samp{*} を付けます。
(@code{wl-summary-target-mark-all})
@findex wl-summary-target-mark-all

@item m t
@kindex m t (Summary)
まとめ処理用マーク @samp{*} を現在のスレッドにつけます。
@findex wl-summary-target-mark-thread
(@code{wl-summary-target-mark-thread})

@item m r
@kindex m r (Summary)
@findex wl-summary-target-mark-region
指定されたリージョンにまとめ処理用マーク @samp{*} をつけます。
(@code{wl-summary-target-mark-region})

@item m A
@kindex m A (Summary)
@findex wl-summary-target-mark-reply-with-citation
まとめ処理用マーク @samp{*} のついたメッセージを引用して返事を書くドラフト
を用意します。
(@code{wl-summary-target-mark-reply-with-citation})

@item m f
@kindex m f (Summary)
@findex wl-summary-target-mark-forward
まとめ処理用マーク @samp{*} のついたメッセージをフォワードするドラフトを
用意します。
(@code{wl-summary-target-mark-forward})

@item m U
@kindex m U (Summary)
@findex wl-summary-target-mark-uudecode
まとめ処理用マーク @samp{*} のついたメッセージをまとめて uudecode します。
(@code{wl-summary-target-mark-uudecode})

@item m ?
@kindex m ? (Summary)
@findex wl-summary-target-mark-pick
まとめ処理用マーク @samp{*} のついたメッセージの内、
条件にマッチするメッセージの @samp{*} マークのみを残します。
(@code{wl-summary-target-mark-pick})

@item M-t
@kindex M-t (Summary)
@findex wl-toggle-plugged
Wanderlust のオフラインモード/オンラインモードをトグルします。
(@code{wl-toggle-plugged})

@item C-t
@kindex C-t (Summary)
Wanderlust のサーバ・ポート別のオフライン/オンラインを変更します。
(@code{wl-plugged-change})

@item C-c C-o
@kindex C-c C-o (Summary)
@findex wl-jump-to-draft-buffer
ドラフトバッファがあれば移動します。 複数のドラフトバッファが存在する場合は、
次々と切り替えていきます。また、prefix argument をつけることにより、
バッファが存在していない場合は、ドラフトフォルダからファイルを(存在すれば)
読み込みます。
(@code{wl-jump-to-draft-buffer})

@item M-w
@kindex M-w (Summary)
@findex wl-summary-save-current-message
カーソル行のメッセージのコピー。
(@code{wl-summary-save-current-message})

@item C-y
@kindex C-y (Summary)
@findex wl-summary-yank-saved-message
カーソル行のメッセージを親メッセージとして、
@code{wl-summary-save-current-message} で保存されたメッセージを
スレッドに繋ぎます。
(@code{wl-summary-yank-saved-message})
@end table


@node Variables of Summary,  , Key Bindings of Summary, Summary
@section カスタマイズ変数

@table @code
@item wl-summary-move-order
@vindex wl-summary-move-order
初期設定は @code{unread}。メッセージを読み進めるときに、何を優先するかを
指定します。新規メッセージを優先したいときは @code{new} を設定します。未
読をメッセージを優先したいときは @code{unread} を設定します。@code{nil} 
なら単純に次のメッセージに進みます。

@item wl-auto-select-first
@vindex wl-auto-select-first
初期設定は @code{nil}。
Non-nil ならフォルダに移動した時に最初のメッセージを自動的に表示します。

@item wl-auto-select-next
@vindex wl-auto-select-next
初期設定は @code{nil}。Non-nil なら、あるフォルダのサマリから次のフォル
ダのサマリへ自動的に移動します。値が @code{unread} なら、確認を求めて未
読メッセージがないフォルダに移動します。値が @code{skip-no-unread} なら、
未読メッセージがないフォルダを自動的に飛ばします。

@item wl-thread-insert-opened
@vindex wl-thread-insert-opened
初期設定は @code{nil}。Non-nil なら最初から thread が開かれた状態でサマ
リに表示されます。

@item wl-thread-open-reading-thread
@vindex wl-thread-open-reading-thread
初期設定は @code{t}。Non-nil なら、閉じた状態の thread へ移動した時に自
動的に thread を開きます。

@item wl-summary-exit-next-move
@vindex wl-summary-exit-next-move
初期設定は @code{t}。Non-nil なら、サマリを終了するときに次のフォルダに
移動します。

@item wl-folder-move-cur-folder
@vindex wl-folder-move-cur-folder
初期設定は @code{nil}。Non-nil ならサマリで他のフォルダに移動するとフォ
ルダモードでのカーソル位置も合わせて移動します。

@item wl-summary-weekday-name-lang
@vindex  wl-summary-weekday-name-lang
初期設定は @samp{ja}。サマリの曜日表示の言語を指定します。@samp{en} なら
英語、@samp{fr} ならフランス語、@samp{de} ならドイツ語となります。

@item wl-summary-fix-timezone
@vindex wl-summary-fix-timezone
初期設定は @samp{nil}。サマリの日時表示を指定したタイムゾーンに直します。
@code{nil} ならば、デフォルトのタイムゾーンを参照して直します。
デフォルトのタイムゾーンとは、システムにあらかじめ設定されたタイムゾーンか、
環境変数 @samp{TZ} の値です。

@item wl-use-petname
@vindex  wl-use-petname
初期設定は @code{t}。
Non-nil ならサマリの From 部分にあだ名を表示します。

@item wl-break-pages
@vindex  wl-break-pages
初期設定は @code{t}。
Non-nil なら、@samp{^L} で改ページしてメッセージを表示します。

@item wl-message-window-size
@vindex  wl-message-window-size
初期設定は '(1 . 4)。
サマリを表示するウィンドウとメッセージ本体を表示するウィンドウの比を cons で指定します。car:cdr が サマリ:メッセージ です。

@item wl-summary-recenter
@vindex  wl-summary-recenter
初期設定は @code{t}。Non-nil ならば表示したときに表示中のメッセージのサ
マリ行をウィンドウの中央付近に移動させます。

@item wl-summary-indent-length-limit
@vindex  wl-summary-indent-length-limit
初期設定は 46。設定された値以上サマリをインデントしません。@code{nil} な
らサマリのインデントを無制限にします。

@item wl-summary-no-from-message
@vindex  wl-summary-no-from-message
初期設定は @samp{nobody@@nowhere?}。
メッセージに @samp{From:} が無かった場合にサマリに表示する文字列です。

@item wl-summary-no-subject-message
@vindex  wl-summary-no-subject-message
初期設定は @samp{(WL:No Subject in original.)}。メッセージに 
@samp{Subject:} が無かった場合にサマリに表示する文字列です。

@item wl-summary-width
@vindex  wl-summary-width
初期設定は 80。サマリの表示幅を設定された値に切り詰めます。@code{nil} な
ら表示幅を切り詰めません。

@item wl-use-folder-petname
@vindex  wl-use-folder-petname
初期設定は以下のリスト。

@lisp
@group
(modeline)
@end group
@end lisp

@noindent
フォルダのあだ名 (petname) を使用する場所(シンボル)のリストを指定します。
指定できるシンボルは次の通りです。

@table @code
@item modeline
サマリのモードラインを petname で表示します。
@item ask-folder
@code{wl-auto-select-next} が non-nil のとき、
移動先フォルダを petname で表示します。
@item read-folder
@code{wl-summary-read-folder} におけるフォルダ入力の際、
petname でも補完ができます。
@end table

@item wl-summary-move-direction-toggle
@vindex  wl-summary-move-direction-toggle
初期設定は @code{t}。Non-nil なら最後に実行された @kbd{p}, @kbd{P},
@kbd{n}, @kbd{N} の結果で、次のメッセージが上か下かを切り替える。読んで
いる方向を意識したいときは @code{t} にすると良いでしょう。

@item wl-from-width
@vindex wl-from-width
初期設定は 17。サマリの From 部分の表示幅です。

@item wl-summary-divide-thread-when-subject-changed
@vindex wl-summary-divide-thread-when-subject-changed
初期設定は @code{nil}。
Non-nil ならサブジェクトが変わったときにスレッドを切ります。

@item wl-summary-search-via-nntp
@vindex wl-summary-search-via-nntp
初期設定は @code{confirm}。

Non-nil なら @code{wl-summary-jump-to-msg-by-message-id} で、メッセージ
を見つけることができなかったときに、
@code{wl-summary-jump-to-msg-by-message-id-via-nntp} を呼び、
@code{elmo-default-nntp-server} で指定されたサーバから検索します。このと
き @code{elmo-default-nntp-user}, @code{elmo-default-nntp-port},
@code{elmo-default-nntp-stream-type} で指定した条件でサーバと接続します。

@code{confirm} なら @code{elmo-default-nntp-*} で指定されたサーバから検
索するか、サーバを指定するかを確認します。この場合、サーバのホスト名、も
しくは @samp{-:username@@servername:119!}  のように NTTP フォルダ形式での
指定が可能です。

@item wl-summary-keep-cursor-command
@vindex wl-summary-keep-cursor-command
初期設定は以下のリスト。
@lisp
@group
(wl-summary-goto-folder wl-summary-goto-last-visited-folder)
@end group
@end lisp

@noindent
既に存在するサマリへ移動したときに更新せず、カーソル位置を保存する
コマンドのリストです。

@item wl-summary-update-confirm-threshold
@vindex wl-summary-update-confirm-threshold
初期設定は 500。この値よりサマリの更新数が多い場合、一部分だけ更新するか
どうか、質問します。

@item wl-summary-always-sticky-folder-list
@vindex wl-summary-always-sticky-folder-list
初期設定は @code{nil}。フォルダ名(正規表現)のリストを設定することにより、
自動的にスティッキーサマリとするかどうかをフォルダ毎に指定します。

@item wl-summary-reserve-mark-list
@vindex wl-summary-reserve-mark-list
初期設定は以下のリスト。

@lisp
@group
("o" "O" "D")
@end group
@end lisp

@noindent
このリストにある一時マークは、消さない限り上書きされません。

@item wl-summary-skip-mark-list
@vindex wl-summary-skip-mark-list
初期設定は以下のリスト。

@lisp
@group
("D")
@end group
@end lisp

@noindent
このリストにある一時マークが付いたメッセージは、カーソル移動でスキップさ
れます。

@item wl-fetch-confirm-threshold
@vindex wl-fetch-confirm-threshold
初期設定は 30000 (bytes)。@code{wl-fetch-confirm-threshold} を越えるサイ
ズのメッセージを表示する時は、確認を求めます。@code{nil} にすると、確認
せずに表示します。

@item wl-prefetch-threshold
@vindex wl-prefetch-threshold
初期設定は 30000 (bytes)。@code{wl-prefetch-threshold} を越えるサイズの
メッセージは、@code{wl-prefetch-confirm} が non-nil の場合、プリフェッチ
時に確認を求めます。@code{wl-prefetch-threshold}を @code{nil} にすると、
@code{wl-prefetch-confirm} の値にかかわらずプリフェッチを実行します。

@item wl-prefetch-confirm
@vindex wl-prefetch-confirm
初期設定は @code{t}。Non-nil ならば @code{wl-prefetch-threshold} を越え
るサイズのメッセージをプリフェッチしようとしたときに、確認を求めます。

@item wl-cache-fetch-threshold
@vindex wl-cache-fetch-threshold
初期設定は 30000 (bytes)。@code{wl-fetch-confirm-threshold} を越えるサイ
ズのメッセージは、メッセージの先読みを実行しません。@code{nil} にすると、
どんな大きさのメッセージでも先読みを実行します。

@item elmo-imap4-use-cache
@vindex elmo-imap4-use-cache
初期設定は @code{t}。Non-nil なら、IMAP4 で読んだメッセージをキャッシュ
します。

@item elmo-nntp-use-cache
@vindex elmo-nntp-use-cache
初期設定は @code{t}。Non-nil なら、NNTP で読んだメッセージをキャッシュし
ます。

@item elmo-pop3-use-cache
@vindex elmo-pop3-use-cache
初期設定は @code{t}。Non-nil なら、POP3 で読んだメッセージをキャッシュし
ます。

@item wl-folder-process-duplicates-alist
@vindex wl-folder-process-duplicates-alist
初期設定は @code{nil}。重複したメッセージが同じフォルダにある場合の動作
を指定します。各項目は、フォルダ名の正規表現と動作からなります。
動作としては以下のものが指定できます。

@example
@code{nil} : 重複メッセージに対し，何もしない．
@code{hide} : 重複メッセージをサマリに表示しない．
@code{read} : 重複メッセージを既読にする．
@end example

@noindent
例えば以下のように設定します (マルチフォルダで重複メッセージを隠す場合)

@lisp
@group
(setq wl-folder-process-duplicates-alist
                 '(("^\\+draft$" . nil) ("^\\+trash$" . nil)
                   ("^\\*.*" . hide) (".*" . read)))
@end group
@end lisp
@end table


@node Message, Draft, Summary, Top
@chapter メッセージバッファ

メッセージバッファは SEMI/tm の MIME-View mode です。
操作の方法、キーバインドはそれぞれのドキュメントを参照してください。
@xref{MIME-View, , ,mime-ui-ja, a MIME user interface for GNU Emacs}.

メッセージの先頭で @kbd{p}、メッセージの最後尾で @kbd{n} を押すと、サマ
リモードに戻ります。また、@kbd{l} を押すと、サマリモードバッファの表示が
トグルされます。

@section キーバインド
@cindex Keybind, Message Mode
@cindex Keybind, Message Buffer

@table @kbd
@item l
@kindex l (Message)
@findex wl-message-toggle-disp-summary
サマリモードバッファを表示するかどうかをトグルします。
(@code{wl-message-toggle-disp-summary})

@item Button-2
@findex wl-message-refer-article-or-url
@kindex Button-2 (Message)
マウスポインタの位置に @samp{Message-ID:} があったときに対応するメッセー
ジが見つかれば表示します。(@code{wl-message-refer-article-or-url})

@item Button-4 (ホイールつきマウスのホイールを上へ)
@kindex Button-4 (Message)
@findex wl-message-wheel-down
メッセージを上にスクロールします。メッセージの末尾まで到達すると、
次のメッセージに移動します。
(@code{wl-message-wheel-down})

@item Button-5 (ホイールつきマウスのホイールを下へ)
@kindex Button-5 (Message)
@findex wl-message-wheel-up
メッセージを上にスクロールします。メッセージの先頭まで到達すると、
前のメッセージに移動します。
(@code{wl-message-wheel-up})
@end table

@section カスタマイズ変数

@table @code
@item wl-message-window-size
@vindex wl-message-window-size
初期設定は @code{(1 . 4)}。cons セルで、car 値: cdr 値がサマリのウィンド
ウ幅：メッセージのウィンドウ幅となります。
@item wl-message-ignored-field-list
@vindex wl-message-ignored-field-list
(SEMI のみ) 初期設定は nil。
メッセージバッファに表示しないヘッダフィールドを正規表現のリストで
指定します。
nil なら、mime-view-ignored-field-list の値が使われます。
@item wl-message-visible-field-list
@vindex wl-message-visible-field-list
(SEMI のみ) 初期設定は nil。
メッセージバッファに必ず表示したいヘッダフィールドを正規表現のリストで
指定します。wl-message-ignored-field-list より優先されます。
nil なら、mime-view-visible-field-list の値が使われます。
@item wl-message-sort-field-list
@vindex wl-message-sort-field-list
(SEMI のみ) 初期設定は 
'("Return-Path" "Received" "^To" "^Cc" "Newsgroups" "Subject" "^From")。
メッセージバッファに表示するヘッダフィールドの順番を正規表現のリストで
指定します。
@end table


@node Draft, Disconnected Operations, Message, Top
@chapter ドラフトバッファ

サマリモードで @kbd{w} を押す等することにより新規ドラフトバッファが用意
されます。このバッファでメール、ニュース記事の(新規)編集、送信を行います。

@section 使い方(TIPS)

基本は Emacs 標準のメールモードです。

@subsection アドレスの補完

初期状態では @samp{To:} にカーソルがあります。送信相手のアドレスを入力し
てください。@kbd{@key{TAB}} で補完します。

ニュース記事として出したい場合は、@samp{Newsgroups:} フィールドを自分で
書き加えてください。フィールド名は @kbd{@key{TAB}} で補完します。

編集中のドラフトをセーブすると、@code{wl-draft-folder} に設定されたドラ
フトフォルダに追加されます。

@samp{FCC:} フィールドで送信したメッセージのコピーを保存しておくフォルダ
を指定することができます。

@subsection メッセージの編集

マルチパートの編集は SEMI/tm の MIME 編集モードを利用しています。
編集の方法は各パッケージ付属のドキュメントを参照してください。
@xref{MIME-Edit, , ,mime-ui-ja, a MIME user interface for GNU Emacs}.

@subsection メッセージの動的な変更
@vindex wl-draft-config-alist
@c @cindex Chage Message
@c @cindex Message, Chage Dynamic

@code{wl-draft-config-alist} を設定することで、ヘッダやその他の情報によ
り、自動的に他のヘッダや本文を変更することができます。

変数 @code{wl-draft-config-alist} について説明します。この変数の初期設定
は @code{nil} です。

例えば以下のように設定すると、@code{wl-draft-send-and-exit} や
@code{wl-draft-send} を実行した時にヘッダが変更されます。
@code{wl-interactive-send} を non-nil に設定しておくと、送信前に変更点が
確認できるので安心です。

@lisp
@group
(setq wl-draft-config-alist
      '(((string-match "aaa.example.com$" (system-name))
         ;; @r{式がnon-nilなら適用する}
         (wl-smtp-posting-server . "mailserver-B")
         (wl-nntp-posting-server . "newsserver-B")
         ;; @r{一時的な変数の設定}
         )
        ("^To: .*user@@aaa.bbb.example.com"
         ;; @r{ドラフトバッファのヘッダにマッチすれば適用する}
         ("Organization" . (format "Go %s" my-webpage)))
                           ;; @r{elisp 式が書ける (eval しているだけ)}
         (top . "  ○○です。\n")    ;; @r{本文先頭へ文字列を挿入します}
         (bottom . "\n以上です。\n") ;; @r{本文末尾へ文字列を挿入します}
        ))
@end group
@end lisp

@code{wl-draft-config-alist} は次の形式になっています。

@example
@group
'((@var{ヘッダの正規表現} または elisp式
   ("@var{Field}" . 値(elisp式))
   (@var{variable} . 値(elisp式))
   (@var{サブ関数} . 値(elisp式))
   @var{関数}
   @dots{})
  (@var{ヘッダの正規表現} または elisp式
   ("@var{Field}" . 値(elisp式))
   @dots{}))
@end group
@end example

[サブ関数]には、デフォルトで以下の10個が用意されています。

@example
'header:      ヘッダの末尾に指定した文字列を挿入します。
'header-file: ヘッダの末尾に指定したファイルを挿入します。
'x-face:      指定したファイルの内容を持つ @samp{X-Face:} フィールドを
              挿入します。
'top:         本文の先頭に指定した文字列を挿入します。
'top-file:    本文の先頭に指定したファイルを挿入します。
'body:        本文を指定した文字列に置き換えます。
              @code{nil} を指定すると本文の文字列を削除します。
'body-file:   本文を指定したファイルの内容で置き換えます。
'bottom:      本文の末尾に指定した文字列を挿入します。
'bottom-file: 本文の末尾に指定したファイルを挿入します。
'template:    指定したテンプレートを適用します。
              (次項 テンプレートの挿入参照)
@end example

また、これらは @code{wl-draft-config-sub-func-alist} に定義されており、
変更したり自分で作った関数を追加することができます。関数の書き方はここで
説明するより直接コードを見た方が分かりやすいでしょうから省略します。

各要素の1番目には @var{ヘッダの正規表現} か elisp 式 を指定します。elisp
式の場合は評価した値が non-nil の場合に適用されます。

また、デフォルトでは複数の要素がマッチまたは non-nil になった場合に、その
全てが適用されますが、変数 @code{wl-draft-config-matchone} を@code{t} に
することで最初にマッチした1つだけを適用することもできます。

要素の2番目には cons か関数の list を指定します。cons にはヘッダの Field 
か変数、サブ関数を指定し、Field を指定した場合はその Field を変更、変数
を指定した場合は一時的にその変数値を変更します。

値には文字列や変数の他、elisp式がそのまま記述でき、もし、Field の値が
@code{nil} ならばその Field を削除します。

つづいて、次の例を見て下さい。

@lisp
@group
(setq wl-draft-config-alist
      '((reply                         ;; @r{(1)}
         "X-ML-Name: \\(Wanderlust\\|emacs-mime-ja\\|apel-ja\\)"
         ;; @r{返信元バッファのヘッダにマッチすれば適用する}
         (body . "  こんにちは\n")
         (template . "default")
         )))
@end group
@end lisp

この例 (1)のように、ヘッダの正規表現の前に @code{reply} をつけると
@code{wl-summary-reply} などでドラフトを作成した場合、返信元のヘッダにマッ
チすれば適用されるようになります。ただし、@code{wl-draft} を実行したとき
など返信元のバッファがない場合は無視されます。

何も特別な設定をしなければ、@code{wl-draft-config-alist} は、
@code{wl-draft-send-and-exit} か @code{wl-draft-send} が実行される直前に
一度だけ適用されます。送信を取りやめた後に再度 
@code{wl-draft-config-alist} を適用したい場合は、@kbd{C-c C-e}
(@code{wl-draft-config-exec}) を実行してください。

@code{wl-draft-send-and-exit}、@code{wl-draft-send} の実行時に自動的に 
@code{wl-draft-config-alist} を適用したくない場合は、次のように設定して
下さい。

@lisp
(remove-hook 'wl-draft-send-hook 'wl-draft-config-exec)
@end lisp

ドラフトバッファの作成時に自動的に
@code{wl-draft-config-alist} を適用したい場合は、次のように設定します。

@lisp
(add-hook 'wl-mail-setup-hook 'wl-draft-config-exec)
@end lisp

サマリモードから 'E'(@code{wl-summary-reedit})を押してメールを
編集する時にも自動的に @code{wl-draft-config-alist} を適用したい場合は、
次のように設定します。

@lisp
(add-hook 'wl-draft-reedit-hook 'wl-draft-config-exec)
@end lisp

@subsection テンプレートの挿入
@cindex Template
@cindex Apply Template

変数 @code{wl-template-alist} を設定し、ドラフトバッファで@kbd{C-c C-j} 
もしくは @kbd{M-x wl-template-select}と入力することで適用します。
@code{wl-template-alist} の書式は @code{wl-draft-config-alist} とほぼ同
じです。

@lisp
@group
(setq wl-template-alist
      '(("default"
         ("From" . wl-from)
         ("Organization" . "~/.wl sample")
         (body . "  ○○です。\n"))
        ("report"
         (template . "default")                 ;; @r{(a)}
         ("To" . "jousi@@example.com")
         ("Subject" . "報告")
         (body-file . "~/work/report.txt")
         )
        ))
@end group
@end lisp

このようにヘッダの正規表現の代わりに @samp{default} や @samp{report} の
ように各要素の名前(テンプレート名)をつけるだけです。各要素の定義は 
@code{wl-draft-config-alist} と同じであるので、(a)のように別のテンプレー
トを呼ぶことも可能です。

コマンド @code{wl-template-select} を実行すると、テンプレートの選択を行
いますが、変数@code{wl-template-visible-select}により動作が異なります。

@code{wl-template-visible-select} が @code{t} (デフォルト)の場合、ドラフ
トバッファの下に適用後のバッファウィンドウが表示されるので、それを見なが
ら @kbd{n} と @kbd{p} で選択します。そしてリターンキーで決定すると実際に
ドラフトバッファに適用されます。@kbd{q} を押した場合なにも適用されません。
なお、@code{wl-template-buffer-lines} でウィンドウの大きさが変更できます。

@code{wl-template-visible-select} が @code{nil} の場合、ミニバッファでテ
ンプレート名を入力することで選択します。

また、@code{wl-draft-config-alist} の例のように例えば

@lisp
(template . "default")
@end lisp

@noindent
と書くことで @samp{default} のテンプレートを適用することができます。

@subsection POP-before-SMTP によるメールの送信
@cindex POP-before-SMTP
@cindex SMTP-after-POP

POP-before-SMTP によるメールの送信ができます。
設定は、

@lisp
(setq wl-draft-send-mail-func 'wl-draft-send-mail-with-pop-before-smtp)
@end lisp

@noindent
の1行のみですが、必要に応じて以下の変数を設定してください。

@table @code
@item wl-pop-before-smtp-user
POP-before-SMTP で認証を行なうときの POP ユーザ名です。
設定されていない場合は @code{elmo-default-pop3-user} が使われます。

@item wl-pop-before-smtp-server
POP-before-SMTP で認証を行なうときの POP サーバ名です。
設定されていない場合は @code{elmo-default-pop3-server} が使われます。

@item wl-pop-before-smtp-authenticate-type
POP-before-SMTP で認証を行なうときの POP 認証方式です。
設定されていない場合は @code{elmo-default-pop3-authenticate-type}
が使われます。

@item wl-pop-before-smtp-port
POP-before-SMTP で認証を行なうときの POP ポート番号です。
設定されていない場合は  @code{elmo-default-pop3-port} が使われます。

@item wl-pop-before-smtp-stream-type
Non-nil なら SSL を利用して POP コネクションを張ります。@code{starttls} 
なら STARTTLS (RFC2595)を利用してコネクションが張られます。設定されていな
い場合は @code{elmo-default-pop3-stream-type} が使われます。
@end table

POP-before-SMTP 用の変数 (@code{wl-pop-before-smtp-*})が設定されていない
場合は、POP フォルダの設定 (@code{elmo-default-pop3-*}) が用いられます。
そのため、SMTP サーバと POP サーバの実体が同じで、デフォルト設定の POP フォル
ダ(@samp{&} など)が利用可能なら、設定は不要です。

なお、POP-before-SMTP については以下を参照してください。

@example
@group
http://spam.ayamura.org/tools/smPbS.html
http://www.iecc.com/pop-before-smtp.html
@end group
@end example

@section キーバインド
@cindex Keybind, Draft Mode
@cindex Keybind, Draft Buffer

@table @kbd
@item C-c C-y
@kindex C-c C-y (Draft)
@findex wl-draft-yank-original
現在表示中のメッセージバッファの内容を引用します。
(@code{wl-draft-yank-original})

@item C-c C-p
@kindex C-c C-p (Draft)
@findex wl-draft-preview-message
現在のドラフトの内容をプレビューします。
MIME のマルチパートメッセージの確認に使うと便利です。
(@code{wl-draft-preview-message})

@item C-c C-s
@kindex C-c C-s (Draft)
@findex wl-draft-send
現在のドラフトの内容を送信します。ドラフトバッファは消去しません。
複数の人に少しずつ内容を変えてメッセージを送りたい場合に便利です。
(@code{wl-draft-send})

@item C-c C-c
@kindex C-c C-c (Draft)
@findex wl-draft-send-and-exit
現在のドラフトの内容を送信し、ドラフトバッファを消去します。
(@code{wl-draft-send-and-exit})

@item C-x C-s
@kindex C-x C-s (Draft)
@findex wl-draft-save
現在のドラフトをセーブします。
(@code{wl-draft-save})

@item C-c C-k
@kindex C-c C-k (Draft)
@findex wl-draft-kill
現在のドラフトを破棄します。
セーブしていた場合、@samp{+draft} フォルダからも削除されます。
(@code{wl-draft-kill})

@item C-x k
@kindex C-x k (Draft)
@findex wl-draft-mimic-kill-buffer
現在のドラフトを破棄します。
(@code{wl-draft-mimic-kill-buffer})

@item C-c C-z
@kindex C-c C-z (Draft)
@findex wl-draft-save-and-exit
現在のドラフトをセーブし、ドラフトバッファを消去します。
ドラフトの編集を中断したいときに便利です。
@samp{+draft} フォルダに入って @kbd{E} (@code{wl-summary-reedit} を押せば、
編集を再開できます。
(@code{wl-draft-save-and-exit})

@item C-c C-r
@kindex C-c C-r (Draft)
@findex wl-caesar-region
指定されたリージョンをシーザ暗号でエンコード/デコードします。
(@code{wl-caesar-region})

@item M-t
@kindex M-t (Draft)
@findex wl-toggle-plugged
Wanderlust のオフラインモード/オンラインモードをトグルします。
(@code{wl-toggle-plugged})

@item C-c C-o
@kindex C-c C-o (Draft)
@findex wl-jump-to-draft-buffer
他のドラフトバッファがあれば移動します。
また、prefix argument をつけることにより、バッファが存在していない場合は、
ドラフトフォルダからファイルを(存在すれば)読み込みます。
(@code{wl-jump-to-draft-buffer})

@item C-c C-e
@kindex C-c C-e (Draft)
@findex wl-draft-config-exec
@code{wl-draft-config-alist}を適用します。
(@code{wl-draft-config-exec})

@item C-c C-j
@kindex C-c C-j (Draft)
@findex wl-template-select
テンプレートを選択します。
(@code{wl-template-select})

@item C-c C-a
@kindex C-c C-a (Draft)
@findex wl-draft-insert-x-face-field
ファイル @file{~/.xface} (変数 @code{wl-x-face-file} の値) の内容を
ドラフトバッファに @samp{X-Face:} フィールドとして挿入します。

エンコードされた X-Face 文字列をあらかじめファイル @file{~/.xface}
の内容に用意しておく必要があります。
(@code{wl-draft-insert-x-face-field})
@end table

@section カスタマイズ変数

@table @code
@item wl-subscribed-mailing-list
@vindex wl-subscribed-mailing-list
初期設定は @code{nil}。参加しているメーリングリストのリスト。返事のドラ
フトを用意するときに @samp{Mail-Followup-To:} や @samp{Cc:} にこれらが含
まれるときは自分のアドレスを除きます。また、リファイル先を覚えるときにこ
れらが @samp{To:} か @samp{Cc:} に含まれるときには、そのアドレスでリファ
イル先を覚えます。

設定例:

@lisp
@group
(setq wl-subscribed-mailing-list
      '("wl@@lists.airs.net"
        "apel-ja@@m17n.org"
        "emacs-mime-ja@@m17n.org"))
@end group
@end lisp

@item wl-insert-mail-followup-to
@vindex wl-insert-mail-followup-to
初期設定は @code{nil}。Non-nil なら、@samp{Mail-Followup-To:} フィールド
をドラフトバッファに自動的に挿入します。

@item wl-insert-mail-reply-to
@vindex wl-insert-mail-reply-to
初期設定は @code{nil}。Non-nil なら、@samp{Mail-Reply-To:} フィールドを
ドラフトバッファに自動的に挿入します。

@item wl-auto-insert-x-face
@vindex wl-auto-insert-x-face
初期設定は @code{t}。Non-nil でかつ、エンコードされた X-Face 文字列を 
@file{~/.xface} (変数 @code{wl-x-face-file} の値)の内容に用意しておくと、
ドラフトが準備されるときに自動的に @samp{X-Face:} フィールドとして挿入さ
れます。@code{nil} の場合は自動的には挿入されませんが、@kbd{C-c C-a} を
押すとヘッダ部に挿入されます。

@item wl-insert-message-id
@vindex wl-insert-message-id
初期設定は @code{t}。
Non-nil なら、送信時に @samp{Message-ID:} フィールドを自動的に挿入します。

@item wl-local-domain
@vindex wl-local-domain
初期設定は @code{nil}。@code{nil} ならば @samp{Message-ID:} のドメインパー
トは関数 @code{system-name} の返値が設定されます。

@code{system-name} が FQDN (@samp{smtp.gohome.org} のようなホストのフル
ネーム) を返さない場合は、この変数に @strong{必ず} ホスト名を除いたドメ
イン名 (@samp{gohome.org}など) を設定してください。 もし、グローバルな IP
アドレスを持たない場合は、@code{wl-message-id-domain}を設定してください。
(@samp{Message-ID:} のドメインがおかしいと、ネットニュースでふくろ叩きに
あってしまう可能性があります。)

また、この値が設定されている場合、@code{system-name} にこの値を付加した
ホスト名が SMTP の HELO の引数として利用されます。

@item wl-message-id-domain
@vindex wl-message-id-domain
初期設定は @code{nil}。Non-nil なら、@samp{Message-ID:} のドメインパート
に使用されます。グローバルな IP アドレスを持たない場合など、ドメインパー
トを決められない場合は、@code{wl-message-id-domain} に一意な文字列(例え
ば、メールアドレスなど)を設定してください。

@item wl-draft-config-alist
@vindex wl-draft-config-alist
初期設定は @code{nil}。
送信直前にドラフトメッセージを変更します。自動的に 
@code{wl-draft-config-alist} の内容が適用されるのは送信時に一度だけです。
もし，手動で適用する場合は，@kbd{C-c C-e} (@code{wl-draft-config-exec}) 
を使用してください。このコマンドは何度でも適用できます。

@item wl-template-alist
@vindex wl-template-alist
初期設定は @code{nil}。
ドラフトバッファで適用するテンプレートを設定します。

@item wl-draft-config-matchone
@vindex wl-draft-config-matchone
初期設定は @code{nil}。Non-nil なら @code{wl-draft-config-alist} の適用
時に最初にマッチした要素のみを適用します。@code{nil} ならマッチしたもの
すべてを適用します。

@item wl-template-visible-select
@vindex wl-template-visible-select
初期設定は @code{t}。
Non-nil なら別ウィンドウに適用後の状態を表示しながらテンプレートを選択します。

@item wl-template-confirm
@vindex wl-template-confirm
初期設定は @code{nil}。
Non-nil ならウィンドウを表示しながらテンプレートを選択する場合、リターン
キーで選択する時に確認を行います。

@item wl-template-buffer-lines
@vindex wl-template-buffer-lines
初期設定は 7。
@code{wl-template-visible-select}が non-nil の場合、
適用後の状態を表示するウィンドウの大きさを指定します。

@item wl-draft-reply-buffer-style
@vindex wl-draft-reply-buffer-style
初期設定は @code{split}。
@code{split} と @code{full} が指定できます。
@code{full} なら返事を書くときにフレーム全体を使ったドラフトバッファが
用意されます。

@item wl-draft-use-frame
@vindex wl-draft-use-frame
初期設定は @code{nil}。
Non-nil ならドラフト用に新しいフレームを開きます。

@item wl-from
@vindex wl-from
初期設定は変数 @code{user-mail-address} の値。
設定された値をドラフトの @samp{From:} フィールドとして最初から挿入します。

@item wl-envelope-from
@vindex wl-envelope-from
初期設定は @code{nil}。
設定された値を envelope from (MAIL FROM) に使用します。
@code{nil} なら @code{wl-from} のアドレス部分を使用します。

@item wl-user-mail-address-list
@vindex wl-user-mail-address-list
初期設定は @code{nil}。
ユーザのアドレスリストです。
アドレスを複数持っている場合は設定してください。

@item wl-fcc
@vindex wl-fcc
初期設定は @code{nil}。
Non-nil なら、設定された値をドラフトの @samp{Fcc:} として最初から挿入します。
関数が指定されている場合、関数の返り値(string) が挿入されます。

@item wl-bcc
@vindex wl-bcc
初期設定は @code{nil}。
Non-nil なら、設定された値をドラフトの @samp{Bcc:} として最初から挿入します。

@item wl-reply-subject-prefix
@vindex wl-reply-subject-prefix
初期設定は @samp{Re: }。
返信時のドラフトの @samp{Subject:} で、元記事の @samp{Subject:} の先頭に
付け加える文字列です。

@item wl-draft-reply-use-address-with-full-name
@vindex wl-draft-reply-use-address-with-full-name
初期設定は @code{t}。
Non-nil なら返信アドレスの @samp{To:}, @samp{Cc:} フィールドに相手のフル
ネームを挿入します。@code{nil} ならアドレスだけを挿入します。

@item wl-draft-enable-queuing
@vindex wl-draft-enable-queuing
初期設定は @code{t}。
オフライン送信するかどうかを示すフラグです。Non-nil ならオフライン送信します。

@item wl-draft-use-cache
@vindex wl-draft-use-cache
初期設定は @code{nil}。送信するメッセージをキャッシュするかどうかを示すフ
ラグです。Non-nil ならキャッシュします。ただし @code{wl-insert-message-id}が
nil の場合はキャッシュされません。

@item wl-auto-flush-queue
@vindex wl-auto-flush-queue
初期設定は @code{t}。
オンラインになったときに自動的にキューを送信するかどうかを示すフラグです。
Non-nil なら自動的に送信します (一応 @code{y-or-n-p} で確認します)。
手動でキューを送信するには、フォルダモードで @kbd{F} を押してください。

@item wl-ignored-forwarded-headers
@vindex wl-ignored-forwarded-headers
初期設定は @samp{\\(received\\|return-path\\|x-uidl\\)}。
転送時に削除するヘッダフィールド名を正規表現で指定します。

@item wl-ignored-resent-headers
初期設定は @samp{\\(return-receipt\\|[bdf]cc\\)}。
再送時に削除するヘッダフィールド名を正規表現で指定します。

@item wl-draft-always-delete-myself
@vindex wl-draft-always-delete-myself
Non-nil なら、自分宛てのメールに返信する場合、常に @samp{To:},
@samp{Cc:} から自分のメールアドレスを削除します。

@item wl-draft-delete-myself-from-bcc-fcc
@vindex wl-draft-delete-myself-from-bcc-fcc
Non-nil で、@samp{To:}, @samp{Cc:} が 変数 @code{wl-subscribed-mailing-list} に
含まれている場合、@samp{Bcc:} , @samp{FCC:} をつけません．

@item wl-smtp-posting-server
@vindex wl-smtp-posting-server
初期設定は @code{nil}。
メール送信時の SMTP サーバ名です。

@item wl-smtp-posting-user
@vindex wl-smtp-posting-user
初期設定は @code{nil}。
SMTP AUTH による認証を行なうときのユーザ名です。
@code{nil} なら @code{smtp-authenticate-user} を使います。

@item wl-smtp-authenticate-type
@vindex wl-smtp-authenticate-type
初期設定は @code{nil}。
SMTP AUTH による認証を行なうときの認証方式です。
@code{nil} のままなら @code{smtp-authenticate-type}を利用します。
@code{smtp-authenticate-type} も @code{nil} なら認証を行いません。

@item wl-smtp-connection-type
@vindex wl-smtp-connection-type
初期設定は @code{nil}。
SMTP のコネクションをどのように張るかを指定します。
@code{nil} なら @code{smtp-connection-type} を利用します。
@code{starttls} なら STARTTLS (RFC2595)を利用してコネクションが張られます。

@item wl-nntp-posting-server
@vindex wl-nntp-posting-server
初期設定は @code{nil}。
ニュース投稿時の NNTP サーバ名です。
@code{nil} なら @code{elmo-default-nntp-server} を使います。

@item wl-nntp-posting-user
@vindex wl-nntp-posting-user
初期設定は @code{nil}。
ニュース投稿時に AUTHINFO による認証を行なうときのユーザ名です。
@code{nil} なら @code{elmo-default-nntp-user} を使います。
それでも @code{nil} なら AUTHINFO による認証を行ないません。

@item wl-nntp-posting-port
@vindex wl-nntp-posting-port
初期設定は @code{nil}。
ニュース投稿時の NNTP サーバのポート番号。
@code{nil} なら @code{elmo-default-nntp-server} を使います。

@item wl-nntp-posting-stream-type
@vindex wl-nntp-posting-stream-type
初期設定は @code{nil}。
@code{nil} なら @code{elmo-default-nntp-stream-type} を評価します。
Non-nil ならニュース投稿時に SSL を利用します。
@code{starttls}なら STARTTLS (RFC2595)を利用してコネクションが張られます。

@item wl-pop-before-smtp-user
@vindex wl-pop-before-smtp-user
初期設定は @code{nil}。
POP-before-SMTP で POP を行なうときのユーザ名です。
@code{nil} のままなら @code{elmo-default-pop3-user}を利用します。

@item wl-pop-before-smtp-server
@vindex wl-pop-before-smtp-server
初期設定は @code{nil}。
POP-before-SMTP で POP を行なうときのサーバ名です。
@code{nil} のままなら @code{elmo-default-pop3-server}を利用します。

@item wl-pop-before-smtp-authenticate-type
@vindex wl-pop-before-smtp-authenticate-type
初期設定は @code{nil}。
POP-before-SMTP で POP を行なうときの認証方式です。
@code{nil} のままなら @code{elmo-default-pop3-authenticate}を利用します。

@item wl-pop-before-smtp-port
@vindex wl-pop-before-smtp-port
初期設定は @code{nil}。
POP-before-SMTP で POP を行なうときのポート番号です。
@code{nil} のままなら @code{elmo-default-pop3-port}を利用します。

@item wl-pop-before-smtp-stream-type
@vindex wl-pop-before-smtp-stream-type
初期設定は @code{nil}。
POP-before-SMTP で SSL を利用するかどうかを示すフラグです。@code{nil} の
ままなら @code{elmo-default-pop3-stream-type}を利用します。
@code{starttls}なら STARTTLS (RFC2595)を利用してコネクションが張られます。

@item wl-draft-queue-save-variables
@vindex wl-draft-queue-save-variables
オフライン送信時にキューに格納されたメッセージについて保存しておく変数を
リストで指定します。

@item wl-draft-sendlog
@vindex wl-draft-sendlog
初期設定は @code{t}。
@code{t} なら @file{~/.elmo/sendlog} に送信ログを出力します。
ログを出力するタイミングは以下の通りです(失敗の場合も)。

@itemize @minus
@item smtp, qmail による送信
@item fcc によるフォルダへの格納
@item queuing によるフォルダへの格納
@end itemize

@noindent
ただし、@file{im-wl.el} による送信では、
@file{sendlog} には出力せずに @command{imput} のログ機能におまかせします。

@item wl-draft-sendlog-max-size
@vindex wl-draft-sendlog-max-size
初期設定は 20000 (バイト)。
@code{wl-draft-sendlog} が @code{t} の場合、保存したログの大きさが指定し
た大きさ以上になれば、ログをローテーションします。

@item wl-use-ldap
@vindex wl-use-ldap
初期設定は @code{nil}。
Non-nil なら LDAP を利用してアドレス補完します。

@item wl-ldap-server
@vindex wl-ldap-server
初期設定は @samp{localhost}。
アドレス補完に用いる LDAP サーバ名です。

@item wl-ldap-port
@vindex wl-ldap-port
初期設定は @code{nil}．
アドレス補完に用いる LDAP サーバのポート番号です。

@item wl-ldap-base
@vindex wl-ldap-base
初期設定は @samp{c=US}。
アドレス補完時の LDAP 検索の開始点(base)を指定します。

@item wl-draft-remove-group-list-contents
@vindex wl-draft-remove-group-list-contents
初期設定は @code{t}。
Non-nil ならメール送信の際に宛先から group-list の内容を削除します
(group-list とは宛先に含まれる @samp{Group: foo@@gohome.org,
bar@@gohome.org;}のような記述を指します)。
@end table


@node Disconnected Operations, Expire and Archive, Draft, Top
@chapter オフライン処理
@cindex Disconnected Operations
@cindex Offline
@cindex Unplugged

Wanderlust にはオンラインモードとオフラインモードがあります。

@menu
* Off-line State::              オフラインモード
* Enable Operations::           オフラインモードで実行できる操作
* Plugged Mode::                サーバ・ポート別の切り替え
* Off-line State settings::     起動時のオフライン状態設定
* Variables of Plugged Mode::   カスタマイズ変数
@end menu


@node Off-line State, Enable Operations, Disconnected Operations, Disconnected Operations
@section オフラインモード

Wanderlust にはオンラインモードとオフラインモードがあります。オフライン
モードでは、ネットワーク経由でなければ読めないメッセージはアクセスできま
せん(キャッシュされていればアクセスできます)。

モードラインに @samp{[ON]} と表示されているときはオンラインモードにあることを
示しています。モードラインに @samp{[--]} と表示されているときはオフラインモー
ドです。フォルダモード、サマリモードで @kbd{M-t} を押すとオフライン/オン
ラインの切り替えができます。

オフラインモードではサマリモードの @kbd{n} と @kbd{p} の動作が変わり、
キャッシュされていないメッセージへは移動しなくなります。

@file{~/.wl} などで変数 @code{wl-plugged} を @code{nil} に設定してから起
動すると、起動時からオフラインモードとなります。


@node Enable Operations, Plugged Mode, Off-line State, Disconnected Operations
@section オフラインモードで実行できる操作

以下の操作は(対象となるメッセージがキャッシュされていれば) オフラインモー
ドでも実行できます。(変数 @code{elmo-enable-disconnected-operation} (後
述) が non-nil のとき。)
@xref{Plugged Mode}, @xref{Off-line State settings}.

@menu
* Send Messages off-line::      メッセージの送信
* Re-file and Copy queue::      リファイル/コピー (IMAP4)
* Creation of Folders::         フォルダ生成 (IMAP4)
* Marking::                     マーク付け (IMAP4)
* Pre-fetching Reservations::   プリフェッチ (IMAP4, NNTP)
@end menu

オフラインモード中になされたこれらの操作は、Wanderlust がオンラインモー
ドになった瞬間にネットワーク経由でサーバ上に反映されます。


@node Send Messages off-line, Re-file and Copy queue, Enable Operations, Enable Operations
@subsection メッセージの送信

オフライン状態でメール/ニュース記事を送信できます。(@file{im-wl.el} をお
使いの場合は、関係ありません。)オフラインのときに送信されたメッセージは
キューフォルダ @samp{+queue} に溜ります。溜ったメッセージは、オンライン
になったときに一気に送信されます。

オフラインのうちに @samp{+queue} を訪れて、キューにあるメッセージの内容
を確認できます。メッセージを削除することも可能です。(削除されたメッセー
ジはオンラインになっても送信されません。)

@c キューにあるメッセージを再編集することも可能ですが、
@c 問題が起こる可能性がありますのでお勧めできません。


@node Re-file and Copy queue, Creation of Folders, Send Messages off-line, Enable Operations
@subsection リファイル/コピー(IMAP4)

オフライン状態のあいだに実行された IMAP フォルダに対するリファイル/コピー
操作はキューに溜められ、オンラインになったときにサーバ側に反映されます。
オフライン・リファイル/コピーの後、リファイル/コピー先のフォルダを訪れ
ると、オフラインでもメッセージが追加されているように見えます。

オフライン・リファイルのキュー処理時の削除処理は安全を期してサーバ上のメッ
セージと @samp{Message-ID:} が一致した場合のみ削除します。また、キュー処
理時にリファイル/コピー先に指定されたフォルダにメッセージを追加するのに
失敗したときは @samp{+lost+found} フォルダに追加されます。


@node Creation of Folders, Marking, Re-file and Copy queue, Enable Operations
@subsection フォルダ生成(IMAP4)

IMAP フォルダの生成もオフライン状態で実行できます。オンラインになったと
きにフォルダ生成がサーバに反映されますが、このとき、何らかの原因でフォル
ダ生成が失敗してしまった場合、オフライン中に生成されたフォルダへリファイ
ルされたメッセージは @samp{+lost+found} フォルダに追加されます。


@node Marking, Pre-fetching Reservations, Creation of Folders, Enable Operations
@subsection マーク付け(IMAP4)

IMAP フォルダにあるメッセージに対する未読/既読の情報、および、重要マーク 
@samp{$} がついているかどうか、もオフライン中の変更がオンラインになった
ときにサーバに反映されます。


@node Pre-fetching Reservations,  , Marking, Enable Operations
@subsection プリフェッチ(IMAP4, NNTP)

IMAP もしくは NNTP フォルダにあるメッセージに対して、プリフェッチの予約
をします。プリフェッチの予約がされたメッセージは @samp{!} が付きますが、
この時点ではキャッシュされておらず、オンラインになったときにサーバから
プリフェッチされます。

変数 @code{elmo-enable-disconnected-operation} が @code{nil} なら、これ
らの IMAP4 と NNTP に関するオフライン処理は実行されず、オフライン中のリファ
イル/コピー等の操作は単にエラーになります。

オフライン処理でキャッシュファイルを使うので、キャッシュファイルを手で消
すと Wanderlust が誤動作する恐れがあります。キャッシュを消したいときは
@kbd{M-x elmo-cache-expire-by-size}を実行するようにしてください。
@code{elmo-cache-expire-by-size} はオフライン処理の対象となるメッセージ
のキャッシュは削除しません。


@node Plugged Mode, Off-line State settings, Enable Operations, Disconnected Operations
@section サーバ・ポート別のオンライン、オフラインの切り替え

上記の @kbd{M-t} による操作ではネットワークの状態を一括して切り替えますが、
サーバ・ポート別にオンラインとオフラインを切り替えることもできます。

フォルダモード、サマリモードで @kbd{C-t} を押すと以下のような 
wl-plugged-mode に入り、このモードで各ポートの plug 状態を変更します。

@example
@group
Queuing:[ON] AutoFlushQueue:[--] DisconnectedOperation:[ON]
[ON](wl-plugged)
  [--]hosta
    [--]smtp        +queue: 2 msgs (1,2)        @dots{}@r{sending queue}
    [--]nntp(119)   +queue: 1 msg (3)           @dots{}@r{sending queue}
  [ON]hostb
    [--]imap4/cram-md5(143) %#mh/wl(prefetch-msgs:3,mark-as-important:1)
                            %inbox(delete-msgids:1)    @dots{}@r{dop queue}
    [ON]nntp(119)
    [ON]smtp
@end group
@end example

1行目はオフライン操作に関係する次の3つの変数の状態を表示し、
それぞれのラベル欄で @kbd{@key{SPC}} や @kbd{@key{RET}} を押すことで
変数の値を簡単に変更できるようになっています。

@example
@group
"Queuing"               @code{wl-draft-enable-queuing}
"AutoFlushQueue"        @code{wl-auto-flush-queue}
"DisconnectedOperation" @code{elmo-enable-disconnected-operation}
@end group
@end example

ここで、@samp{[ON]} はその変数の値が @code{t} であることを、@samp{[--]} 
は @code{nil} であることを示しています。

また、2行目以降ではサーバとポートのオンラインとオフライン状態を表示し、
@samp{[ON]} はそのサーバやポートがオンラインであることを、
@samp{[--]} はオフラインであることを示しています
(XEmacs と Emacs 21 ではアイコンで表示されます)。
そしてそれぞれの行で @kbd{@key{SPC}} や @kbd{@key{RET}} を押すことで
状態を切り替えることができます。

@dfn{sending queue} はオフライン送信時に @samp{+queue} フォルダに格納さ
れている送信待ちのメッセージを指し、@dfn{dop queue} はオフラインで行った
リファイル/コピー等の操作を指すとします。
@c 変数 @code{elmo-enable-disconnected-operation} が non-nil なら
@c オフライン操作ができます。

そしてもし、これらの sending queue や dop queue があればその状態が画面に
表示されます。上記例では、sending queue には hosta の smtp 向けに 2 つ
(queue フォルダの1番と2番)と、hosta の nntp 向けに 1 つ(3番)のメッセージ
があり、dop queue には @samp{%inbox} の操作が1つと、@samp{%#mh/wl} の操
作が2つあることを示しています。

このモードで2行目にある @samp{(wl-plugged)} を変更すると、
@code{wl-plugged} 変数が変更され、これによりモードラインの indicator と
全体の ポート plug 状態が ON/OFF されます。また、各サーバやポートの plug 
状態を変更すると、@code{elmo-plugged-condition} (後述)の設定と各ポートの 
plug 状態により 2行目の @samp{(wl-plugged)} が変化します。


@node Off-line State settings, Variables of Plugged Mode, Plugged Mode, Disconnected Operations
@section 起動時のオフライン状態設定

前述の通り、@file{~/.wl} などで変数 @code{wl-plugged} を @code{nil} に設
定してから起動すると、起動時からオフラインモードにすることができますが、
さらに細かくサーバやポート毎にオフライン状態を設定することもできます。併
せて変数 @code{wl-reset-plugged-alist} も参照下さい。

通常、起動時には @file{~/.folder} と @code{wl-smtp-posting-server},
@code{wl-nntp-posting-server} などから各ポートの plug 状態が自動的に追加
されますが、これらのポートの plug 状態を変更したり、上記以外のポートを追加
したりする場合には @code{wl-make-plugged-hook} に変更する関数を記述しま
す。

@lisp
@group
(add-hook 'wl-make-plugged-hook
          '(lambda ()
             (elmo-set-plugged plugged値(t/nil) server port)
                     ;; @r{server,portのplug状態を新規追加もしくは変更する}
             (elmo-set-plugged plugged値(t/nil) server)
                     ;; @r{port を省略するとserverの全portが変更される}
                     ;; @r{(port を省略して新規の追加はできない)}
             ))
@end group
@end lisp


@node Variables of Plugged Mode,  , Off-line State settings, Disconnected Operations
@section カスタマイズ変数

@table @code
@item wl-plugged
@vindex wl-plugged
この値を @code{nil} に設定して Wanderlust を起動すると、起動時からオフラ
インモードとなります。

@item wl-queue-folder
@vindex wl-queue-folder
初期設定は @samp{+queue}。送信キューのメッセージが溜るフォルダ。

@item wl-auto-flush-queue
@vindex wl-auto-flush-queue
初期設定は @code{t}。オンラインになったときに自動的にキューを送信するか
どうか。Non-nil なら自動的に送信します (一応 @code{y-or-n-p} で確認
します)。手動でキューを送信するには、フォルダモードで @kbd{F} を押してく
ださい。

@item elmo-enable-disconnected-operation
@vindex elmo-enable-disconnected-operation
初期設定は @code{nil}。IMAP4 に関するオフライン処理を実行するかどうか。
Non-nil ならオフライン処理を実行します。

@item elmo-lost+found-folder
@vindex elmo-lost+found-folder
初期設定は @samp{+lost+found}。オフライン・リファイル/コピーのキュー処理
でメッセージの追加に失敗したときにメッセージを退避させるフォルダです。

@item elmo-plugged-condition
@vindex elmo-plugged-condition
初期設定は @code{one}。
@code{wl-plugged} の値は関数 @code{elmo-plugged-p} (引数なし)の戻り値に
より決定されます。この変数 @code{elmo-plugged-condition} は 
@code{(elmo-plugged-p)} の戻り値が @code{t} になる条件を各ポートの plug 状
態により指定します。

@example
'one         : 1つ以上のポートが plugged なら plugged である
'all         : 全てのポートが plugged なら plugged である
'independent : ポートの plug 状態に関係なく wl-plugged (elmo-plugged)
               を参照する
@var{function}     : 関数 @var{function} の戻り値により変化する
 標準で用意されている関数
 'elmo-plug-on-by-servrs
             : 変数 elmo-plug-on-servers で指定したサーバの plug
               状態により変化する
 'elmo-plug-on-by-exclude-servers
             : 変数 elmo-plug-on-exclude-servers で指定した以外の
               サーバの plug 状態により変化する
                  elmo-plug-on-exclude-servers のデフォルト値は
                   '("localhost"
                     (system-name)
                     (system-name)からドメイン部を除いたもの)
                  である
@end example

@example
@group
例1:
 (setq elmo-plugged-condition 'all)
例2:
 (setq elmo-plug-on-servers '("smtpserver" "newsserver"))
 (setq elmo-plugged-condition 'elmo-plug-on-by-servers)
例3:
 (setq elmo-plug-on-exclude-servers '("localhost" "myname"))
 (setq elmo-plugged-condition 'elmo-plug-on-by-exclude-servers)
@end group
@end example

@item wl-reset-plugged-alist
@vindex wl-reset-plugged-alist
初期設定は @code{t}。Non-nil なら Wanderlust の起動時にサーバ・ポート別
のプラグ状態を @code{wl-plugged} の値により初期化します。

@code{nil} なら、Emacs が動作している間、前回終了した時点のプラグ状態を
保持します。言い換えれば @code{nil} であっても Emacs を再起動すると初期
化されます。
@end table


@node Expire and Archive, Scoring, Disconnected Operations, Top
@chapter メッセージの自動削除とアーカイブ
@cindex Expire and Archive

@menu
* Expire::      期限メッセージの自動削除、アーカイブ
* Archive::     全メッセージのアーカイブ
@end menu


@node Expire, Archive, Expire and Archive, Expire and Archive
@section メッセージの自動削除
@cindex Expire Message

Expire とは、指定した期間を過ぎた古いメッセージを削除する機能です。

しかし、@code{wl-expire} ではメッセージを単純に消すだけではなく、指定したアーカ
イブフォルダに移動することも出来ます。

@section 使い方

@code{wl-expire-alist}を設定して、フォルダモードで @kbd{e}、もしくはサマ
リモードで @kbd{M-e} を押します。

@subsection @code{wl-expire-alist}の設定

次に@code{wl-expire-alist}の設定例を示します。この@code{wl-expire-alist}
の書き方一つで expire の実施方法が大きく変わりますので、慎重に設定してく
ださい。最初のうちは@code{wl-expire-use-log}を @code{t} にセットしておく
と良いでしょう。

@lisp
@group
(setq wl-expire-alist
      '(("^\\+trash$"   (date 14) remove)
                                  ;; @r{削除する。}
        ("^\\+tmp$"     (date 7) trash)
                                 ;; @r{@code{wl-trash-folder} にリファイルする。}
        ("^\\+outbox$"  (number 300) "$outbox;lha")
                                     ;; @r{特定のフォルダにリファイルする。}
        ("^\\+ml/tmp$"  nil)
                        ;; @r{expireしない}
        ("^\\+ml/wl$"   (number 500 510) wl-expire-archive-number1 t)
                           ;; @r{番号ごとにアーカイブする(番号は保持する)。}
        ("^\\+ml/.*"    (number 300 310) wl-expire-archive-number2 t)
                           ;; @r{一定数ごとにアーカイブする(番号は保持する)。}
        ("^\\+nikki$"   (date 30) wl-expire-archive-date)
                           ;; @r{年月ごとにアーカイブする(番号は保持しない)。}
        ))
@end group
@end lisp

各リストの要素は

@example
(@var{フォルダの正規表現}  @var{削除メッセージの指定}  @var{削除先})
@end example

@noindent
となっています。リストの先頭から@var{フォルダの正規表現}にマッチするかど
うかを調べます。もし、@var{フォルダの正規表現}にマッチしないフォルダで、
expire を実行しても何もしません。また、2,3 番目の要素のいずれかが 
@code{nil} であれば expire しません。

@var{削除メッセージの指定}には次のものを指定します。

@table @code
@item (number @var{n1} [@var{n2}])
フォルダにあるメッセージ数に応じて削除を行います。

@var{n1} は削除後のメッセージ数で、
例えば値が 500 なら最新の 500 個を残して残りを削除することになります。

@var{n2} は expire を実行するためのメッセージの総数で、省略すると 
@var{n1} + 1 になります。例えば値が 510 ならメッセージが 510 以上のとき
に expire を実行することになります。これは自動実行で expire を行うように
した場合、頻繁にメールが来るフォルダでは毎回 expire を実行するため、メー
ルを読むまでに時間がかかり、煩わしくなってしまいます。そこで @var{n2} を 
@var{n1} よりも大きめの値に設定することにより、一定数溜まるまでは expire 
を実行しないようにすることができます。

また、@code{wl-summary-expire-reserve-marks}で指定したメッセージ(重要マー
クや新規・未読マークの付いたメッセージ)は削除しないようになっていますが、
もし、@code{wl-expire-number-with-reserve-marks} が non-nil の場合、この
ようなメッセージも含めて 500 個になるように expire されます。@code{nil} 
の場合は上記メッセージ以外で 500 になるように expire します。

@item (date @var{d1})
メッセージの日付により削除を行います。

@var{d1} は現在より何日前のメッセージを削除するどうかであり、
例えば値が 7 なら 7日より前のメッセージを削除します。
なお、この日付とはメッセージの @samp{Date:} フィールドの日付であり、
メッセージがフォルダに入った日付ではないことに注意してください。

もし、メッセージに @samp{Date:} フィールドがなかったり、@samp{Date:} フィー
ルドが不正な値なら、expire されませんので手で削除するなりして下さい。
@end table

@var{削除先}には次のものを指定します。

@table @asis
@item @code{remove}
即メッセージを削除します。

@item @code{hide}
メッセージをサマリから見えなくします(削除はされません)。

@item @code{trash}
メッセージを @code{wl-trash-folder} に移動します。

@item @var{string}(folder)
メッセージを@var{string}で指定したフォルダに移動します。

アーカイブフォルダを指定すると便利ですが、@samp{$} マークの付いた重要メッ
セージなどは移動されないため、下記の標準関数を使う方がより良いです。

@item @var{function}
指定の関数を呼び出します。

指定した関数には次の3つの引数、フォルダ名、削除するメッセージのリスト、
そしてサマリの msgdb 情報が渡されます。また、関数名の後に関数独自の引数も
指定できます。なお、この関数には@code{wl-summary-expire-reserve-marks}で
指定したメッセージも含んだリストが渡されますので、独自に関数を作る場合は
注意してください。

ここで指定できる関数には、標準で次の3つが用意されています。
これらは指定した方法でアーカイブフォルダにメッセージを移動するものです。
つまり、古いメッセージをフォルダから削除しながら別ファイルに圧縮して保存
しておくことができます。

@table @code
@item wl-expire-archive-number1
削除対象のメッセージ番号に対するアーカイブフォルダにリファイルします。例
えば、102 番であるなら @file{wl-00100.zip}、390 番であるなら 
@file{wl-00300.zip}、などのようにです。なお、
@code{wl-expire-archive-files} を 200 にすると、@file{wl-00000.zip},
@file{wl-00200.zip}, @file{wl-00400.zip}, @dots{} にリファイルしていきま
す。

リファイル先のアーカイブフォルダは削除元のフォルダ名により次のように決定
されます。(このとき、アーカイブフォルダは @code{elmo-archive-treat-file} 
が non-nil の場合として扱われます)

@table @asis
@item フォルダタイプがlocaldirの場合
@file{@var{ArchiveDir}/@var{foldername}-xxxxx.zip}

例えば @samp{+ml/wl} は @samp{$ml/wl;zip}
(@file{~/Mail/ml/wl-00100.zip})となります。

@item フォルダタイプがlocaldir以外の場合
@file{@var{ArchiveDir}/@var{foldertype}/@var{foldername}-xxxxx.zip}

例えば、@samp{%#mh/ml/wl} は @samp{$imap4/#mh/ml/wl;zip}
(@file{~/Mail/imap4/#mh/ml/wl-00100.zip})となります。
@end table

すなわち、localdir の場合は種別がパス名に含まれませんが、それ以外は種別
がパス名に含まれるのです。
また、@code{wl-expire-archive-folder-prefix} により、
アーカイブフォルダに付ける prefix を制御できます。
@code{wl-expire-archive-folder-prefix}の説明を良く見ておいてください。

@item wl-expire-archive-number2
指定した個数ごとにアーカイブフォルダにリファイルします。

@samp{wl-expire-archive-number1}
と異なる点はメッセージ番号に関係なくアーカイブフォルダが指定数に達するまで
そのフォルダにリファイルする、という点です。
なお、リファイル先のアーカイブフォルダは @code{wl-expire-archive-number1}
と同じように決定されます。

@item wl-expire-archive-date
メッセージの日付(年月)ごとにアーカイブフォルダにリファイルします。

例えば、1998年12月のメッセージは @code{$folder-199812;zip} にリファイル
されます。なお、日付の部分以外のアーカイブフォルダ名は 
@code{wl-expire-archive-number1}と同じように決定されます。
@end table

また、上記の3つの標準関数では @code{wl-expire-alist} での第1引数に 
non-nil を指定すると、フォルダのメッセージ番号をそのまま保存することがで
きます。例えば、次のように関数名の後に続けて指定します。

@lisp
("^\\+ml/wl$" (number 300 310) wl-expire-archive-number1 t)
@end lisp

引数を指定しない場合は、各アーカイブフォルダごとに 1 から順に番号が与え
られて保存されます。
@end table

@subsection 重要メッセージや未読メッセージの扱い

削除先に @code{remove} や @code{trash}、フォルダ名、標準関数のいずれを指
定した場合でも、@code{wl-summary-expire-reserve-marks}で指定したマークの
メッセージ(以下、@dfn{reserveメッセージ}と呼びます)は残すようになってい
ます。

この変数にはデフォルトで、重要マーク、新規マーク、未読マークが設定されて
いますので、これらのマークのついたメッセージは削除されないことになります。
ただし、この変数には一時的マークは指定できないため(すなわち削除されるた
め)、expire を実行する前に一時的マークは処理しておいてください。

@subsection 自動実行

サマリに移動すると自動的に expire を実行するには次のような設定を行います。
ただし、この場合は確認せずに自動実行するため、フォルダの正規表現などに誤
りがないかどうかを十分確認してから設定して下さい。

@lisp
@group
(add-hook 'wl-summary-prepared-pre-hook 'wl-summary-expire)
@end group
@end lisp

また、フォルダモードで各フォルダごとに expire を実行できるのはもちろん、
グループ単位の実行も可能です。従って、@samp{Desktop} グループを指定すれ
ば@code{wl-expire-alist}にマッチする全てのフォルダで expire が実行されま
す。

@section TIPS

@subsection 作成したアーカイブフォルダの取り扱い

上記の標準関数 @code{wl-expire-archive-number1} などで作成したアーカイブ
フォルダを扱う場合は、変数 @code{elmo-archive-treat-file} を non-nil に設
定しておく必要があります。

@subsection 動作確認

@code{remove} を指定する場合は、まず @code{trash} にして期待通りにメール
が @code{wl-trash-folder} に移動されることを確認してから @code{remove} 
に変えるとよいでしょう。いきなり @code{remove} を指定するのは危険です。

また、@code{wl-expire-archive-number1}などの関数を利用する場合、まずは使
用するアーカイバタイプ(@code{zip} や @code{lha})などのフォルダを試しに作
って、正しく追加できるかどうかを確認してください。たとえ、
@code{wl-expire-alist} や @code{elmo-archive} の設定が正しくても、アーカ
イブプログラムが正しく動かなければどこにも保存されずにメッセージが消えて
しまうかも知れません。

アーカイブフォルダの動作が確認でき、実際に expire を実行するようになれば、
ログを活用してください。@code{wl-expire-use-log} を @code{t} にすると、
@file{~/.elmo/expired-log}には以下のように記録されます。

@example
@group
delete  +ml/wl  (593 594 595 596 597 598 599)
move    +ml/wl -> $ml/wl-00600;tgz;wl  (600 601 602)
@end group
@end example

最初の項目は動作を示すもので、@samp{delete}, @samp{copy}, @samp{move} が
あります。次が expire を実行したフォルダ名で、@samp{copy} と @samp{move} 
の場合は@samp{->}に続けてコピーもしくは移動先のフォルダ名が記録されます。
最後の項目は、実際に削除や移動されたメッセージ番号のリストです
(@samp{copy} や @samp{move} の場合、移動後ではなく移動前のメッセージ番号
です)。

@subsection reserveメッセージのリファイル

標準で用意されている3つの関数では、reserve メッセージはアーカイブフォルダ
にコピーしますが、元のフォルダからは削除しないようになっています。なお、
重要マークなどは常に残るため、何度もコピーされることがないように
@file{~/.elmo/expired-alist} に記録するようにしています。
ただし、reserve メッセージが refile 対象になったときのみです。
また、@code{wl-summary-archive} などでコピーされる場合は記録されません。

ログ機能を有効にしていた場合は、リファイル時には通常 @samp{move} が記
録されますが、reserve メッセージが含まれていると、@samp{copy} と 
@samp{delete} に分けて記録されます。これは reserve メッセージを含めたメッ
セージをコピーした後、reserve メッセージを除いたメッセージを削除する、
という処理を行っているためです。

@section カスタマイズ変数

@table @code
@item wl-expire-alist
@vindex wl-expire-alist
初期設定は @code{nil}。
expire を行うフォルダと expire 方法の指定を行います。詳しくは上記の
@code{wl-expire-alist}の設定をご覧下さい。

@item wl-summary-expire-reserve-marks
@vindex wl-summary-expire-reserve-marks
初期設定は以下のリスト。

@lisp
@group
(list wl-summary-important-mark
      wl-summary-new-mark
      wl-summary-unread-mark
      wl-summary-unread-uncached-mark
      wl-summary-unread-cached-mark)
@end group
@end lisp

expire を行っても、フォルダには残しておくメッセージのマークを指定します。
マークには永続的マークのみ指定できます。
一時的マークは指定できません。

デフォルトのようにリストで指定するとそのマークのメッセージを残すことがで
きる他、以下の指定もできます。

@table @code
@item all
永続マークの付いたすべてのメッセージを残します。
つまり、デフォルトで設定されているマーク以外に
@code{wl-summary-read-uncached-mark} が含まれます。

@item none
どんなマークの付いたメッセージであっても、通常の既読メッセージと同じ扱い
をします。すなわち、@samp{$} マークの付いた重要メッセージであっても削除
されます。
@end table

@item wl-expire-archive-files
@vindex wl-expire-archive-files
初期設定は 100。
ひとつのアーカイブフォルダに保持するメッセージ数を指定します。

@item wl-expire-number-with-reserve-marks
@vindex wl-expire-number-with-reserve-marks
初期設定は @code{nil}。
Non-nil にすると、
削除メッセージの指定で @code{number} を指定したとき、
残しておくメッセージ数に @code{wl-summary-expire-reserve-marks} で設定さ
れたメッセージを含めます。

@item wl-expire-archive-get-folder-func
@vindex wl-expire-archive-get-folder-func
初期設定は @code{wl-expire-archive-get-folder}。

削除先の標準関数でアーカイブフォルダ名を取得する関数を指定します。
次の3つの変数により簡易なフォルダ名の変更できますが、もっと複雑な指定を
したい場合は新たに関数を作ってこの変数に設定します。

関数@code{wl-expire-archive-get-folder}のカスタマイズ変数には次の
ものがあります。
@itemize @bullet
@item @code{wl-expire-archive-folder-name-fmt}
@item @code{wl-expire-archive-folder-type}
@item @code{wl-expire-archive-folder-prefix}
@end itemize

@item wl-expire-archive-folder-name-fmt
@vindex wl-expire-archive-folder-name-fmt
初期設定は @samp{%s-%%05d;%s}。
@code{wl-expire-archive-number1}および@code{wl-expire-archive-number2}で
使用されるアーカイブのフォルダの @code{format} 形式の文字列を指定します。
なお、2度 @code{format} で指定するため、
かならず番号の部分は @samp{%%d} にしなくてはなりません。

もし、変更する場合は @code{wl-expire-archive-folder-num-regexp}
も合わせるようにしてください。

@item wl-expire-archive-date-folder-name-fmt
@vindex wl-expire-archive-date-folder-name-fmt
初期設定は @samp{%s-%%04d%%02d;%s}。
@code{wl-expire-archive-date}
で使用されるアーカイブのフォルダの @code{format} 形式の文字列を指定します。
なお、2度 @code{format} で指定するため、
必ず番号の部分は @samp{%%d} にしなくてはなりません。
また、メッセージの年と月が与えられるため、@samp{%%d} は2つ必要です。

もし、変更する場合は @code{wl-expire-archive-date-folder-num-regexp}
も合わせるようにしてください。

@item wl-expire-archive-folder-type
@vindex wl-expire-archive-folder-type
初期設定は @code{zip}。
アーカイブフォルダのアーカイバタイプを指定します。

@item wl-expire-archive-folder-prefix
@vindex wl-expire-archive-folder-prefix
初期設定は @code{nil}。
アーカイブフォルダに付ける prefix を指定します。
ただし、アーカイブフォルダに prefix (ディレクトリ構造)を付ける仕様は
おまけ機能ですので、取り扱いは慎重に行って下さい。
最悪の場合，アーカイブファイルを壊す恐れがあります。

@table @code
@item nil
prefix は付きません。

@item short
例えば、@samp{+ml/wl} では prefix @samp{wl} が付き、
@samp{$ml/wl-00000;zip;wl} となります。

@item t
例えば、@samp{+ml/wl} では prefix @samp{ml/wl} が付き、

@samp{$ml/wl-00000;zip;ml/wl} となります。
@end table

@item wl-expire-archive-folder-num-regexp
@vindex wl-expire-archive-folder-num-regexp
初期設定は @samp{-\\([-0-9]+\\);}。
@code{elmo-list-folders} による複数のアーカイブフォルダ名から
番号を取得するための正規表現を指定します。
@code{wl-expire-archive-folder-name-fmt} に対応して設定してください。

@item wl-expire-archive-date-folder-num-regexp
@vindex wl-expire-archive-date-folder-num-regexp
初期設定は @samp{-\\([-0-9]+\\);}。
@code{elmo-list-folders} による複数のアーカイブフォルダ名から
番号を取得するための正規表現を指定します。
@code{wl-expire-archive-date-folder-name-fmt} に対応して設定してください。

@item wl-expire-delete-oldmsg-confirm
@vindex wl-expire-delete-oldmsg-confirm
初期設定は @code{t}。
Non-nil の場合、既に存在しているアーカイブフォルダの最大メッセージ番号よりも
古いメッセージがあった場合に確認してから削除します。
@code{nil} の場合は確認せずに削除します。

なお、標準関数の引数に non-nil を指定して番号を保持するようにした場合の
み有効です。

@item wl-expire-use-log
@vindex wl-expire-use-log
初期設定は @code{nil}。
Non-nil にすると、@file{~/.elmo/expired-log}に expire の実行結果を記録します。
なお、ファイルに追加していく一方なので、適当に手で消す必要があります。

@item wl-expire-add-seen-list
@vindex wl-expire-add-seen-list
初期設定は @code{t}。
Non-nil の場合、expire によりメッセージをリファイルした場合、既読情報を
リファイル先のフォルダに伝えるようにします。

ただし、リファイル先のフォルダを Wanderlust 上から読まないと、
@file{~/.elmo/}以下にある @file{seen} ファイルが大きくなっていくので、
アーカイブフォルダなどに単に保存しておくだけなら
@code{nil} に設定しておくと良いでしょう。@code{nil} に設定しても、
リファイルしたアーカイブフォルダを読むときに新規メッセージ扱いされるだけで、
expire などの動作には影響はありません。

@item wl-expire-folder-update-msgdb
@vindex wl-expire-folder-update-msgdb
初期設定は @code{t}。
@code{t} の場合、フォルダモードで expire を実行するときに、
サマリ情報を update してから expire を実行する。
また、フォルダ名の正規表現のリストを指定した場合は、マッチしたフォルダの
みサマリ情報を update する。
@end table


@node Archive,  , Expire, Expire and Archive
@section メッセージのアーカイブ

@subsection メッセージのアーカイブ
@kbd{M-x wl-summary-archive} でフォルダ全体をアーカイブフォルダにコピーしま
す。既にアーカイブフォルダがある場合、新規メッセージのみ追加します。

@code{wl-expire-alist} と同じ様に、フォルダ名に応じてどのようにアーカイブ
するかを @code{wl-archive-alist} で指定します。例えば以下のようになりま
す。

@lisp
@group
(setq wl-archive-alist
      '(("^\\+tmp$"     wl-archive-date)
        ("^\\+outbox$"  wl-archive-number2)
        (".*"           wl-archive-number1)))
@end group
@end lisp

各リストの要素は次のようになります。

@example
(@var{フォルダの正規表現}  @var{削除関数})
@end example

このように@var{フォルダの正規表現}の後には関数しか指定できません。
標準では次の3つの関数

@itemize @bullet
@item @code{wl-archive-number1}
@item @code{wl-archive-number2}
@item @code{wl-archive-date}
@end itemize

が用意されており、名前からお解りの通り次の点を除いて Expire で用意されて
いるのと同じ動作をします。

@itemize
@item メッセージを削除しない
@item 引数なしであってもメッセージ番号を保持する
@end itemize

フォルダの全メッセージを番号ごとや日付ごとにまとめてアーカイブしたい場合
は、これらの関数を使用するとよいでしょう。
また、expire を行う前のバックアップや動作を確認するのにも有効です。
もっとも、アーカイブ後に expire でリファイルすると、リファイルせずに削除
するだけになります。

デフォルトではコピー先のアーカイブフォルダは
@code{wl-expire-archive-get-folder-func} に従って自動的に決定されますが、
prefix argument を付けて @kbd{C-u M-x wl-summary-archive} で実行すると、
指定したフォルダにコピーすることができます。

しかし、単純に1つのアーカイブフォルダにコピーするだけなら、
@code{wl-summary-copy-region} などで全メッセージをアーカイブフォルダにコ
ピーすることでも可能なため、おまけの機能でしかありません
(つまり、動作確認は不十分です)。

このアーカイブフォルダの決定方法は @code{wl-summary-expire} と同じものを
用いているため、カスタマイズ変数の中で次に示すものが関係してきます。

@itemize @bullet
@item @code{wl-expire-archive-files}
@item @code{wl-expire-archive-get-folder-func}
@item @code{wl-expire-archive-folder-name-fmt}
@item @code{wl-expire-archive-folder-type}
@item @code{wl-expire-archive-folder-prefix}
@item @code{wl-expire-archive-folder-num-regexp}
@end itemize

@subsection カスタマイズ変数

@table @code
@item wl-archive-alist
@vindex wl-archive-alist
初期設定は以下のリスト。

@lisp
((".*" wl-archive-number1))
@end lisp

@noindent
アーカイブフォルダにコピーする処理を行う関数を指定します。この関数には、
フォルダ名、フォルダ内にあるメッセージのリスト、サマリの msgdb 情報、の3つ
の引数が渡されます。もちろんユーザが独自に作って指定することができます。
@end table


@node Scoring, Customization, Expire and Archive, Top
@chapter スコア
@cindex Scoring
@c @cindex Kill File

スコアとは、メッセージにスコア(値)をつけ、
その値により既読マークを付けたりサマリから消したりする機能です。

この機能によって重要なメッセージにまとめ処理用マーク @samp{*} や重要マー
ク@samp{$}をつけたり、spam 記事などの読みたくないメッセージに既読マーク
をつけたりすることができます。

このスコア機能は Gnus のスコアとほぼ同等の機能を持ち、またスコアファイルの
書式もほぼ同じです。ただし、幾つかは未対応であったり Wanderlust 特有の機能
があったりします。
@xref{Scoring, , ,gnus-ja, The gnus Newsreader}.

@menu
* Score Commands::             スコアに関するコマンド
* Score File Format::          スコアファイルの書式
@end menu


@node Score Commands, Score File Format, Scoring, Scoring
@section スコアに関するコマンド
@cindex Score Commands

@subsection スコアファイルの指定方法

変数 @code{wl-score-folder-alist}
にフォルダ名に対応したスコアファイル名かスコアを定義した変数を設定します。

@lisp
@group
(setq wl-score-folder-alist
      '(("^-.*"
         "news.SCORE"
         "my.SCORE")
        (".*"
         "all.SCORE")))
@end group
@end lisp

スコアファイル名のパスを省略した場合は、
変数 @code{wl-score-files-dir} で指定したディレクトリにあるものとします。

また、@code{wl-score-folder-alist} の設定に関わらず
デフォルトのスコアファイル @code{wl-score-default-file} (@file{all.SCORE})
 は必ず読み込まれます(ファイルが存在していなくても構いません)。
したがって、上記例の @samp{^-.*} にマッチしたフォルダでは 
@file{news.SCORE}, @file{my.SCORE}, @file{all.SCORE} の3つのスコアファイル
が読み込まれることになります。

@subsection スコアファイルの対象メッセージ

スコアはサマリの update 時に一時的に @code{wl-summary-score-marks}
で指定したメッセージのみにつけられます。
つまりサマリから抜けるとメッセージにつけられたスコアは消去され、
デフォルトのスコア値に戻ります。

@subsection スコアファイルの作成

まずサマリバッファで適当なメッセージに移動してから @kbd{L} をタイプしま
す。その後ミニバッファでの入力を求められますので、続けて @kbd{s},
@kbd{s}, @kbd{p} とタイプしてみてください。すると Subject の文字列が入力
されている状態になりますので、適当に編集した後 @kbd{@key{RET}} を押します。

これで、入力した文字列と同じ @samp{Subject:} を持つメッセージに対してスコア 
@minus{}1000 がつけられるようになります。
つまり、このようなスコアファイルが自動的に作成されたことになります。

次に、同じサマリバッファで @kbd{h} @kbd{e} とタイプしてください。
すると先ほど作成したスコアファイルが表示されていると思います。
このバッファを@dfn{スコア編集バッファ}と呼びます。
このスコア編集バッファで @kbd{C-c C-e} とタイプすると、
ミニバッファで先ほどと同じような入力を求められると思いますが、
ここで @kbd{a} とタイプしてください。今度はすぐに "From" のスコアエントリが挿
入されたはずです。
このようにしてサマリバッファでもスコア編集バッファでも
スコアファイルを簡単に作成することができます。

ところで、ミニバッファでの入力時に @kbd{s s p} または @kbd{a} とタイプしたように、
キータイプ数が違っていたと思います。
これは、@code{wl-score-header-default-entry} の設定によるものです。
この変数ではヘッダに応じたデフォルトのスコアエントリを設定します。
たとえば、"subject" ヘッダでは型と期限についての入力を求めますが、
"from" ヘッダでは型は substring, 期限は永続に自動的に決定されます。
ただし、スコアの値は prefix argument で強制的に変更することができます。
また、ミニバッファでの入力時に @kbd{?} とタイプすることでキーとそれに対応す
るヘッダや型を(help)を表示します。

では最後に、スコア編集バッファで @kbd{C-c C-c} と入力して下さい。これでスコア
ファイルを保存して編集モードを終了します。バッファの内容を消去してから 
@kbd{C-c C-c} すると編集中のスコアファイルを削除します。

@subsection TIPS

@subsubsection スコアファイルの選択

@code{wl-summary-increase-score} と @code{wl-summary-lower-score} とで追
加するスコアファイルは @code{wl-score-change-score-file} で変更すること
ができます。

@subsubsection スコアの加算

@code{wl-summary-increase-score} や @code{wl-summary-lower-score}、
@code{wl-score-edit-insert-entry} で同じエントリを追加した場合、
スコアが加算されます。

たとえば、@kbd{L a} でスコアが @minus{}1000 の @samp{from} エントリを作成した後、
再度 @kbd{C-u 200 L a} でスコアが @minus{}200 の @samp{from} エントリを作成すると、
スコアが @minus{}1200 のエントリが1つ作成されることになります。

@subsubsection Thread キーの作成

@code{wl-summary-increase-score} か @code{wl-summary-lower-score} で
@samp{Thread}キーを作成すると、子スレッドの @samp{Message-ID} も全て
追加されます。

@subsubsection Followup キーの作成

@code{wl-summary-increase-score} か @code{wl-summary-lower-score} で
@samp{Followup}キーを作成すると、カーソル上のメッセージの
@samp{Message-ID} も @samp{References} キーに追加されます。
もし、@code{wl-score-auto-make-followup-entry} が non-nil であれば
@code{wl-score-expiry-days} で指定した日にち以内の全 followup 対象のメッセー
ジの @samp{Message-ID} が追加されます。

@subsection キーバインド

@table @kbd
@item K
@kindex K (Summary)
@findex wl-summary-increase-score
現在のメッセージのスコアを高くします。
同時にスコアエントリがスコアファイルに追加されます。
また、prefix argument でスコアの値を設定することができます。

@item L
@kindex L (Summary)
@findex wl-summary-lower-score
現在のメッセージのスコアを低くします。
同時にスコアエントリがスコアファイルに追加されます。
また、prefix argument でスコアの値を設定することができます。

@item h R
@kindex h R (Summary)
@findex wl-summary-rescore
スコアを適用し直します。
ただし、既にスコアがつけられているメッセージには、新たにスコアはつきません。

@item h c
@kindex h c (Summary)
@findex wl-score-change-score-file
現在選択しているスコアファイルを変更します。

@item h e
@kindex h e (Summary)
@findex wl-score-edit-current-scores
現在選択しているスコアファイルを編集します。
スコアファイルが複数ある場合先に指定されたファイルが選択されます。

@item h f
@kindex h f (Summary)
@findex wl-score-edit-file
任意のスコアファイルを編集し、このスコアファイルを選択します。

@item h F
@kindex h F (Summary)
@findex wl-score-flush-cache
読み込んだスコアファイルは一旦キャッシュされますが、そのキャッシュを消去します。
Wanderlust 以外で直接スコアファイルを変更した場合は、
キャッシュを消去して再読み込みする必要があります。

@item h m
@kindex h m (Summary)
@findex wl-score-set-mark-below
既読マークを付ける(読んだことにする)スコア基準値を設定します。
この値よりも小さなスコアが既読になります。

@item h x
@kindex h x (Summary)
@findex wl-score-set-expunge-below
サマリから消去するスコア基準値を設定します。
この値よりも小さなスコアが消去されます。
消去といっても表示されないだけであり、サマリ情報やフォルダからは削除されま
せん。
消去されたメッセージは rescan-noscore により再び表示することができます。
@end table

@subsection スコア編集バッファのキーバインド

@table @kbd
@item C-c C-k
@kindex C-c C-k (Score Mode)
@findex wl-score-edit-kill
編集中のファイルを破棄します。

@item C-c C-c
@kindex C-c C-c (Score Mode)
@findex wl-score-edit-exit
編集中のファイルを保存して、編集モードを終了します。

@item C-c C-p
@kindex C-c C-p (Score Mode)
@findex wl-score-pretty-print
スコアを綺麗に表示し直します。

@item C-c C-d
@kindex C-c C-d (Score Mode)
@findex wl-score-edit-insert-date
紀元前1年12月31日からの日数を挿入します。
期限付きのスコアを作るときに期限の要素(3番目)に使用します。

@item C-c C-s
@kindex C-c C-s (Score Mode)
@findex wl-score-edit-insert-header
サマリバッファで選択しているメッセージのヘッダを挿入します。

@item C-c C-e
@kindex C-c C-e (Score Mode)
@findex wl-score-edit-insert-entry
サマリバッファで選択しているメッセージのスコアエントリを追加します。
@end table

@subsection カスタマイズ変数

@table @code
@item wl-summary-default-score
@vindex wl-summary-default-score
初期設定は 0。
スコアのデフォルト値を設定します。この値を元にスコアが加減されます。

@item wl-summary-important-above
@vindex wl-summary-important-above
初期設定は @code{nil}。
この値より大きいスコアに対して重要マーク(@samp{$}) をつけます。
@code{nil} の場合はマークを付けません。

@item wl-summary-target-above
@vindex wl-summary-target-above
初期設定は @code{nil}。
この値より大きいスコアに対してまとめ処理用マーク(@samp{*}) をつけます。
@code{nil} の場合はマークを付けません。

@item wl-summary-mark-below
@vindex wl-summary-mark-below
初期設定は 0。
この値より小さなスコアに対して既読マークをつけます(読んだことにします)。

@item wl-summary-expunge-below
@vindex wl-summary-expunge-below
初期設定は @code{nil}。
この値より小さなスコアはサマリから消去します。
@code{nil} の場合は消去しません。

@item wl-summary-score-marks
@vindex wl-summary-score-marks
初期設定は以下のリスト

@lisp
@group
(list wl-summary-new-mark)
@end group
@end lisp

@noindent
スコアをつけるメッセージのマークを指定します。

@item wl-use-scoring
@vindex wl-use-scoring
初期設定は @code{t}。
Non-nil ならスコア機能を有効にします。

@item wl-score-files-dir
@vindex wl-score-files-dir
初期設定は @file{~/.elmo/}。
スコアファイルをデフォルトのディレクトリを指定します。

@item wl-score-interactive-default-score
@vindex wl-score-interactive-default-score
初期設定は 1000。
スコアファイルでスコア要素が @code{nil} の時に用いるスコアを指定します。
また、@code{wl-summary-increase-score} や @code{wl-summary-lower-score}
でつけるスコア値でも用いられます。ただし、
@code{wl-score-header-default-entry} のスコア値が @code{nil} の時。

@item wl-score-expiry-days
@vindex wl-score-expiry-days
初期設定は 7。
期限付きスコアを削除する日数を指定します。

@item wl-score-update-entry-dates
@vindex wl-score-update-entry-dates
初期設定は @code{t}。
Non-nil なら期限付きスコアを削除する機能を有効にします。

@item wl-score-header-default-entry
@vindex wl-score-header-default-entry
@code{wl-summary-increase-score} や @code{wl-summary-lower-score}、
@code{wl-score-edit-insert-entry} でスコアエントリを作成する場合の
各ヘッダのデフォルト値を設定します。

@item wl-score-simplify-fuzzy-regexp
@vindex wl-score-simplify-fuzzy-regexp
スコアエントリの型で @code{fuzzy} を指定した場合、
文字列から削除する正規表現を指定します。
@code{Subject} で使用されることが多いので、デフォルトでは
メーリングリストプログラムでつけられる prefix を指定しています。

@item wl-summary-rescore-partial-threshold
@vindex wl-summary-rescore-partial-threshold
初期設定は 200。
sync-all や rescan が実行されたときに、この値を越えるメッセージが
サマリにある場合、サマリの最後から指定された数のメッセージだけ、
部分的にスコア付けが適用されます。

@item wl-summary-auto-sync-marks
@vindex wl-summary-auto-sync-marks
Non-nil ならば、サマリ同期時に未読/重要マークも同期します。
未読マークは、IMAP4 サーバ上の未読情報が反映されます。
重要マークは IMAP4 サーバ上の重要情報(Flagged フラグがついているか)、
および @samp{'mark} フォルダの内容が、反映されます。
初期設定は @code{t}。
@end table


@node Score File Format,  , Score Commands, Scoring
@section スコアファイル書式
@cindex Score File Format

スコアファイルの書式は Gnus と同じなので、Gnus で使用していた
スコアファイルがそのまま利用できます。
ただし、幾つかのキーは対応していなかったり Wanderlust 特有のキーがあったり
しますので、完全に互換性があるわけではありません。
@xref{Score File Format, , ,gnus-ja, The gnus Newsreader}.

@lisp
@group
(("subject"
  ("for sale" -1000 nil s)
  ("儲け" -1000 nil s))
 ("from"
  ("spam@@spamspamspam" -10000 nil s))
 ("followup"
  ("my@@address" 3001 nil s))
 ("chars"
  (1000000 -10 nil >))
 (important 5000)
 (target 3000)
 (mark 0)
 (expunge -3000))
@end group
@end lisp

@table @code
@item 文字列 (STRING)
キーが文字列である場合、マッチさせるヘッダの名前を指定します。
このキーには次のものが指定できます。
@code{Subject}, @code{From}, @code{Date}, @code{Message-Id},
@code{References}, @code{To}, @code{Cc}, @code{Chars}, @code{Lines},
@code{Xref}, @code{Extra}, @code{Followup}, @code{Thread}
この中で、@code{Chars} はメッセージのサイズを指し、@code{Extra},
@code{Followup}, @code{Thread} については後述します。
残りはキーと同じ名前のフィールドが対象となります。

このキーの後にスコアエントリを任意の数だけ指定し、
この各スコアエントリは次の5つの要素からなります。

@enumerate
@item
ヘッダにマッチする要素。@code{lines} と @code{chars} の場合は数字で、そ
れ以外は文字列を指定します。

@item
スコア要素。１番目の要素がマッチした場合、そのメッセージのスコアをこの値分
増減させます。

@item
期限の要素。@code{nil} なら永続(permanent)指定で、
数字(日数)なら一定期間(@code{wl-score-expiry-days})マッチしないと削除されます。
この日数は紀元前1年12月31日から経過した日にちです。

@item
型の要素。１番目の要素をマッチさせる方法を指定します。
キーによって指定できる型が異なります。

@table @dfn
@item From, Subject, References, Message-Id
これらの文字列のキーに対しては、@code{r} と @code{R} (正規表現) (regexp) 
や、@code{s} と @code{S} (文字列の一部) (substring)、@code{e} と 
@code{E} (正確な合致) (exact match)、それに @code{f} と @code{F}
(あいまい) (fuzzy) が指定できます。
@code{R}, @code{S}, @code{E}, @code{F} は大文字小文字を区別してマッチさせます。

@item Lines, Chars
これらは数字の大小を指定します。その記号は次の5つです。
@code{<}, @code{>}, @code{=}, @code{>=}, @code{<=}

@item Followup
このキーは、@code{From}ヘッダーにマッチし、
そのメッセージへの全てのフォローアップに対してスコアをつけます。
たとえば、自分自身の記事へのフォローアップのスコアを増やしたりするのに便利です。

@code{f} を除いて @code{From} キーと同じ型が指定出来ます。
また、自動的にスコアファイルに @samp{Followup} エントリが追加されます。

@item Thread
このキーは、@code{Message-ID} @var{x} で始まっている(サブ)スレッドにスコアを付ける場合に指定します。
これは @code{References} ヘッダーに @var{x} を持つそれぞれの記事に新しい
@samp{Thread} エントリを自動的に追加します。
これにより、全ての祖先の @code{Message-ID} を @code{References} に含んでいない場合でも、
確実にスレッド全体のスコアを増減させることができます。

@code{f} を除いて @code{References} キーと同じ型が指定出来ます。
また、自動的にスコアファイルに @samp{Thread} エントリが追加されます。
@end table

@item
拡張ヘッダの要素。キーが @code{Extra} である場合のみ意味を持ちます。
@code{Subject} や @code{From} などの標準以外のヘッダにマッチさせたい場合に
そのヘッダを指定します。
ただし、指定したヘッダは @code{elmo-msgdb-extra-fields} にも設定する必要があります。
したがって、拡張ヘッダが取得できないフォルダでは機能しません。

@end enumerate

そしてこれらの@emph{全ての要素を当てはめた後の}合計のスコアがそのメッセー
ジのスコアとなります。

@cindex Score File Atoms
@item mark
この値より小さいスコアのメッセージには既読マークをつけます。
デフォルト値は @code{wl-summary-mark-below} で指定されます。

@item expunge
この値より小さいスコアのメッセージはサマリから消去します。
デフォルト値は @code{wl-summary-expunge-below} で指定されます。

@item mark-and-expunge
@code{mark} と @code{expunge} を同時に指定します。
つまり、この値より小さいスコアのメッセージは既読マークをつけ、サマリから消去します。

@item target
この値より大きいスコアのメッセージにはまとめ処理用マーク @samp{*} をつけます。
デフォルト値は @code{wl-summary-target-above} で指定されます。

@item important
この値より大きいスコアのメッセージには重要マーク @samp{$} をつけます。
デフォルト値は @code{wl-summary-important-above} で指定されます。
@end table

@subsection 注意事項

@code{extra} キーはもちろん、@code{lines} と @code{xref} キーを使用する
場合でも、@code{elmo-msgdb-extra-fields} を設定する必要があります。

@lisp
(setq elmo-msgdb-extra-fields '("lines" "xref"))
@end lisp

その他、下記の制限事項があります。

@itemize @bullet
@item サマリ情報に含まれる@samp{References}フィールドには最後の
@samp{Message-ID}しか存在しないため、@code{references}キーもその
@samp{Message-ID}にしかマッチしない。
@end itemize

フォルダ種別により参照できるキーの一覧。

@example
@group
                        chars lines xref  extra
localdir,localnews      ○    △    △    △
nntp (xover対応)        ○    △    △    ×
     (xover非対応)      ×    △    △    △
imap4                   ○    △    △    △
pop3                    ×    △    △    △

                ○: 参照できる
                ×: 参照できない(無視される)
                △: @code{elmo-msgdb-extra-fields} を設定すれば参照できる
@end group
@end example


@node Customization, Mailing List, Scoring, Top
@chapter Wanderlust のカスタマイズ
@cindex Customization

@menu
* Living with other packages::  パッケージのある生活
* Highlights::                  ハイライトの設定
* Biff::                        メールの着信を知らせる
* Advanced Settings::           カスタマイズ〜応用編〜
* Customizable Valiables::      その他のカスタマイズ変数一覧
* Hooks::                       フック
@end menu


@node Living with other packages, Highlights, Customization, Customization
@section パッケージのある生活

他のパッケージを使うための設定例です。

@menu
* imput::                       imput (im-wl.el)
* BBDB::                        BBDB
* supercite::                   supercite.el
* mu-cite::                     mu-cite.el
* x-face-mule::                 x-face-mule.el
* dired-dd::                    dired-dd.el
* MHC::                         MHC
@end menu


@node imput, BBDB, Living with other packages, Living with other packages
@subsection imput
@pindex imput
@cindex im-wl

@file{util/im-wl.el} を @code{load-path} において以下のように設定すれば 
OK です。

インストール時に @code{exec-path} 上に @command{imput} があれば、
@file{im-wl.el}はインストールされます。@xref{Install}.

@lisp
@group
(autoload 'wl-draft-send-with-imput-async "im-wl")
(setq wl-draft-send-func 'wl-draft-send-with-imput-async)
@end group
@end lisp


@node BBDB, supercite, imput, Living with other packages
@subsection bbdb.el
@pindex BBDB

@file{util/bbdb-wl.el} を @code{load-path} において以下のように設定すれば
OK です。

インストール時に @code{load-path} 上に BBDB があれば、
@file{bbdb-wl.el} はバイトコンパイル/インストールされます。
@xref{Install}.

@lisp
@group
(require 'bbdb-wl)

(bbdb-wl-setup)
;; @r{ポップアップ表示}
(setq bbdb-use-pop-up t)
;; @r{自動収集}
(setq bbdb/mail-auto-create-p t)
(setq signature-use-bbdb t)
(setq bbdb-north-american-phone-numbers-p nil)
;; @r{サマリに bbdb の名前を表示} :-)。
(setq wl-summary-from-func 'bbdb-wl-from-func)
;; @r{自動的に ML フィールドを加える}
(add-hook 'bbdb-notice-hook 'bbdb-auto-notes-hook)
(setq bbdb-auto-notes-alist '(("X-ML-Name" (".*$" ML 0))))
@end group
@end lisp


@node supercite, mu-cite, BBDB, Living with other packages
@subsection sc.el(supercite), sc-register.el
@pindex sc
@pindex supercite

普通のメーラと同じ設定で OK です。以下は、設定の一例です。

@lisp
@group
(autoload 'sc-cite-original "sc" nil t)
(setq mail-yank-hooks 'sc-cite-original)
(setq sc-preferred-header-style 1)
(setq sc-electric-references-p nil)
(setq sc-citation-leader "")
(setq sc-load-hook '(lambda () (require 'sc-register)))
(setq sc-preferred-attribution 'registeredname)
@end group
@end lisp


@node mu-cite, x-face-mule, supercite, Living with other packages
@subsection mu-cite.el
@pindex mu-cite

普通のメーラと同じ設定で OK です。以下は設定の一例です。

mu-cite 8.0以前のバージョンをお使いなら、
以下のように設定してください。

@lisp
@group
(autoload 'mu-cite/cite-original "mu-cite" nil t)
(setq mail-citation-hook 'mu-cite/cite-original)
@end group
@end lisp

mu-cite 8.1以降のバージョンをお使いなら、
以下のように設定してください。

@lisp
@group
(autoload 'mu-cite-original "mu-cite" nil t)
(add-hook 'mail-citation-hook (function mu-cite-original))
@end group
@end lisp

@node x-face-mule, dired-dd, mu-cite, Living with other packages
@subsection x-face-mule.el
@pindex x-face-mule
@pindex bitmap-mule

x-face-mule のバージョンによって設定が異なります。

x-face-mule 0.19以前のバージョンをお使いなら、
以下のように設定してください。

@lisp
@group
(setq wl-highlight-x-face-func
      (function
       (lambda (&optional beg end)
         (x-face-mule:x-face-decode-message-header))))
(require 'x-face-mule)
@end group
@end lisp

x-face-mule 0.20 以降のバージョンをお使いなら、
以下のように設定してください。

@lisp
@group
(setq wl-highlight-x-face-func
      (function
       (lambda (&optional beg end)
         (x-face-mule-x-face-decode-message-header))))
(require 'x-face-mule)
@end group
@end lisp

bitmap-mule 8.0以降に付属の @file{x-face-mule.el}
をお使いになる場合は以下のように設定してください。

@lisp
@group
(autoload 'x-face-decode-message-header "x-face-mule")
(setq wl-highlight-x-face-func 'x-face-decode-message-header)
@end group
@end lisp

エンコード済みの X-Face 文字列を @file{~/.xface}
(変数 @code{wl-x-face-file} の値です)の内容に用意しておくと、
ドラフトが準備されるときに自動的に @samp{X-Face:} フィールドとして挿入されます。
(変数 @code{wl-auto-insert-x-face} が non-nil の場合)


@node dired-dd, MHC, x-face-mule, Living with other packages
@subsection dired-dd(Dired-DragDrop)
@pindex Dired-DragDrop
@pindex Dired-DD
@cindex Drag and Drop

dired-dd パッケージに含まれる @file{dired-dd-mime.el} を組み込めば、GNU
Emacs で編集中の草稿バッファへ dired からドラッグ&ドロップするだけで簡単
にマルチパートを作成できます(もっとも、Wanderlust 専用ではなく tm/SEMI 
汎用ですが)。

@lisp
@group
;; @r{dired-dd:} http://www.asahi-net.or.jp/~pi9s-nnb/dired-dd-home.html
(add-hook 'dired-load-hook
          (function
           (lambda ()
             (load "dired-x")
             ;; @r{Set dired-x variables here.}
             ;; @r{To and flo@dots{}}
             (if window-system
                 (progn (require 'dired-dd)
                        (require 'dired-dd-mime))))))
@end group
@end lisp

@node MHC, , dired-dd, Living with other packages
@subsection mhc.el
@pindex MHC

Message Harmonized Calendaring system
(@uref{http://www.quickhack.net/mhc/})

MHC を用いると、メッセージを元に予定表を作れます。

mhc-0.25 の場合：

@lisp
@group
(setq mhc-mailer-package 'wl)
(autoload 'mhc-mode "mhc" nil t)
(add-hook 'wl-summary-mode-hook 'mhc-mode)
(add-hook 'wl-folder-mode-hook 'mhc-mode)
@end group
@end lisp

mhc-current の場合：

@lisp
@group
(autoload 'mhc-wl-setup "mhc-wl")
(add-hook 'wl-init-hook 'mhc-wl-setup)
@end group
@end lisp

@node Highlights, Biff, Living with other packages, Customization
@section ハイライトの設定

@subsection カスタマイズ変数

@table @code
@item  wl-summary-highlight
@vindex wl-summary-highlight
初期設定は @code{t}。サマリのハイライトを行うかどうか。
Non-nil ならサマリのハイライトを行います。

@item  wl-highlight-max-summary-lines
@vindex wl-highlight-max-summary-lines
初期設定は 10000。
サマリの行数がこの値より大きい場合、サマリのハイライトを行いません。

@item  wl-summary-highlight-partial-threshold
@vindex wl-summary-highlight-partial-threshold
初期設定は 1000。
サマリ全体をハイライトするかどうかの閾値。
この値を越える行数のメッセージがサマリに存在する場合、
部分的なハイライトを行います。

@item  wl-summary-partial-highlight-above-lines
@vindex wl-summary-partial-highlight-above-lines
初期設定は 30。@code{wl-summary-highlight-partial-threshold} を越える行
数のメッセージがサマリに存在する場合、バッファ末から、カーソル行よりこの
値の行数分だけ上のメッセージまで部分的なハイライトが行なわれます。(この
値を @code{nil} にするとバッファ末から
@code{wl-summary-highlight-partial-threshold}行分だけハイライトされるよ
うになります。)

@item wl-highlight-body-too
@vindex  wl-highlight-body-too
初期設定は @code{t}。
Non-nil ならドラフトおよびメッセージの本文もハイライトの対象とします。

@item  wl-highlight-message-header-alist
@vindex wl-highlight-message-header-alist
ドラフトおよびメッセージのヘッダのハイライトを行う際に、
重要 (@code{wl-highlight-message-important-header-contents})な、
二番目に重要 (@code{wl-highlight-message-important-header-contents2})な、
そして重要ではない (@code{wl-highlight-message-unimportant-header-contents})
ことを表す face をそれぞれどのメッセージヘッダに割り当てるかを設定します。
同様に、任意の正規表現に対して任意の face を割り当てることもできます。

@item wl-highlight-citation-prefix-regexp
@vindex  wl-highlight-citation-prefix-regexp
ドラフトおよびメッセージの本文内の引用行を示す正規表現を指定します。
この正規表現にマッチした本文は、
(@code{wl-highlight-message-cited-text-*})で指定される face でハイライトされます。

@item wl-highlight-highlight-citation-too
@vindex wl-highlight-highlight-citation-too
初期設定は @code{nil}。
Non-nil なら@code{wl-highlight-citation-prefix-regexp}で与えられる
引用行の引用を示す正規表現自体もハイライトの対象とします。

@item wl-highlight-citation-header-regexp
@vindex wl-highlight-citation-header-regexp
引用を始めることを示すヘッダの正規表現を指定します。
この正規表現にマッチした本文は、
@code{wl-highlight-message-headers}で指定される face でハイライトされます。

@item wl-highlight-max-header-size
@vindex wl-highlight-max-header-size
初期設定は @code{nil}。
メッセージのヘッダサイズがこの値より大きい場合、ヘッダをハイライトしませ
ん。@code{nil} の場合、サイズに関係なくハイライトします。

@item wl-highlight-max-message-size
@vindex wl-highlight-max-message-size
初期設定は 10000。
メッセージがこの値より大きい場合、メッセージのハイライトを行いません。
これにより uuencode や非常に大きなダイジェストなどの
ハイライトの抑止を行います。

@item  wl-highlight-signature-separator
@vindex wl-highlight-signature-separator
シグニチャの境界を表す正規表現を指定します。
正規表現でも、正規表現のリストでも構いません。
この正規表現にマッチした場所以降のメッセージは、
@code{wl-highlight-message-signature}で指定される face でハイライトされます。

@item  wl-max-signature-size
@vindex wl-max-signature-size
初期設定は 400。
シグニチャをハイライトする場合、
ハイライトする最大のシグナチャの大きさを指定します。

@item wl-use-highlight-mouse-line
@vindex  wl-use-highlight-mouse-line
初期設定は @code{t}。
Non-nil ならフォルダモード、サマリモードなどで
マウスポインタの行をハイライトの対象とします。
@end table

@subsection 文字の色、フォントの設定

文字の色や、フォントを変えるには、Wanderlust で定義されている face を変
更する必要があります。フォントを変えたいときは @code{set-face-font}、
色を変えたいときは @code{set-face-foreground} などを使えばよいでしょう。
face の設定は @file{.emacs} に書くことはできないので @file{~/.wl} に書い
てください。

たとえば、シグニチャの色を黄色に変えたいときは、

@lisp
(set-face-foreground 'wl-highlight-message-signature "yellow")
@end lisp

@noindent
を @file{~/.wl} に書きます。

以下に Wanderlust で定義されている face について説明します。

@table @code
@item wl-highlight-message-headers
メッセージヘッダの名前部分の face です。

@item wl-highlight-message-header-contents
メッセージヘッダの内容部分の face です。

@item wl-highlight-message-important-header-contents
メッセージヘッダの内容のうち重要な部分の face です。
デフォルトでは、@samp{Subject:} の内容部分が設定されています。
この値は @code{wl-highlight-message-header-alist}
 を変更すれば変えることができます。

@item wl-highlight-message-important-header-contents2
メッセージヘッダの内容のうち重要な部分の face その２です。
デフォルトでは、@samp{From:} と @samp{To:} の内容部分が設定されています。
この値は @code{wl-highlight-message-header-alist}
を変更すれば変えることができます。

@item wl-highlight-message-unimportant-header-contents
メッセージヘッダの内容のうち重要ではない部分の face です。
デフォルトでは、@samp{X-} で始まるヘッダと @samp{User-Agent:} の内容部分
が設定されています。この値は @code{wl-highlight-message-header-alist} を
変更すれば変えることができます。

@item wl-highlight-message-citation-header
メッセージの引用ヘッダ部分の face です。

@item wl-highlight-message-cited-text-*
メッセージの引用テキスト部分の face です。
最後には@var{数字}がつき、10 段階まで引用ごとに色分けできるようにしています。

@item wl-highlight-message-signature
メッセージのシグニチャ部分の face です。初期設定は、明色バックでは 
@samp{khaki}、暗色バックでは @samp{DarkSlateBule} です。

@item wl-highlight-header-separator-face
ドラフトのメッセージのヘッダセパレータの face です。

@item wl-highlight-summary-important-face
サマリで重要マークのついたメッセージ行の face です。

@item wl-highlight-summary-new-face
サマリで新規マークのついたメッセージ行の face です。

@item wl-highlight-summary-displaying-face
サマリで現在表示中のメッセージ行の face です。
この face は overlay されます。

@item wl-highlight-thread-indent-face
サマリで現在表示中のメッセージ行の face です。

@item wl-highlight-summary-unread-face
サマリで未読マークのついたメッセージ行の face です。

@item wl-highlight-summary-deleted-face
サマリで削除マークのついたメッセージ行の face です。

@item wl-highlight-summary-refiled-face
サマリでリファイルマークのついたメッセージ行の face です。

@item wl-highlight-refile-destination-face
サマリでリファイルマークの付いたメッセージ行の、
リファイル先情報の部分につく face です。

@item wl-highlight-summary-copied-face
サマリでコピーマークのついたメッセージ行の face です。

@item wl-highlight-summary-target-face
サマリでまとめ処理用マーク @samp{*} のついたメッセージ行の face です。

@item wl-highlight-summary-thread-top-face
サマリでスレッドトップのメッセージ行の face です。

@item wl-highlight-summary-normal-face
サマリでスレッドトップではないメッセージ行の face です。

@item wl-highlight-folder-unknown-face
フォルダモードで、いくつ未同期メッセージがあるか分らないフォルダの
 face です。

@item wl-highlight-folder-zero-face
フォルダモードで、未同期メッセージがないフォルダの face です。

@item wl-highlight-folder-few-face
フォルダモードで、未同期メッセージが少しあるフォルダの face です。

@item wl-highlight-folder-many-face
フォルダモードで、未同期メッセージがたくさんあるフォルダの face です。
「少し」と「たくさん」の切れ目は、
変数 @code{wl-folder-many-unsync-threshold} で設定されます。

@item wl-highlight-folder-unread-face
フォルダモードで、未同期メッセージがなくて未読メッセージがある
フォルダの face です。

@item wl-highlight-folder-killed-face
フォルダモードで、アクセスグループ中の削除されたフォルダの face です。

@item wl-highlight-folder-opened-face
フォルダモードで、開いたグループにつく face です。
変数 @code{wl-highlight-folder-by-numbers} が @code{nil} か @var{数} の
とき有効です。

@item wl-highlight-folder-closed-face
フォルダモードで、閉じたグループにつく face です。
変数 @code{wl-highlight-folder-by-numbers} が @code{nil} か @var{数} の
とき有効です。

@item wl-highlight-folder-path-face
フォルダモードで、現在選択中のフォルダまでのパスにつく face です。

@item wl-highlight-logo-face
デモでロゴにつく face です。

@item wl-highlight-demo-face
デモの文字列(バージョン番号など)につく face です。
@end table


@node Biff, Advanced Settings, Highlights, Customization
@section メールの着信を知らせる
@cindex Biff

以下のように設定しておくと @samp{%inbox} にメールが届いたときに、
モードラインの表示によりメールの着信を知らせてくれます。

@lisp
(setq wl-biff-check-folder-list '("%inbox"))
@end lisp

@subsection カスタマイズ変数

@table @code
@item wl-biff-check-folder-list
@vindex wl-biff-check-folder-list
初期設定は @code{nil}。
メールの着信をチェックするフォルダのリスト。
@code{nil} の場合は着信のチェックを行ないません。

@item wl-biff-check-interval
@vindex wl-biff-check-interval
初期設定は 40 (単位:秒)。
この値ごとにメール着信のチェックを行ないます。

@item wl-biff-notify-hook
@vindex wl-biff-notify-hook
初期設定は @code{nil}。
新しいメールが届いた際に実行されるフック。
例えばビープ音を鳴らすなら
@lisp
(setq wl-biff-notify-hook '(beep))
@end lisp
のように設定します。
@end table


@node Advanced Settings, Customizable Valiables, Biff, Customization
@section カスタマイズ〜応用編〜

@menu
* Draft for Reply::             返事用ドラフト
* Thread Format::               スレッドの見た目
* User-Agent Field::            @samp{User-Agent:} ヘッダフィールド
@end menu


@node Draft for Reply, Thread Format, Advanced Settings, Advanced Settings
@subsection 返事用ドラフト
@vindex wl-draft-reply-with-argument-list
@vindex wl-draft-reply-without-argument-list
@vindex wl-draft-reply-myself-with-argument-list
@vindex wl-draft-reply-myself-without-argument-list

メーリングリストの記事に返事を書くときは、サマリモードで @kbd{a} を押し
ただけで元記事の @samp{Reply-To:} にあるアドレスを @samp{To:} に用意して
欲しい、という場合は以下のようにしたら良いでしょう。

@lisp
@group
(setq wl-draft-reply-without-argument-list
      '(("Mail-Followup-To" . (("Mail-Followup-To") nil ("Newsgroups")))
        ("Followup-To" . (nil nil ("Followup-To")))
        (("X-ML-Name" "Reply-To") . (("Reply-To") nil nil))
        ("From" . (("From") ("To" "Cc") ("Newsgroups")))))
@end group
@end lisp

@noindent
(@samp{X-ML-Name:} フィールド及び @samp{Reply-To:} フィールドの両方が元
記事に存在する場合だけ、@samp{To:} に元記事中の @samp{Reply-To:} フィー
ルドが準備されます。)

@c (最後の行の意味は、ドラフトの @samp{To:} に元記事中の @samp{From:} フィー
@c ルドが、ドラフトの @samp{Cc:} に元記事の @samp{To:} フィールドおよび 
@c @samp{Cc:} フィールド、そして @samp{Newsgroups:} に元記事の c
@c @samp{Newsgroups:} フィールドがそれぞれ (あれば) 準備されるということで
@c す。)

同様にして、prefix argument 付きで  @kbd{a} を押したときの動作が、
@code{wl-draft-reply-with-argument-list} で設定できます。

注： 自分が出したメールに返信する際の動作は、それらに代わって
@code{wl-draft-reply-myself-without-argument-list},
@code{wl-draft-reply-myself-with-argument-list}
で指定します。


@node Thread Format, User-Agent Field, Draft for Reply, Advanced Settings
@subsection スレッドの見ため

@example
@group
  389  09/18(金)01:07 [ てらにし          ] wl-0.6.3
  390  09/18(金)07:25 +-[ 津邑さん          ]
  391  09/18(金)19:24 +-[ 村田さん          ]
  392  09/20(日)21:49 +-[ 奥西さん          ]
  396  09/20(日)22:11 | +-[ 津邑さん          ]
  398  09/21(月)00:17 |   +-[ 津邑さん          ]
  408  09/21(月)22:37 |     +-[ 奥西さん          ]
  411  09/22(火)01:34 |       +-[ 津邑さん          ]
  412  09/22(火)09:28 |       +-[ てらにし          ]
  415  09/22(火)11:52 |         +-[ 津邑さん          ]
  416  09/22(火)12:38 |           +-[ てらにし          ]
  395  09/20(日)21:49 +-[ 奥西さん          ]
  397  09/21(月)00:15 +-[ 奥西さん          ]
@end group
@end example

スレッドの見ためを上記のようにしたい場合の設定は以下の通りです。

@lisp
@group
(setq wl-thread-indent-level 2)
(setq wl-thread-have-younger-brother-str "+")
(setq wl-thread-youngest-child-str       "+")
(setq wl-thread-vertical-str             "|")
(setq wl-thread-horizontal-str           "-")
(setq wl-thread-space-str                " ")
@end group
@end lisp

枝を表示しないようにしたい場合の設定は以下のようにします。

@lisp
@group
(setq wl-thread-indent-level 2)
(setq wl-thread-have-younger-brother-str " ")
(setq wl-thread-youngest-child-str       " ")
(setq wl-thread-vertical-str             " ")
(setq wl-thread-horizontal-str           " ")
(setq wl-thread-space-str                " ")
@end group
@end lisp

@node User-Agent Field,  , Thread Format, Advanced Settings
@subsection User-Agent フィールド
@cindex X-Mailer
@cindex User-Agent

@samp{X-Mailer:} フィールドや @samp{User-Agent:} フィールドに凝りたいと
いう変わった人は、文字列を生成する関数を自分の好きなように定義して、変数 
@code{wl-generate-mailer-string-func} に設定してください。

@samp{User-Agent:} フィールドを短くしたいのであれば、以下の設定をしてく
ださい。

@lisp
@group
(setq wl-generate-mailer-string-func
      (function
       (lambda ()
         (concat "User-Agent: "
                 (wl-generate-user-agent-string-1 nil)))))
@end group
@end lisp

以下は設定の例です。

@lisp
@group
(setq mime-edit-insert-user-agent-field nil)
(setq wl-generate-mailer-string-func
      (function
       (lambda ()
         (format "X-Mailer: %s" (product-string-1 'wl-version)))))
@end group
@end lisp



@node Customizable Valiables, Hooks, Advanced Settings, Customization
@section その他のカスタマイズ変数一覧

その他のカスタマイズ変数一覧。

@table @code
@item wl-default-folder
@vindex wl-default-folder
初期設定は @samp{%inbox}。フォルダ移動時などのデフォルト値となります。

@item wl-draft-folder
@vindex wl-draft-folder
初期設定は @samp{+draft}。ドラフトをセーブするフォルダです。
localdir フォルダである必要があります。

@item wl-trash-folder
@vindex wl-trash-folder
初期設定は @samp{+trash}。ゴミ箱フォルダです。
この値を変更したときは Wanderlust を再起動することをお勧めします。

@item wl-interactive-exit
@vindex wl-interactive-exit
初期設定は @code{t}。
Non-nil ならば、Wanderlust 終了時に確認を行います。

@item wl-interactive-send
@vindex wl-interactive-send
初期設定は @code{nil}。
Non-nil ならば、メール送信時に本当に送信して良いかを確認します。

@item wl-folder-sync-range-alist
@vindex wl-folder-sync-range-alist
初期設定は、以下の連想リスト。

@lisp
@group
(("^&.*$" . "all")
 ("^\\+draft$\\|^\\+queue$" . "all"))
@end group
@end lisp

@noindent
フォルダ名の正規表現とフォルダ移動時のサマリ更新レンジとの連想リストです。
更新レンジには @code{wl-summary-sync} で入力できる値のいずれか
(@samp{all}, @samp{update}, @samp{rescan}, @samp{rescan-noscore},
@samp{first}, @samp{last}) を指定します。マッチしなかった場合は、
@samp{update} となります。

@item wl-ask-range
@vindex wl-ask-range
初期設定は @code{t}。
@code{nil} なら、フォルダ移動時のサマリ更新で @code{wl-folder-sync-range-alist} 
の値を使用します。

@item wl-mime-charset
@vindex wl-mime-charset
初期設定は @code{x-ctext}。
MIME ではないメッセージの場合 (@samp{Content-Type:} がないメールなど) や、
サマリの表示で用いられる MIME charset です。
(Nemacs とその他の Emacsen でサマリを共有したい場合は、
この値を @code{iso-2022-jp} としてください。)

@item wl-highlight-folder-with-icon
@vindex wl-highlight-folder-with-icon
XEmacs または Emacs 21 で有効です。初期設定はその Emacs に依存します
(アイコンを使用できる Emacsen では @code{t} になります)。

@item wl-strict-diff-folders
@vindex wl-strict-diff-folders
フォルダ名の正規表現のリストです。
フォルダモードで @kbd{s} を押すなどして未読のメッセージ数を
チェックした場合、通常は簡易的な方法でチェックしています(処理は速いが、正確ではない)。
この変数にマッチするフォルダは厳密にチェックします。
IMAP4 フォルダに対する条件フィルタフォルダのような場合には、
この変数にマッチするよう設定すると良いでしょう。
初期設定は @code{nil}。

@item wl-folder-use-server-diff
@vindex wl-folder-use-server-diff
フォルダモードで @kbd{s} を押すなどして未読のメッセージ数をチェックした
場合、通常は(サーバ上のメッセージ数) @minus{} (ローカルにあるメッセージ
数)が未読とみなされます。しかし、この変数が non-nil ならば、サーバ上の未
読のメッセージ数をチェックします。IMAP4 フォルダにのみ影響があります。た
だし、変数 @code{elmo-imap4-disuse-server-flag-mailbox-regexp} にマッチ
するメールボックスの IMAP4 フォルダは、この変数にマッチしてもサーバ上の
未読のメッセージ数をチェックしません。初期設定は @code{t}。

@item wl-auto-check-folder-name
@vindex wl-auto-check-folder-name
初期設定は @code{nil}。
Non-nil ならば、設定された値を持つフォルダの未読数を起動時にチェックします。
@code{none} ならば、起動時にチェックしません。
リストならば、リストに設定された全てのフォルダを起動時にチェックします。

@item wl-auto-uncheck-folder-list
@vindex wl-auto-uncheck-folder-list
初期設定は以下のリスト。

@lisp
@group
("\\$.*")
@end group
@end lisp

@noindent
@code{wl-auto-check-folder-name} に指定されたグループに含まれていても
起動時に未読チェックしないフォルダ名の正規表現のリストです。

@item wl-auto-check-folder-list
@vindex wl-auto-check-folder-list
初期設定は @code{nil}。
@code{wl-auto-check-folder-name} に指定されたグループに含まれていたら
起動時に必ず未読チェックするフォルダ名の正規表現のリストです。
@code{wl-auto-uncheck-folder-list} よりも優先します。

@item wl-no-save-folder-list
@vindex wl-no-save-folder-list
初期設定は以下のリスト。

@lisp
@group
("^/.*$")
@end group
@end lisp

@noindent
セーブしないフォルダ名の正規表現のリストです。

@item wl-save-folder-list
@vindex wl-save-folder-list
初期設定は @code{nil}。
セーブするフォルダ名の正規表現のリストです。
@code{wl-no-save-folder-list} よりも優先します。

@item wl-folder-mime-charset-alist
@vindex wl-folder-mime-charset-alist
初期設定は以下の連想リスト。

@lisp
@group
(("^-alt\\.chinese" . big5)
 ("^-relcom\\." . koi8-r)
 ("^-tw\\." . big5)
 ("^-han\\." . euc-kr))
@end group
@end lisp

@noindent
フォルダ名の正規表現と MIME charset の連想リストです。
マッチしなかった場合は @code{wl-mime-charset} が使われます。

@item wl-folder-init-load-access-folders
@vindex wl-folder-init-load-access-folders
初期設定は @code{nil}。
初期化時に特定のアクセスグループのみロードする場合に、そのグループのリ
ストを指定します。
@code{nil} の場合は @code{wl-folder-init-no-load-access-folders} が参照されます。

@item wl-folder-init-no-load-access-folders
@vindex wl-folder-init-no-load-access-folders
初期設定は @code{nil}。
初期化時に特定のアクセスグループを除いてロードする場合に、ロードしない
アクセスグループのリストを指定します。
@code{wl-folder-init-load-access-folders} が non-nil の場合は無視されます。

@item wl-delete-folder-alist
@vindex wl-delete-folder-alist
初期設定は以下の連想リスト。

@lisp
@group
(("^-" . remove))
@end group
@end lisp

@noindent
削除マーク @samp{D} をつけたメッセージを削除する方針を設定します。
リストの各要素はフォルダと削除先になっており、削除先には次のものが指定で
きます。

@example
@code{remove} or @code{null} : メッセージを即削除する。
string             : 指定したフォルダに移動する。
@code{trash} or その他  : @code{wl-trash-folder} に移動する。
@end example

@item wl-refile-policy-alist
@vindex wl-refile-policy-alist
初期設定は以下のリスト。

@lisp
@group
(("^[-=]" . copy)
 (".*" . move))
@end group
@end lisp

@noindent
リファイルマーク @samp{o} をつける際、メッセージを移動するかコピーするか
を指定します。リストの各要素にはフォルダと @code{copy} または 
@code{move} との cons cell を指定します。

@item wl-x-face-file
@vindex wl-x-face-file
初期設定は @file{~/.xface}。
エンコード済みの X-Face 文字列を内容とするファイル名です。
@xref{x-face-mule}.

@item wl-demo-display-logo
@vindex wl-demo-display-logo
Non-nil ならばオープニングデモでビットマップのイメージを表示します。
@code{xpm}, @code{xbm} を指定すると(可能ならば)、その画像タイプのイメー
ジを表示します。

@item elmo-use-database
@vindex  elmo-use-database
XEmacs のみ有効です。初期設定は、XEmacs に依存します。
(dbm の機能をもつ XEmacs ならば @code{t} となります。)
Non-nil ならば dbm を使って Message-ID の管理を行ないます。

@item elmo-passwd-alist-file-name
@vindex  elmo-passwd-alist-file-name
初期設定は @file{passwd}。
パスワードをセーブしておくファイルの名前です。
コマンド @code{elmo-passwd-alist-save} を実行するとこのファイルに現在設定
されているパスワードがセーブされます。

@item elmo-passwd-life-time
@vindex  elmo-passwd-life-time
初期設定は @code{nil}。
Non-nil な値が設定された場合は、新規にパスワードが入力されてから
@code{elmo-passwd-life-time} 秒後にパスワードを消去するタイマが、
セットされます。

@item elmo-nntp-list-folders-use-cache
@vindex elmo-nntp-list-folders-use-cache
初期設定は 600 (秒)。
NNTP において @samp{list} や @samp{list active} の結果を
キャッシュしておく時間を秒単位で指定します。
@code{nil} ならキャッシュしません。

@item elmo-nntp-max-number-precedes-list-active
@vindex elmo-nntp-max-number-precedes-list-active
初期設定は @code{nil}。
NNTP において @samp{list active} の結果得られる記事番号を
フォルダの最大記事番号として利用します。
NNTP サーバとして INN 2.3 などを使用していて、フォルダモードでの既読数
が一致しない場合は @code{t} にしてください。
@c non-nil means?

@item elmo-nntp-default-use-listgroup
@vindex elmo-nntp-default-use-listgroup
初期設定は @code{t}。
Non-nil なら、NNTP において 総記事数を調べるために @samp{listgroup} を使
います。@code{nil} ならば @samp{group} の結果を用います。@samp{group} を使うと、
正確さには欠けますが、若干高速化されます。

@item elmo-pop3-send-command-synchronously
@vindex elmo-pop3-send-command-synchronously
初期設定は @code{nil}。
Non-nil なら POP3 のコマンドを同期的に発行します。サーバによってはこの値を設定しないとサマリ情報を取り出せない場合があるようです。
POP3 参照時に処理がハングするような場合は、@code{t} にすると良いかもしれません。

@item elmo-dop-flush-confirm
@vindex elmo-dop-flush-confirm
初期設定は @code{t}。
Non-nil ならばオフライン処理で溜った処理を実行するかどうかを確認します。

@item elmo-display-progress-threshold
@vindex elmo-display-progress-threshold
初期設定は 20。
進捗表示(progress gauge)を表示する閾値。この値よりも更新数が大きい場合は
進捗表示します。
@end table


@node Hooks,  , Customizable Valiables, Customization
@section フック

(Not yet written)


@node Mailing List, Addition, Customization, Top
@chapter メーリングリスト
@cindex Bug report
@cindex Backtrace

@display
Wanderlust Mailing List @t{<wl@@lists.airs.net>}
@end display

Wanderlust に関する議論はこのメーリングリストで行われます。
最新バージョンのアナウンスもこちらに流れます。

@t{wl-ctl@@lists.airs.net} 宛のメールの本文に、

@example
# guide
@end example

@noindent
と書いたメールを送ると入会のガイドが自動的にもらえます。

バグ報告やパッチの送付もこちらのメーリングリストへ送ってください。メーリ
ングリストのメンバでなくとも、送信できる設定になっています。

また、バグ報告の場合はバックトレースを取って添付すると原因究明しやすくな
ります。 @footnote{バックトレースの取り方は
@uref{http://www.jpl.org/elips/BUGS-ja.html}が参考になります。}

メーリングリストの皆様には貴重な御助言、コードをたくさん御提供いただいて
おります。この場を借りてお礼申し上げます。


@node Addition, Index, Mailing List, Top
@chapter おまけ

@section 略歴

@example
1998  3/05    MH メッセージをスレッド表示するプロトタイプを作ってみる。
      3/10    elisp による msgdb のしくみをつくる。
      3/26    IMAP と NNTP もスレッド表示できるようになる。
      4/13    スレッド表示用モジュールを elmo としてまとめはじめる。
      5/01    0.1.0 ボロボロの initial version が完成。
      6/12    tm-ja ML で、IMAP 対応の elisp メーラを作っている、
              とつい口を滑べらせてしまう。
      6/16    tm-ja, elips ML で 0.1.3 をアナウンス。
      6/22    北目さんのおかげで northeye.org でメーリングリストがスタート。
      7/01    mm-backend 対応(0.3.0)。
      8/25    multi フォルダ追加(0.5.0)。
      8/28    filter フォルダ追加(0.5.1)。
      9/10    スレッドが開閉できるようになる(0.6.0)。
      9/11    fldmgr by 村田さん によりフォルダの編集が簡単に。
      9/18    lha フォルダ追加 by 奥西さん(0.6.3)。
      9/24    スレッドの枝を表示(0.6.5)。
      9/28    圧縮フォルダがマルチアーカイバに対応 by 奥西さん。
     10/28    オフライン処理 (0.7.4)。
     12/09    ベータバージョンに。
     12/21    wl-expire by 村田さん。
1999  2/03    auto-refile by 津邑さん。
      4/28    wl-template by 村田さん。
      5/18    1.0.0 stable リリース。
      7/05    スコア機能 by 村田さん(2.1.0)。
      9/26    プラグ管理システム by 村田さん(2.2.2)。
     12/20    Modified UTF7 対応。
2000  3/24    1.1.0 stable リリース。
      4/03    CVS サーバでの開発を開始。
      5/07    スレッドつなぎ直し機能＆高速化 with 村田さん。
      6/12    LDAP 対応 with 千葉さん＆後藤さん。
      7/11    killed message 機能追加。
      7/18    POP3 を UIDL 対応。
      9/12    biff 機能 with 嵯峨田さん＆山岡さん。
     10/17    expire-hide by 岡田さん。
     11/08    2.4.0 stable リリース。
2001  7/04    2.6.0 stable リリース。
@end example

詳しい変遷は @file{ChangeLog} を御覧ください。

@section 名前

Wanderlust には、研究社英和辞典によれば、

@display
wanderlust   wan・der・lust
  ‡ドイツ語 'desire to wander' の意から‡
  −名 放浪癖， 旅行熱， 旅心： have 〜 放浪癖がある．
@end display

@noindent
という意味があります。が、名前にたいして深い意図はありません。
(強いて言えば、IMAP @result{} どこでもメールが読める @result{} 放浪癖 ?)

elmo は、@samp{Elisp Library for Message Orchestration} の略です。
最初はあの赤いぬいぐるみのつもりでしたが、放浪 @result{} 漂流 @result{}
道標 @result{} St.@: Elmo's fire @result{} elmo という、
それっぽい連想も可能です。

@section コードネーム

各バージョンにはコードネームがついています(ほとんど冗談です)。
いまのところ 1980 年代の米ビルボード誌トップ 40 ヒット

(@uref{http://lyrics.natalnet.com.br/html/top40/index.html})

@noindent
からアルファベット順に適当に好きなものをピックアップして使っています。


@node Index,  , Addition, Top
@unnumbered 索引

@menu
* Concept Index::               概念索引
* Key Index::                   キーバインド索引
* Variable Index::              変数索引
* Function Index::              関数索引
@end menu

@node Concept Index, Key Index, Index, Index
@unnumberedsec 概念索引
@printindex cp

@node Key Index, Variable Index, Concept Index, Index
@unnumberedsec キーバインド索引
@printindex ky

@node Variable Index, Function Index, Key Index, Index
@unnumberedsec 変数索引
@printindex vr

@node Function Index,  , Variable Index, Index
@unnumberedsec 関数索引
@printindex fn

@summarycontents
@contents
@bye

@c Local Variables: 
@c fill-column: 72
@c End:
